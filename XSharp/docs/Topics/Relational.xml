<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" status="Complete" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Relational</title>
  <keywords>
    <keyword>&lt;</keyword>
    <keyword>&lt;=</keyword>
    <keyword>&gt;</keyword>
    <keyword>&gt;=</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">Relational</para>
    </header>
    <para styleclass="Normal">X# uses the following Logical operators:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><tab /><tab /></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="11" colcount="3" style="width:auto;">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Operator</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Example</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Meaning</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">&lt;</para>
        </td>
        <td>
          <para styleclass="Body Text">x &lt; y</para>
        </td>
        <td>
          <para styleclass="Body Text">less than (true if x is less than y).</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">&lt;=</para>
        </td>
        <td>
          <para styleclass="Body Text">x &lt;= y</para>
        </td>
        <td>
          <para styleclass="Body Text">less than or equal to (true if x is less than or equal to y).</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">&gt;</para>
        </td>
        <td>
          <para styleclass="Body Text">x &gt; y</para>
        </td>
        <td>
          <para styleclass="Body Text">greater than (true if x is greater than y).</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">&gt;=</para>
        </td>
        <td>
          <para styleclass="Body Text">x &gt;= y</para>
        </td>
        <td>
          <para styleclass="Body Text">greater than or equals to (true if x is greater than or equal to y).</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">=</para>
        </td>
        <td>
          <para styleclass="Body Text">x = y</para>
        </td>
        <td>
          <para styleclass="Body Text">equality. <br/>Note that there is a difference between = and == for strings only</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">==</para>
        </td>
        <td>
          <para styleclass="Body Text">x == y</para>
        </td>
        <td>
          <para styleclass="Body Text">exact equality. <br/>Note that there is a difference between = and == for strings only</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">&lt;&gt;, #, !=</para>
        </td>
        <td>
          <para styleclass="Body Text">x &lt;&gt; y, x # y, x != y</para>
        </td>
        <td>
          <para styleclass="Body Text">not equal<br/>Note that for strings this follows the same rules as the single = operator.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">$</para>
        </td>
        <td>
          <para styleclass="Body Text">x $ y</para>
        </td>
        <td>
          <para styleclass="Body Text">is substring of. Returns true if the first string is a substring of the second (case sensitive !)</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">IS</para>
        </td>
        <td>
          <para styleclass="Body Text">x IS y</para>
        </td>
        <td>
          <para styleclass="Body Text">type compatibility. Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">ASTYPE</para>
        </td>
        <td>
          <para styleclass="Body Text">x ASTYPE y</para>
        </td>
        <td>
          <para styleclass="Body Text">type conversion. Returns the left operand cast to the type specified by the right operand (a static type), but as returns null where (T)x would throw an exception.</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The &apos;=&apos; and &apos;==&apos; operators behave differently for strings, and the behavior of the single equals also depends on a runtime setting.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Body Text">If you call SetExact(FALSE) then ‘=’ equates the characters up to the length of the string on the right-hand side of the operator ignoring the remaining characters on the left. This is the default setting. If you call SetExact(TRUE) then = and == have the same meaning for strings. </para>
  </body>
</topic>
