<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS1612</title>
  <keywords>
    <keyword translate="true">XS1612</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS1612</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Cannot modify the return value of &apos;expression&apos; because it is not a variable</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">An attempt was made to modify a value type that is produced as the result of an intermediate expression but is not stored in a variable. This error can occur when you attempt to directly modify a struct in a generic collection, as shown in the following example:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><text styleclass="Code with box" translate="true">List&lt;myStruct&gt; list = {…};  </text><br/><text styleclass="Code with box" translate="true">list[0].Name = &quot;MyStruct42&quot;; //XS1612  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To modify the struct, first assign it to a local variable, modify the variable, then assign the variable back to the item in the collection.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><text styleclass="Code with box" translate="true">List&lt;myStruct&gt; list = {…};  </text><br/><text styleclass="Code with box" translate="true">MyStruct ms = list[0];  </text><br/><text styleclass="Code with box" translate="true">ms.Name = &quot;MyStruct42&quot;;  </text><br/><text styleclass="Code with box" translate="true">list[0] = ms;  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This error occurs because value types are copied on assignment. When you retrieve a value type from a property or indexer, you are getting a copy of the object, not a reference to the object itself. The copy that is returned is not stored by the property or indexer because they are actually methods, not storage locations (variables). You must store the copy into a variable that you declare before you can modify it.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The error does not occur with reference types because a property or indexer in that case returns a reference to an existing object, which is a storage location.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If you are defining the class or struct, you can resolve this error by modifying your property declaration to provide access to the members of a struct. If you are writing client code, you can resolve the error by creating your own instance of the struct, modifying its fields, and then assigning the entire struct back to the property. As a third alternative, you can change your struct to a class.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">XS1612 also occurs when you attempt to access the member of a struct through a property on an enclosing class that is returning the entire struct, as shown in the following example:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><text styleclass="Code with box" translate="true">// XS1612.prg  </text><br/><text styleclass="Code with box" translate="true">using System;  </text><br/><br/><text styleclass="Code with box" translate="true">public struct MyStruct  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    public int Width;  </text><br/><text styleclass="Code with box" translate="true">}  </text><br/><br/><text styleclass="Code with box" translate="true">public class ListView  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    MyStruct ms;  </text><br/><text styleclass="Code with box" translate="true">    public MyStruct Size  </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        get { return ms; }  </text><br/><text styleclass="Code with box" translate="true">        set { ms = value; }  </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><text styleclass="Code with box" translate="true">}  </text><br/><br/><text styleclass="Code with box" translate="true">public class MyClass  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    public MyClass()  </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        ListView lvi;  </text><br/><text styleclass="Code with box" translate="true">        lvi = new ListView();  </text><br/><text styleclass="Code with box" translate="true">        lvi.Size.Width = 5; // XS1612  </text><br/><br/><text styleclass="Code with box" translate="true">        // You can use the following lines instead.  </text><br/><text styleclass="Code with box" translate="true">        // MyStruct ms;  </text><br/><text styleclass="Code with box" translate="true">        // ms.Width = 5;  </text><br/><text styleclass="Code with box" translate="true">        // lvi.Size = ms;  // XS1612  </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><br/><text styleclass="Code with box" translate="true">    public static void Main()   </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        MyClass mc = new MyClass();  </text><br/><text styleclass="Code with box" translate="true">        // Keep the console open in debug mode.  </text><br/><text styleclass="Code with box" translate="true">        Console.WriteLine(&quot;Press any key to exit.&quot;);  </text><br/><text styleclass="Code with box" translate="true">        Console.ReadKey();     </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><text styleclass="Code with box" translate="true">}  </text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
