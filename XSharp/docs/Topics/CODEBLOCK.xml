<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>CODEBLOCK</title>
  <keywords>
    <keyword>CODEBLOCK</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">CODEBLOCK</para>
    </header>
    <para styleclass="Normal">The <text style="font-weight:bold;">codeblock </text>type was introduced in the XBase language in the Clipper days.</para>
    <para styleclass="Normal">They can be seen like unnamed functions. They can have 0 or more parameters and return a value.</para>
    <para styleclass="Normal">The most simple codeblock that returns a string literal looks like this</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|| </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;Hello World&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">WAIT</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Body Text">To use a codeblock you call the Eval() runtime function</para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Codeblocks are not restricted to fixed expressions, because they can use parameters. </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">The following codeblock adds 2 parameters. </text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b| a + b}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, 1,2)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;Helllo &quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">, </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;World&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">WAIT</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">As you can see in the example, we can both use numeric parameters here or string parameters. Both work. That is because the parameters to a codeblock are of the so called USUAL type. They can contain any value. Of course the following will fail because the USUAL type does not support multiplying strings:</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b| </text><text style="font-weight:normal; font-style:normal; color:#993366;">a * b</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, 1,2)</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, &quot;Helllo &quot;, &quot;World&quot;)</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">WAIT</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Heading2">More complicated codeblocks</para>
    <para styleclass="Normal">Codeblocks are not restricted to single expressions. <br/>They may also contain a (comma seperated) <text style="font-weight:bold;">list of expressions</text>. The value of the last expression is the return value of the codeblock:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b,c| QOut(</text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 1&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">, a) , QOut(</text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 2&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">, b), QOut(</text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 3&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">, c), a*b*c}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb,10,20,30)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">WAIT</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Body Text">XSharp has also introduced codeblocks that contain of<text style="font-weight:bold;"> (lists of ) statements:</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#3366ff;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {| a,b,c| &#160;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 1&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ,a </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 2&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ,b</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? </text><text style="font-weight:normal; font-style:normal; color:#993366;">&quot;value 3&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ,c </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> a*b*c</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; }</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb,10,20,30)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">WAIT</text><br/><text style="font-weight:normal; font-style:normal; color:#3366ff;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Body Text"><text style="font-weight:bold; font-style:normal; color:#000000;">Please note </text></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The first statement should start on a new line after the parameter list </li>
      <li styleclass="List">There should be NO semi colon after the parameter list. </li>
      <li styleclass="List">The statement list should end with a RETURN statement.</li>
    </list>
    <para styleclass="List"></para>
  </body>
</topic>
