<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">/vo6</title>
  <keywords>
    <keyword translate="true">/vo6 compiler option</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">/vo6</text><tab /><tab /><text styleclass="Heading1" translate="true">Implicit pointer conversions </text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Vulcan</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The /vo6 option directs the compiler to resolve typed function pointers to PTR.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Syntax</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">/vo6[+|-]</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Arguments</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">+ | - </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Specifying +, or just /vo6, directs the compiler to resolve pointers that would resolve to typed function pointers in Visual Objects to PTR. </text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Remarks</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Vulcan.NET does not supported typed function pointers. Existing Visual Objects code that declares typed function pointers will not compile in Vulcan.NET, unless the type is changed to PTR or IntPtr.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If this option is enabled and a pointer type cannot be resolved, the compiler will attempt to locate a function with the same name as the pointer type (without &quot;PTR&quot;). If found, the compiler will resolve the type to PTR. This allows existing Visual Objects code to be compiled without modification, at least as far as the variable declaration is concerned.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The pointer type may be used as an argument to CCallNative(), PCallNative() or CallManaged(), depending on the type of function the pointer points to.</text></para>
    <para styleclass="Heading3"><text styleclass="Heading3" translate="true">To set this compiler option in the Visual Studio development environment:</text></para>
    <para styleclass="Normal"></para>
    <list id="48" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:&apos;Segoe UI&apos;; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Open the project&apos;s Properties page (see How to: Set Build Properties). </text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Click the Language tab. </text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">In the Visual Objects Compatibility section, modify the Resolve Typed Function Pointers To PTR property. </text></li>
    </list>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following code is valid in Visual Objects, but will not compile in Vulcan.NET unless /vo6 is used.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160; </text></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">FUNCTION foo( x AS INT ) AS VOID</text><br/><text styleclass="Code with box" translate="true"> &#160; RETURN</text><br/><text styleclass="Code with box" translate="true">GLOBAL pFoo AS foo PTR </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Using /vo6 has the same effect as if the GLOBAL declaration were rewritten as:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">GLOBAL pFoo AS PTR </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note that PTR does not have the same semantics as typed function pointers in Visual Objects. However, typed function pointers are primarily used as arguments to CALL(), CCALL() and PCALL() in Visual Objects, which are not supported in Vulcan.NET. They have been replaced with CCallNative(), PCallNative() and CallManaged(), which accept IntPtr arguments. The same end result (invoking a function indirectly through a pointer) is therefore possible in Vulcan.NET without typed function pointers.</text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
