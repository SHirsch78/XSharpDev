<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="helpproject.xsl" ?>
<topic template="Default" status="Complete" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="helpproject.xsd">
  <title>Pseudo Functions</title>
  <body>
    <header>
      <para styleclass="Heading1">Pseudo Functions</para>
    </header>
    <para styleclass="Normal">The following pseudo functions are supported by the X# compiler</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="8" colcount="2">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Function</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Description</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">PCOUNT</text>()</para>
        </td>
        <td>
          <para styleclass="Body Text">This pseudo function is only available in the <text style="font-weight:bold;">VO/Vulcan</text> dialect and only in methods or functions with a CLIPPER calling convention. <br/>It returns the number of argument passed to the function. The function does not expect and does not allow any arguments.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">_GETMPARAM</text>() and <text style="font-weight:bold;">_GETFPARAM</text>()</para>
        </td>
        <td>
          <para styleclass="Body Text">These pseudo functions are only available in the <text style="font-weight:bold;">VO/Vulcan</text> dialect and only in methods or functions with a CLIPPER calling convention. <br/>You can use them to retrieve a function parameter by position. You must pass a numeric expression to these functions. If you pass a number that is larger than the actual number of parameters at runtime then you will get an array access exception.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">String2Psz</text>() and <text style="font-weight:bold;">Cast2Psz</text>()</para>
        </td>
        <td>
          <para styleclass="Body Text">These pseudo functions are used  in the VO/Vulcan dialect to convert DotNet strings to unmanaged Ansi PSZ strings. Not only is a PSZ created, but the functions also change the code generation and set up code to clear the allocated PSZ variable on exit of the function in which they are created.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">ALTD</text>()</para>
        </td>
        <td>
          <para styleclass="Body Text">This function will insert a call to System.Diagnostics.Debugger.Break inside a check to see if the debugger is attached (System.Diagnostics.Debugger.IsAttached)</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">_GetInst</text>()</para>
        </td>
        <td>
          <para styleclass="Body Text">This function will return the module handle for the current module. Behind the scenes this is translated to System.Runtime.InteropServices.Marshal.GetHINSTANCE(TypeOf(FunctionsClass):Module)</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">PCALL()</text> and <text style="font-weight:bold;">CCALL()</text></para>
        </td>
        <td>
          <para styleclass="Body Text">The methods are used to call an API function for a strongly typed PTR.<br/>The function expects a first parameter of type PTR and the other parameters must match the parameters defined in the function to which the typed PTR points<br/>This is <text style="font-weight:bold;">not yet supported</text> in the current compiler version </para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">PCallNative&lt;Type&gt;()</text> and <text style="font-weight:bold;">CCallNative&lt;Type&gt;()</text></para>
        </td>
        <td>
          <para styleclass="Body Text">The methods are used to call an API function for an untyped PTR</para>
          <para styleclass="Body Text">The function expects a generic type parameter which indicates the return type and a first parameter of type PTR. Other parameters are allowed and must not point to managed memory.<br/>This is <text style="font-weight:bold;">not yet supported</text> in the current compiler version </para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"><tab /></para>
    <para styleclass="Normal"><tab /></para>
  </body>
</topic>
