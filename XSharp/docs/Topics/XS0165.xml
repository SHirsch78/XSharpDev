<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS0165</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS0165</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Use of unassigned local variable &apos;name&apos;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The C# compiler does not allow the use of uninitialized variables. If the compiler detects the use of a variable that might not have been initialized, it generates compiler error CS0165. For more information, see Fields. Note that this error is generated when the compiler encounters a construct that might result in the use of an unassigned variable, even if your particular code does not. This avoids the necessity of overly-complex rules for definite assignment.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For more information, see http://blogs.msdn.com/ericlippert/archive/2006/08/18/706398.aspx.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following sample generates CS0165:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">// CS0165.cs &#160;</text><br/><text styleclass="Code with box" translate="true">using System; &#160;</text><br/><br/><text styleclass="Code with box" translate="true">class MyClass &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;public int i; &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text><br/><br/><text styleclass="Code with box" translate="true">class MyClass2 &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;public static void Main(string[] args) &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// i and j are not initialized. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;int i, j; &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// You can provide a value for args[0] in the &apos;Command line arguments&apos; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// text box on the Debug tab of the project Properties window. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;if (args[0] == &quot;test&quot;) &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;i = 0; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;} &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// If the following else clause is absent, i might not be &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// initialized. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//else &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// &#160; &#160;i = 1; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//} &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// Because i might not have been initialized, the following &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// line causes CS0165. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;j = i; </text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// To resolve the error, uncomment the else clause of the previous &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// if statement, or initialize i when you declare it. &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// The following example causes CS0165 because myInstance is &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// declared but not instantiated. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;MyClass myInstance; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// The following line causes the error. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;myInstance.i = 0; &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// To resolve the error, replace the previous declaration with &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// the following line. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//MyClass myInstance = new MyClass(); &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Compiler error CS0165 can occur in recursive delegate definitions. You can avoid the error by defining the delegate in two statements so that the variable is not used before it is initialized. The following example demonstrates the error and the resolution.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">class Program &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;delegate void Del(); &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;static void Main(string[] args) &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// The following line causes CS0165 because variable d is used &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// as an argument before it has been initialized. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;Del d = delegate() { System.Console.WriteLine(d); }; &#160; </text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//// To resolve the error, initialize d in a separate statement. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//Del d = null; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//// After d is initialized, you can use it as an argument. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//d = delegate() { System.Console.WriteLine(d); }; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//d(); &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
