<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS1705</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS1705</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Assembly &apos;AssemblyName1&apos; uses &apos;TypeName&apos; which has a higher version than referenced assembly &apos;AssemblyName2&apos;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You are accessing a type that has a higher version number than the version number in a referenced assembly. Typically, this error is caused by the accidental use of two versions of the same assembly.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For example, suppose that you have two assemblies, Asmb1 and Asmb2. Assembly Asmb1 references version 1.0 of assembly Asmb2. Assembly Asmb1 also uses a class MyClass that was added to assembly Asmb2 in version 2.0. The compiler has unification rules for binding references, and a reference to MyClass in version 2.0 cannot be satisfied by version 1.0.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following more detailed example consists of four code modules:</text></para>
    <para styleclass="Normal"></para>
    <list id="174" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Two DLLs that are identical except for a version attribute.</text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">A third DLL that references the first two.</text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">A client that references only version 1.0 of the identical DLLs, but accesses a class from version 2.0.</text></li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following code creates the first of the identical DLLs. For information about how to generate a key file, see /keyfile (C# Compiler Options).</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">// CS1705a.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Compile by using the following command: &#160; </text><br/><text styleclass="Code with box" translate="true">// &#160; &#160; &#160;csc /target:library /out:C:\\CS1705.dll /keyfile:mykey.snk CS1705a.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// The DLL is created in the C:\ directory. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// The AssemblyVersion attribute specifies version 1.0 for this DLL. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">[assembly:System.Reflection.AssemblyVersion(&quot;1.0&quot;)] &#160;</text><br/><text styleclass="Code with box" translate="true">public class Class1 &#160; </text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; public void Method1() {} &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following code defines version 2.0 of the assembly, as specified by the AssemblyVersionAttribute attribute.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">// CS1705b.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Compile by using the following command: &#160; </text><br/><text styleclass="Code with box" translate="true">// &#160; &#160; csc /target:library /out:CS1705.dll /keyfile:mykey.snk CS1705b.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// The DLL is created in the current directory. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// The AssemblyVersion attribute specifies version 2.0 for this DLL. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">[assembly:System.Reflection.AssemblyVersion(&quot;2.0&quot;)] &#160;</text><br/><text styleclass="Code with box" translate="true">public class Class1 &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;public void Method1() { } &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following code references the two DLL versions that are defined in the preceding code. AssemblyA refers to the DLL created by CS1705a.cs (version 1.0). AssemblyB refers to the DLL created by CS1705b.cs (version 2.0). In ClassC, two methods are defined. The first, Return1A, returns an object of type Class1A, which is an alias for Class1 from version 1.0 of the DLL. The second, Return1B, returns an object of type Class1B, which is an alias for Class1 from version 2.0 of the DLL. The definition of Return1A creates a dependency on version 1.0; the definition of Return1B creates a dependency on version 2.0.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">// CS1705c.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Compile by using the following command. AssemblyA refers to the DLL created by &#160;</text><br/><text styleclass="Code with box" translate="true">// CS1705a.cs (version 1.0). AssemblyB refers to the DLL created by CS1705b.cs &#160;</text><br/><text styleclass="Code with box" translate="true">// (version 2.0). &#160;</text><br/><text styleclass="Code with box" translate="true">// &#160; &#160;csc /target:library /r:AssemblyA=C:\\CS1705.dll /r:AssemblyB=CS1705.dll CS1705c.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">extern alias AssemblyA; &#160;</text><br/><text styleclass="Code with box" translate="true">extern alias AssemblyB; &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Class1A is an alias for type Class1 from VS1705a.cs, which is in version 1.0 &#160; </text><br/><text styleclass="Code with box" translate="true">// of the assembly. Class1B is an alias for type Class1 from CS1705b.cs, which &#160;</text><br/><text styleclass="Code with box" translate="true">// is in version 2.0 of the assembly. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">using Class1A = AssemblyA::Class1; &#160;</text><br/><text styleclass="Code with box" translate="true">using Class1B = AssemblyB::Class1; &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Method Return1A in ClassC returns an object of type Class1A, which is &#160;</text><br/><text styleclass="Code with box" translate="true">// Class1 from version 1.0 of the DLL. Method Return1B returns an object &#160;</text><br/><text styleclass="Code with box" translate="true">// of type Class1B, which is Class1 from version 2.0 of the DLL. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">public class ClassC &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// The following line creates a dependency on version 1.0 of CS1705.dll. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// This is not the source of the problem when ClassC is accessed from &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// CS1705d.cs because CS1705d.cs references version 1.0 of the DLL. &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// Therefore, type Class1A and the assembly have the same version. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;public static Class1A Return1A() { return new Class1A(); } &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// The following line creates a dependency on version 2.0 of CS1705.dll. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// This causes compiler error CS1705 when ClassC is accessed from &#160; &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// CS1705d.cs, because CS1705d.cs does not reference version 2.0 of the &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// DLL. Class1B is the alias for Class1 in version 2.0, and CS1705d.cs &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// references version 1.0. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;public static Class1B Return1B() { return new Class1B(); } &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following code generates compiler error CS1705. It references the DLL created by CS1705a.cs (version 1.0). However, in the Main method, the code accesses ClassC from CS1705c.cs. ClassC uses a type that is defined in CS1705b.cs (version 2.0). This causes compiler error CS1705 because the type has a version number for CS1705.dll that is higher than the referenced version of CS1705.dll.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">C#</text><br/><br/><text styleclass="Code with box" translate="true">// CS1705d.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// Compile by using the following command: &#160;</text><br/><text styleclass="Code with box" translate="true">// &#160; &#160; csc /reference:C:\\CS1705.dll /reference:CS1705c.dll CS1705d.cs &#160;</text><br/><br/><text styleclass="Code with box" translate="true">// C:\\CS1705.dll is version 1.0 of the assembly. &#160;</text><br/><br/><text styleclass="Code with box" translate="true">class Tester &#160; </text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;static void Main() &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// Return1A returns a type defined in version 1.0. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;ClassC.Return1A().Method1(); &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// Return1B returns a type defined in version 2.0. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;ClassC.Return1B().Method1(); &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You can resolve the error in one of the following ways:</text></para>
    <para styleclass="Normal"></para>
    <list id="175" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Update the code so that all files use the same version of the DLL.</text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Add a reference to version 2.0 of the DLL to CS1705d.cs by using the following command to compile:</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">csc /reference:C:\\CS1705.dll /reference:CS1705.dll /reference:CS1705c.dll CS1705d.cs</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Although the program compiles when you use this command, it still does not run. To enable the program to run, you can provide an application configuration file that includes a &lt;dependentAssembly&gt; element that uses &lt;assemblyIdentity&gt; and &lt;codeBase&gt; child elements to specify the location of version 1.0 of the DLL. For more information about configuration files, see Configuring Apps.</text></para>
  </body>
</topic>
