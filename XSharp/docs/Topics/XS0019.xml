<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS0019</title>
  <keywords>
    <keyword translate="true">XS0019</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS0019</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Operator &apos;operator&apos; cannot be applied to operands of type &apos;type&apos; and &apos;type&apos;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A binary operator is applied to data types that do not support it. For example, you cannot use the || operator on strings, you cannot use + , - , &lt; , or &gt; operators on bool variables, and you cannot use the == operator with a struct type unless the type explicitly overloads that operator.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If you encounter this error with a class type, it is because the class does not overload the operator. For more information, see Overloadable Operators.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the following example, XS0019 is generated in two places because bool in X# is not convertible to int. XS0019 also is generated when the subtraction operator is applied to a string. The addition operator (+) can be used with string operands because that operator is overloaded by the String class to perform string concatenation.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">static void Main() &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;bool result = true; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;if (result &gt; 0) //XS0019 &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;// Do something. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160;int i = 1; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// You cannot compare an integer and a boolean value. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;if (i == true) //XS0019 &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//Do something... &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// The following use of == causes no error. It is the comparison of &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// an integer and a boolean value that causes the error in the &#160; </text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;// previous if statement. &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;if (result == true) &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160; &#160; &#160;//Do something... &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;} &#160;</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; &#160;string s = &quot;Just try to subtract me.&quot;; &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; &#160;float f = 100 - s; // XS0019 &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the following example, conditional logic must be specified outside the ConditionalAttribute. You can pass only one predefined symbol to the ConditionalAttribute.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following sample generates XS0019.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">// XS0019_a.prg &#160;</text><br/><text styleclass="Code with box" translate="true">// compile with: /target:library &#160;</text><br/><text styleclass="Code with box" translate="true">using System.Diagnostics; &#160;</text><br/><text styleclass="Code with box" translate="true">public class MyClass &#160;</text><br/><text styleclass="Code with box" translate="true">{ &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; [ConditionalAttribute(&quot;DEBUG&quot; || &quot;TRACE&quot;)] &#160; // XS0019 &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; public void TestMethod() {}</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; // OK &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; [ConditionalAttribute(&quot;DEBUG&quot;), ConditionalAttribute(&quot;TRACE&quot;)] &#160;</text><br/><text styleclass="Code with box" translate="true"> &#160; public void TestMethod2() {} &#160;</text><br/><text styleclass="Code with box" translate="true">} &#160;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> &#160;</text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
