<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)\XSharp.Default.targets" />

  <ItemGroup>
    <ProjectCapability Include="ReferencesFolder"/>

    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)Rules\ProjectItemsSchema.xaml;"/>
    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)Rules\general.browseobject.xaml;">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>
  </ItemGroup>
 
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildExtensionsPath)\XSharp\XSharp.targets</MSBuildAllProjects>
    <DefaultLanguageSourceExtension>.prg</DefaultLanguageSourceExtension>
    <Language>XSharp</Language>
	<GenerateFullPaths Condition="'$(BuildingInsideVisualStudio)'=='true'">true</GenerateFullPaths>
  </PropertyGroup>   

   <ItemGroup>
      <AvailableItemName Include="NativeResource" />
   </ItemGroup>

   <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.
    
        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata         


    For Vulcan.NET applications the transformation is:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly
    -->

   <PropertyGroup>
      <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
   </PropertyGroup>

      <Target
          Name="CreateManifestResourceNames"
          Condition="'@(EmbeddedResource)' != '' "
        >

         <ItemGroup>
            <_Temporary Remove="@(_Temporary)" />
         </ItemGroup>

         <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
         <CreateXSharpManifestResourceName
               ResourceFiles="@(EmbeddedResource)"
               RootNamespace="$(RootNamespace)"
               Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

         </CreateXSharpManifestResourceName>

         <!-- Create manifest names for all culture non-resx resources -->
         <CreateXSharpManifestResourceName
               ResourceFiles="@(EmbeddedResource)"
               RootNamespace="$(RootNamespace)"
               PrependCultureAsDirectory="false"
               Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

         </CreateXSharpManifestResourceName>

         <ItemGroup>
            <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
            <EmbeddedResource Include="@(_Temporary)" />
            <_Temporary Remove="@(_Temporary)" />
         </ItemGroup>

      </Target>

   <PropertyGroup Condition="'$(IntermediateOutputPath)'!=''">
      <!--
      If we've set IntermediateOutputPath in the project file, then we want to override the
      setting of BaseIntermediateOutputPath in Microsoft.Common.targets, which sets it to "obj\".
      That causes some stuff to be written to the obj directory even though IntermediateOutputPath
      has been explicitly set by the user.  Setting BaseIntermediateOutputPath here fixes that.
      -->

      <BaseIntermediateOutputPath>$(IntermediateOutputPath)</BaseIntermediateOutputPath>
   </PropertyGroup>

  <ItemGroup>
    <DocFileItem Include="$(IntermediateOutputPath)$(MSBuildProjectName).xml" Condition="'$(DocumentationFile)'!=''"/>
  </ItemGroup>


   <PropertyGroup>
      <CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
   </PropertyGroup>

   <Target Name="AfterResGen">

      <GenerateNativeResource
         Sources="@(NativeResource)"
         UseSourcePath="$(UseSourcePath)"
         IncludePaths="$(IncludePaths)"
         OutputPath="$(IntermediateOutputPath)"
         TargetFrameworkVersion="$(TargetFrameworkVersion)"
         EmitDebugInformation="$(EmitDebugInformation)"         
         Condition="'@(NativeResource)' != ''">
      </GenerateNativeResource>

      <CreateItem Include="$(IntermediateOutputPath)NativeResources.res" Condition="'@(NativeResource)' != ''">

         <Output TaskParameter="Include" ItemName="Win32Resource" />
         <!-- this causes the .res file to be deleted on a Clean -->
         <Output TaskParameter="Include" ItemName="FileWrites" />

      </CreateItem>

   </Target>

  <Target Name="GetTargetPath" DependsOnTargets="PrepareForBuild" Outputs="$(TargetPath)" />

  <UsingTask TaskName="XSharp.Build.Xsc"  AssemblyFile="$(XSharpPath)XSharp.Build.dll"/>

  <Target
          Name="CoreCompile"
          Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation); 
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs)"
          Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 @(_DebugSymbolsIntermediatePath);
                 @(CustomAdditionalCompileOutputs)"
          DependsOnTargets="$(CoreCompileDependsOn)"
    >
    <ItemGroup>
      <_NonMacroReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) != 'macro'" />
      <_MacroProjectReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) == 'macro'" />
    </ItemGroup>
    <Xsc
        AdditionalLibPaths="$(AdditionalLibPaths)"
        BaseAddress="$(BaseAddress)"
        CompilerPath="$(XSharpPath)"
        DebugType="$(DebugType)"
        DefineConstants="$(DefineConstants)"
        DisabledWarnings="$(DisabledWarnings)"
        DocumentationFile="@(DocFileItem)"
        EmitDebugInformation="$(EmitDebugInformation)"
        GenerateFullPaths="$(GenerateFullPaths)"
        IncludePaths="$(IncludePaths)"
        KeyFile="$(AssemblyOriginatorKeyFile)"
        NoConfig="true"
        NoLogo="$(NoLogo)"
        NoStandardDefs="$(NoStandardDefs)"
        NoStandardLib="$(NoStandardLib)"
        Optimize="$(Optimize)"
        OutputAssembly="@(IntermediateAssembly)"
        Platform="$(PlatformTarget)"
        PdbFile="$(PdbFile)"
        References="@(_NonMacroReferencePath)"
        Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
        ResponseFiles="$(CompilerResponseFile)"
        RootNamespace="$(RootNamespace)"      
        Sources="@(Compile)"
        TargetType="$(OutputType)"
        TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
        WarningLevel="$(WarningLevel)"
        OVF="$(OVF)"
        AZ="$(AZ)"
        CS="$(CS)"
        LB="$(LB)"
        INS="$(INS)"
        NS="$(NS)"
        PPO="$(PPO)"
        UnSafe="$(UnSafe)"
        VO1="$(VO1)"
        VO2="$(VO2)"
        VO3="$(VO3)"
        VO4="$(VO4)"
        VO5="$(VO5)"
        VO6="$(VO6)"
        VO7="$(VO7)"
        VO8="$(VO8)"
        VO9="$(VO9)"
        VO10="$(VO10)"
        VO11="$(VO11)"
        VO12="$(VO12)"
        VO13="$(VO13)"
        Win32Resource="@(Win32Resource)"
        CommandLineOption="$(CommandLineOption)"
    />
    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>
    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/>
  </Target>




</Project>