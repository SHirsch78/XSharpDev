<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Dialects</title>
  <body>
    <header>
      <para styleclass="Heading1">Dialects</para>
    </header>
    <para styleclass="Body Text">The X# compiler can run in different dialects. The table below shows the differences between these dialects.<br/>You can use the /dialect compiler option to select the dialect that you want to use. The Core dialect is default.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="40" colcount="5" style="width:auto; border-width:1px; border-spacing:0px; border-collapse:collapse; cell-border-width:1px; border-color:#000000; border-style:solid;">
      <thead style="vertical-align:top">
        <td style="width:50%;">
          <para styleclass="Normal"><text style="font-weight:bold;">Feature</text></para>
        </td>
        <td>
          <para styleclass="Normal" style="text-align:center; text-indent:1px; margin-right:0px; margin-left:38px; tabstops:none;"><text style="font-weight:bold;">Core </text></para>
        </td>
        <td style="width:12%;">
          <para styleclass="Normal" style="text-align:center;"><text style="font-weight:bold;">VO 1,2</text></para>
        </td>
        <td style="width:12%;">
          <para styleclass="Normal" style="text-align:center;"><text style="font-weight:bold;">Vulcan 1,2</text></para>
        </td>
        <td style="width:12%;">
          <para styleclass="Normal" style="text-align:center;"><text style="font-weight:bold;">Harbour 1,2</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">4 Letter </text><text style="font-weight:normal;">abbreviations of keywords</text></para>
          <para styleclass="Normal"><text style="font-weight:normal;">(FUNC, WHIL etc). </text></para>
        </td>
        <td>
          <para styleclass="Body Text">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes, 11</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes, 11</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">&amp;&amp;</text><text style="font-weight:normal;"> as single line comment character (alternative syntax for </text><text style="font-weight:bold;">//</text>)</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-size:12pt; font-weight:bold;">*</text><text style="font-weight:normal;"> at beginning of line as comment character</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">ALIAS</text> (-&gt;) operator</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">ARRAY</text> type, Including Array literals &amp; NULL_ARRAY, including missing elements</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">BREAK</text> statement</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">BEGIN SEQUENCE .. RECOVER .. END SEQUENCE</text></para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">CLIPPER</text> calling convention (requires USUAL support)</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">CODEBLOCK</text> type</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#000000;">Yes</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#000000;">Yes</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">DATE</text> type, including Date literals &amp; NULL_DATE</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">DEFINE </text><text style="font-weight:normal;">statement with optional type clause</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">FIELD</text> statement, and recognition of Field names in stead of locals or instance variables</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">FLOAT</text> type, including Float literals &amp; the <text style="font-weight:bold;">/vo14</text> compiler option</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">FUNCTION</text><text style="font-weight:normal;"> and </text><text style="font-weight:bold;">PROCEDURE </text><text style="font-weight:normal;"> inside class are compiled as Static Method of that class</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">GLOBAL</text><text style="font-weight:normal;"> statement</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">IIF</text>() expression and the <text style="font-weight:bold;">/vo10</text> compiler option</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 7</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 7</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 7</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 12</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Late binding</text></para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#000000;">Yes (with /lb+)</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#000000;">Yes (with /lb+)</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#000000;">Yes (with /lb+)</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">MEMVAR</text> statement</para>
        </td>
        <td>
          <para styleclass="Normal">NO</para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#ff0000;">Not yet</text></para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal"><text style="color:#ff0000;">Not yet</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">PSZ</text> Type, including NULL_PSZ and (pseudo) PSZ conversion functions (String2Psz(), Cast2Psz()</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">NULL_STRING</text></para>
        </td>
        <td>
          <para styleclass="Normal">Yes 9</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 9</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 9</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 9</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">SYMBOL</text> type, including Symbol literals &amp; NULL_SYMBOL</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">USUAL</text> type, including NIL literal</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Special features</text></para>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Untyped Literal Arrays</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 8</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 8</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 8</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Missing types allowed</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 3</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 3</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 3</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Missing arguments in function/method calls MyFunc(1,,2)</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold; font-style:italic;">Pseudo functions</text></para>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"> PCount(), _GetMParam(), _GetFParam()</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 4</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 4</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 4</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"> SLen()</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 5</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 5</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 5</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">_Chr()</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"> AltD()</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 6</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 6</para>
        </td>
        <td>
          <para styleclass="Normal">Yes 6</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"> PCall, PCallNative</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"> CCall, CCallNative</para>
        </td>
        <td>
          <para styleclass="Normal">No</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Other information</text></para>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Function class </text><text style="font-weight:normal;">name</text></para>
        </td>
        <td>
          <para styleclass="Normal">Functions<br/>X$&lt;ModuleName&gt;$Functions for static functions and globals</para>
        </td>
        <td colspan="2">
          <para styleclass="Normal">&lt;AssemblyName&gt;.Functions (DLLs) <br/>&lt;AssemblyName&gt;.Exe.Functions (EXEs)<br/>&lt;AssemblyName&gt;.Exe.$&lt;ModuleName&gt;$.Functions for static functions and globals</para>
        </td>
        <td>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">VOSTRUCT </text><text style="font-weight:normal;">and </text><text style="font-weight:bold;">AS/IS </text><text style="font-weight:normal;">syntax</text></para>
        </td>
        <td>
          <para styleclass="Normal">No 10</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">UNION </text><text style="font-weight:normal;">and </text><text style="font-weight:bold;">AS/IS </text><text style="font-weight:normal;">syntax</text></para>
        </td>
        <td>
          <para styleclass="Normal">No 10</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
        <td>
          <para styleclass="Normal">Yes</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Method Resolution</text></para>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
        <td>
        </td>
      </tr>
    </table></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <list id="8" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:&apos;Segoe UI Light&apos;; font-size:11pt; color:#000000;">
      <li styleclass="List">Requires VulcanRT.DLL</li>
      <li styleclass="List">Requires VulcanRTFuncs.DLL</li>
      <li styleclass="List">Missing types get translated to USUAL. With the new /vo15 compiler option you can tell the compiler that you do not want to allow missing types</li>
      <li styleclass="List">Only supported inside functions and methods with Clipper Calling convention</li>
      <li styleclass="List">The Vulcan runtime does not have a SLen() function. The compiler translates this to accessing the Length property of the string</li>
      <li styleclass="List">This gets translated to <br/><tab />IF System.Diagnostics.Debugger.Attached<br/><tab /><tab />System.Diagnostics.Debugger.Break()<br/><tab />ENDIF</li>
      <li styleclass="List">In the core dialect each of the expressions is casted to OBJECT. In the other dialects the expression is cast to USUAL when VulcanRTFuncs is included. Otherwise it is casted to OBJECT.</li>
      <li styleclass="List">Untyped literal arrays in the VO/Vulcan dialect are translated to the VO Array type:<br/>{&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;}<br/>Typed literal arrays are prefixed with &lt;Type&gt; like this:<br/>&lt;STRING&gt;{&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;}<br/>This becomes a literal string array</li>
      <li styleclass="List">With the /vo2 compiler option NULL_STRING is compiled to an empty string. Otherwise to a NULL.</li>
      <li styleclass="List">The VOSTRUCT and UNION can be replaced with a standard .NET structure. For Union you need to use the [StructLayout(LayoutKind.Explicit)] attribute on the structure and the [FieldOffSet()] attribute on each field to explicitly define the location of the fields. </li>
      <li styleclass="List">Only for VO compatible keywords, not for keywords introduced in Vulcan or XSharp.</li>
      <li styleclass="List">The true and false expressions for an IIF() are optional in Harbour</li>
    </list>
  </body>
</topic>
