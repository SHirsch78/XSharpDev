// 460. error XS9002: Parser: unexpected input '@' (used to be compiler crash)
// error XS1003: Syntax error, 'Entity' expected

//PP #xtranslate :Field1 => \[1 \]
//PP #xtranslate :Field2 => \[2 \]


//PP #translate ARRAY(<x>) => ArrayCreate(<x>)

//PP #include "C460.CH"
FUNCTION Start( ) AS VOID
LOCAL oFiller := FillerClass{} AS FillerClass
LOCAL aFiller := ArrayCreate(2) AS ARRAY
LOCAL GetList := {} AS ARRAY

aFiller[ 1 ]:= "Field1"
aFiller[ 2 ]:= "Field2"

DevPos( 1 , 2 ) ; DevOut( "Filler             " ); SetPos( Row() , Col()+1 ) ; AAdd( GetList, _GET_( aFiller[ 1 ] , "aFiller[ 1 ] " , "@!" , {||Fillers->(zdbCheckKey(aFiller:Filler,"FillerFL")) } , {||aFiller:Mode == "ADD" } ):display() ) ;atail(Getlist):reader := {|x| zGEReader(x) } ;atail(Getlist):cargo := ArrayCreate(4 ) ;atail(getlist):cargo[ 2] := "Enter the filler" 
SetPos(1976 , 2 ) ; Aadd(GetList, zGECheckNew({|x| iif(x == nil, aFiller[ 2 ] , aFiller[ 2 ] := x) }, "aFiller[ 2 ] " , "Active " ,.T. , ,.t. , .f. , , , {||ValidActive(aFiller) } , ) );atail(getlist):cargo[ 2] := "Is this an active filler?" 

xAssert(Row() == 1976)
xAssert(ALen(GetList) == 2)


ASize(GetList , 0)

// this one is ok:
DevPos( 1 , 2 ) ; DevOut( "Filler             " ); SetPos( Row() , Col()+1 ) ; AAdd( GetList, _GET_( oFiller:Filler , "oFiller:Filler " , "@!" , {||Fillers->(zdbCheckKey(aFiller:Filler,"FillerFL")) } , {||aFiller:Mode == "ADD" } ):display() ) ;atail(Getlist):reader := {|x| zGEReader(x) } ;atail(Getlist):cargo := ArrayCreate(4 ) ;atail(getlist):cargo[ 2] := "Enter the filler" 

xAssert(Row() == 1)

// error XS9002: Parser: unexpected input '@'
SetPos(1976 , 2 ) ; Aadd(GetList, zGECheckNew({|x| iif(x == nil, oFiller:Active , oFiller:Active := x) }, "oFiller:Active " , "Active " ,.T. , ,.t. , .f. , , , {||ValidActive(aFiller) } , ) );atail(getlist):cargo[ 2] := "Is this an active filler?" 

xAssert(Row() == 1976)

xAssert(ALen(GetList) == 2)
LOCAL oGet AS _GET_Object
oGet := GetList[1]
? oGet:cargo[2]
xAssert(oGet:cargo[2] == "Enter the filler")

xAssert(GetList[2]:cargo[2] == "Is this an active filler?")
RETURN

CLASS FillerClass
EXPORT Filler AS INT
EXPORT Active AS INT
EXPORT Mode := "" AS STRING
END CLASS

PROC xAssert(l AS LOGIC)
IF .not. l
THROW Exception{"Incorrect result in line " + System.Diagnostics.StackTrace{TRUE}:GetFrame(1):GetFileLineNumber():ToString()}
END IF
? "Assertion passed"


