<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS0034</title>
  <keywords>
    <keyword translate="true">XS0034</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS0034</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Operator &apos;operator&apos; is ambiguous on operands of type &apos;type1&apos; and &apos;type2&apos;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">An operator was used on two objects and the compiler found more than one conversion. Because conversions have to be unique, you either have to make a cast or to make one of the conversions explicit. For more information, see Conversion Operators.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following sample generates XS0034:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">// XS0034.prg  </text><br/><text styleclass="Code with box" translate="true">public class A  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">   // allows for the conversion of A object to int  </text><br/><text styleclass="Code with box" translate="true">   public static implicit operator int (A s)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return 0;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><br/><text styleclass="Code with box" translate="true">   public static implicit operator string (A i)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return null;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><text styleclass="Code with box" translate="true">}  </text><br/><br/><text styleclass="Code with box" translate="true">public class B  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">   public static implicit operator int (B s)  </text><br/><text styleclass="Code with box" translate="true">   // one way to resolve this XS0034 is to make one conversion explicit  </text><br/><text styleclass="Code with box" translate="true">   // public static explicit operator int (B s)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return 0;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><br/><text styleclass="Code with box" translate="true">   public static implicit operator string (B i)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return null;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><br/><text styleclass="Code with box" translate="true">   public static implicit operator B (string i)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return null;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><br/><text styleclass="Code with box" translate="true">   public static implicit operator B (int i)  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      return null;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><text styleclass="Code with box" translate="true">}  </text><br/><br/><text styleclass="Code with box" translate="true">public class C  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">   public static void Main ()  </text><br/><text styleclass="Code with box" translate="true">   {  </text><br/><text styleclass="Code with box" translate="true">      A a = new A();  </text><br/><text styleclass="Code with box" translate="true">      B b = new B();  </text><br/><text styleclass="Code with box" translate="true">      b = b + a;   // XS0034  </text><br/><text styleclass="Code with box" translate="true">      // another way to resolve this XS0034 is to make a cast  </text><br/><text styleclass="Code with box" translate="true">      // b = b + (int)a;  </text><br/><text styleclass="Code with box" translate="true">   }  </text><br/><text styleclass="Code with box" translate="true">}  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In X# 1.1 a compiler bug made it possible to define a class that has implicit user-defined conversions to both int and bool, and to use a bitwise AND operator (&amp;) on objects of that type. In X# 2.0, this bug was fixed to bring the compiler into compliance with the X# specification, and therefore the following code will now cause XS0034:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">namespace XS0034  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    class TestClass2  </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        public void Test()  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            TestClass o1 = new TestClass();  </text><br/><text styleclass="Code with box" translate="true">            TestClass o2 = new TestClass();  </text><br/><text styleclass="Code with box" translate="true">            TestClass o3 = o1 &amp; o2; //XS0034  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><br/><text styleclass="Code with box" translate="true">    class TestClass  </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        public static implicit operator int(TestClass o)  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            return 1;  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><br/><text styleclass="Code with box" translate="true">        public static implicit operator TestClass(int v)  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            return new TestClass();  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><br/><text styleclass="Code with box" translate="true">        public static implicit operator bool(TestClass o)  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            return true;  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><br/><text styleclass="Code with box" translate="true">}  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
