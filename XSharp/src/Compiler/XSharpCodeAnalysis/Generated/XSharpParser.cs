//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\XSharp\Dev\XSharp\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, UNTIL=111, VALUE=112, VIRTUAL=113, VOSTRUCT=114, ADD=115, ARGLIST=116, 
		ASCENDING=117, ASYNC=118, ASTYPE=119, AWAIT=120, BY=121, CHECKED=122, 
		DESCENDING=123, EQUALS=124, EXTERN=125, FIXED=126, FROM=127, GROUP=128, 
		INIT=129, INTO=130, JOIN=131, LET=132, NOP=133, OF=134, ON=135, ORDERBY=136, 
		OVERRIDE=137, PARAMS=138, REMOVE=139, SELECT=140, SWITCH=141, UNCHECKED=142, 
		UNSAFE=143, VAR=144, VOLATILE=145, WHEN=146, WHERE=147, YIELD=148, WITH=149, 
		LAST_POSITIONAL_KEYWORD=150, FIRST_TYPE=151, ARRAY=152, BYTE=153, CODEBLOCK=154, 
		DATE=155, DWORD=156, FLOAT=157, INT=158, LOGIC=159, LONGINT=160, OBJECT=161, 
		PSZ=162, PTR=163, REAL4=164, REAL8=165, REF=166, SHORTINT=167, STRING=168, 
		SYMBOL=169, USUAL=170, VOID=171, WORD=172, CHAR=173, INT64=174, UINT64=175, 
		DYNAMIC=176, DECIMAL=177, DATETIME=178, CURRENCY=179, BINARY=180, NINT=181, 
		NUINT=182, LAST_TYPE=183, UDC_KEYWORD=184, SCRIPT_REF=185, SCRIPT_LOAD=186, 
		ASSIGNMENT=187, DEFERRED=188, ENDCLASS=189, EXPORTED=190, FREEZE=191, 
		FINAL=192, INLINE=193, INTRODUCE=194, NOSAVE=195, READONLY=196, SHARING=197, 
		SHARED=198, SYNC=199, ENDDEFINE=200, LPARAMETERS=201, OLEPUBLIC=202, EXCLUDE=203, 
		THISACCESS=204, HELPSTRING=205, DIMENSION=206, NOINIT=207, EACH=208, THEN=209, 
		FOX_M=210, TEXT=211, ENDTEXT=212, ADDITIVE=213, FLAGS=214, PRETEXT=215, 
		NOSHOW=216, TEXTMERGE=217, LAST_KEYWORD=218, FIRST_NULL=219, NIL=220, 
		NULL=221, NULL_ARRAY=222, NULL_CODEBLOCK=223, NULL_DATE=224, NULL_OBJECT=225, 
		NULL_PSZ=226, NULL_PTR=227, NULL_STRING=228, NULL_SYMBOL=229, LAST_NULL=230, 
		FIRST_OPERATOR=231, LT=232, LTE=233, GT=234, GTE=235, EQ=236, EEQ=237, 
		SUBSTR=238, NEQ=239, NEQ2=240, INC=241, DEC=242, PLUS=243, MINUS=244, 
		DIV=245, MOD=246, EXP=247, LSHIFT=248, RSHIFT=249, TILDE=250, MULT=251, 
		QQMARK=252, QMARK=253, AND=254, OR=255, NOT=256, VO_NOT=257, VO_AND=258, 
		VO_OR=259, VO_XOR=260, ASSIGN_OP=261, ASSIGN_ADD=262, ASSIGN_SUB=263, 
		ASSIGN_EXP=264, ASSIGN_MUL=265, ASSIGN_DIV=266, ASSIGN_MOD=267, ASSIGN_BITAND=268, 
		ASSIGN_BITOR=269, ASSIGN_LSHIFT=270, ASSIGN_RSHIFT=271, ASSIGN_XOR=272, 
		ASSIGN_QQMARK=273, LOGIC_AND=274, LOGIC_OR=275, LOGIC_NOT=276, LOGIC_XOR=277, 
		FOX_AND=278, FOX_OR=279, FOX_NOT=280, FOX_XOR=281, LPAREN=282, RPAREN=283, 
		LCURLY=284, RCURLY=285, LBRKT=286, RBRKT=287, COLON=288, COMMA=289, PIPE=290, 
		AMP=291, ADDROF=292, ALIAS=293, DOT=294, COLONCOLON=295, BACKSLASH=296, 
		ELLIPSIS=297, BACKBACKSLASH=298, LAST_OPERATOR=299, FIRST_CONSTANT=300, 
		FALSE_CONST=301, TRUE_CONST=302, HEX_CONST=303, BIN_CONST=304, INT_CONST=305, 
		DATE_CONST=306, DATETIME_CONST=307, REAL_CONST=308, INVALID_NUMBER=309, 
		SYMBOL_CONST=310, CHAR_CONST=311, STRING_CONST=312, ESCAPED_STRING_CONST=313, 
		INTERPOLATED_STRING_CONST=314, INCOMPLETE_STRING_CONST=315, TEXT_STRING_CONST=316, 
		BRACKETED_STRING_CONST=317, BINARY_CONST=318, LAST_CONSTANT=319, PP_FIRST=320, 
		PP_COMMAND=321, PP_DEFINE=322, PP_ELSE=323, PP_ENDIF=324, PP_ENDREGION=325, 
		PP_ERROR=326, PP_IFDEF=327, PP_IFNDEF=328, PP_INCLUDE=329, PP_LINE=330, 
		PP_REGION=331, PP_TRANSLATE=332, PP_UNDEF=333, PP_WARNING=334, PP_LAST=335, 
		MACRO=336, UDCSEP=337, ID=338, KWID=339, PRAGMA=340, DOC_COMMENT=341, 
		SL_COMMENT=342, ML_COMMENT=343, LINE_CONT=344, LINE_CONT_OLD=345, SEMI=346, 
		WS=347, NL=348, EOS=349, UNRECOGNIZED=350, LAST=351;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_foxsource = 4, RULE_entity = 5, RULE_eos = 6, RULE_pragma = 7, RULE_funcproc = 8, 
		RULE_funcproctype = 9, RULE_signature = 10, RULE_vodummyclauses = 11, 
		RULE_callingconvention = 12, RULE_vodll = 13, RULE_dllcallconv = 14, RULE_foxdll = 15, 
		RULE_foxdllparam = 16, RULE_vodllmethod = 17, RULE_parameterList = 18, 
		RULE_parameter = 19, RULE_parameterDeclMods = 20, RULE_statementBlock = 21, 
		RULE_funcprocModifiers = 22, RULE_using_ = 23, RULE_voglobal = 24, RULE_method = 25, 
		RULE_methodtype = 26, RULE_vodefine = 27, RULE_vostruct = 28, RULE_vostructmember = 29, 
		RULE_vounion = 30, RULE_votypeModifiers = 31, RULE_namespace_ = 32, RULE_interface_ = 33, 
		RULE_class_ = 34, RULE_classModifiers = 35, RULE_typeparameters = 36, 
		RULE_typeparameter = 37, RULE_typeparameterconstraintsclause = 38, RULE_typeparameterconstraint = 39, 
		RULE_structure_ = 40, RULE_delegate_ = 41, RULE_enum_ = 42, RULE_enummember = 43, 
		RULE_event_ = 44, RULE_eventLineAccessor = 45, RULE_eventAccessor = 46, 
		RULE_classvars = 47, RULE_classvarModifiers = 48, RULE_classvar = 49, 
		RULE_arraysub = 50, RULE_property = 51, RULE_propertyParameterList = 52, 
		RULE_propertyAutoAccessor = 53, RULE_propertyLineAccessor = 54, RULE_accessorModifiers = 55, 
		RULE_expressionList = 56, RULE_propertyAccessor = 57, RULE_classmember = 58, 
		RULE_constructor = 59, RULE_constructorchain = 60, RULE_constructorModifiers = 61, 
		RULE_vodeclare = 62, RULE_destructor = 63, RULE_destructorModifiers = 64, 
		RULE_overloadedOps = 65, RULE_conversionOps = 66, RULE_operator_ = 67, 
		RULE_operatorModifiers = 68, RULE_memberModifiers = 69, RULE_attributes = 70, 
		RULE_attributeBlock = 71, RULE_attributeTarget = 72, RULE_attribute = 73, 
		RULE_attributeParam = 74, RULE_globalAttributes = 75, RULE_globalAttributeTarget = 76, 
		RULE_filewidememvar = 77, RULE_statement = 78, RULE_ifElseBlock = 79, 
		RULE_caseBlock = 80, RULE_switchBlock = 81, RULE_catchBlock = 82, RULE_recoverBlock = 83, 
		RULE_variableDeclaration = 84, RULE_variableDeclarator = 85, RULE_localdecl = 86, 
		RULE_localvar = 87, RULE_impliedvar = 88, RULE_fielddecl = 89, RULE_xbasedecl = 90, 
		RULE_xbasevar = 91, RULE_foxdecl = 92, RULE_dimensionVar = 93, RULE_xbasedecltype = 94, 
		RULE_foxbasevar = 95, RULE_localfuncproc = 96, RULE_localfuncprocModifiers = 97, 
		RULE_assignoperator = 98, RULE_expression = 99, RULE_primary = 100, RULE_boundExpression = 101, 
		RULE_aliasExpression = 102, RULE_objectOrCollectioninitializer = 103, 
		RULE_objectinitializer = 104, RULE_memberinitializer = 105, RULE_initializervalue = 106, 
		RULE_complexInitExpr = 107, RULE_initializerMember = 108, RULE_collectioninitializer = 109, 
		RULE_bracketedArgumentList = 110, RULE_unnamedArgument = 111, RULE_argumentList = 112, 
		RULE_namedArgument = 113, RULE_iif = 114, RULE_nameDot = 115, RULE_name = 116, 
		RULE_aliasedName = 117, RULE_simpleName = 118, RULE_genericArgumentList = 119, 
		RULE_identifierName = 120, RULE_varidentifier = 121, RULE_varidentifierName = 122, 
		RULE_datatype = 123, RULE_arrayRank = 124, RULE_typeName = 125, RULE_usualTypeName = 126, 
		RULE_literalArray = 127, RULE_arrayElement = 128, RULE_anonType = 129, 
		RULE_anonMember = 130, RULE_codeblock = 131, RULE_codeblockCode = 132, 
		RULE_lambdaParameterList = 133, RULE_codeblockParamList = 134, RULE_codeblockExprList = 135, 
		RULE_anonymousMethodExpression = 136, RULE_explicitAnonymousFunctionParamList = 137, 
		RULE_explicitAnonymousFunctionParameter = 138, RULE_linqQuery = 139, RULE_fromClause = 140, 
		RULE_queryBody = 141, RULE_queryBodyClause = 142, RULE_joinIntoClause = 143, 
		RULE_ordering = 144, RULE_selectOrGroupclause = 145, RULE_queryContinuation = 146, 
		RULE_identifier = 147, RULE_identifierString = 148, RULE_xbaseFunc = 149, 
		RULE_xbaseType = 150, RULE_nativeType = 151, RULE_literalValue = 152, 
		RULE_keywordvo = 153, RULE_keywordxs = 154, RULE_keywordxpp = 155, RULE_xppclass = 156, 
		RULE_xppclassModifiers = 157, RULE_xppclassMember = 158, RULE_xppmethodvis = 159, 
		RULE_xppvisibility = 160, RULE_xppdeclareMethod = 161, RULE_xppisin = 162, 
		RULE_xppdeclareModifiers = 163, RULE_xppclassvars = 164, RULE_xppvarassignment = 165, 
		RULE_xppproperty = 166, RULE_xppmethod = 167, RULE_xppinlineMethod = 168, 
		RULE_xppmemberModifiers = 169, RULE_keywordfox = 170, RULE_foxclass = 171, 
		RULE_foxclassmember = 172, RULE_foxmethod = 173, RULE_foxclassvars = 174, 
		RULE_foxfield = 175, RULE_foxfieldinitializer = 176, RULE_foximplementsclause = 177, 
		RULE_foxaddobjectclause = 178, RULE_foxpemcomattrib = 179;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "foxsource", "entity", 
		"eos", "pragma", "funcproc", "funcproctype", "signature", "vodummyclauses", 
		"callingconvention", "vodll", "dllcallconv", "foxdll", "foxdllparam", 
		"vodllmethod", "parameterList", "parameter", "parameterDeclMods", "statementBlock", 
		"funcprocModifiers", "using_", "voglobal", "method", "methodtype", "vodefine", 
		"vostruct", "vostructmember", "vounion", "votypeModifiers", "namespace_", 
		"interface_", "class_", "classModifiers", "typeparameters", "typeparameter", 
		"typeparameterconstraintsclause", "typeparameterconstraint", "structure_", 
		"delegate_", "enum_", "enummember", "event_", "eventLineAccessor", "eventAccessor", 
		"classvars", "classvarModifiers", "classvar", "arraysub", "property", 
		"propertyParameterList", "propertyAutoAccessor", "propertyLineAccessor", 
		"accessorModifiers", "expressionList", "propertyAccessor", "classmember", 
		"constructor", "constructorchain", "constructorModifiers", "vodeclare", 
		"destructor", "destructorModifiers", "overloadedOps", "conversionOps", 
		"operator_", "operatorModifiers", "memberModifiers", "attributes", "attributeBlock", 
		"attributeTarget", "attribute", "attributeParam", "globalAttributes", 
		"globalAttributeTarget", "filewidememvar", "statement", "ifElseBlock", 
		"caseBlock", "switchBlock", "catchBlock", "recoverBlock", "variableDeclaration", 
		"variableDeclarator", "localdecl", "localvar", "impliedvar", "fielddecl", 
		"xbasedecl", "xbasevar", "foxdecl", "dimensionVar", "xbasedecltype", "foxbasevar", 
		"localfuncproc", "localfuncprocModifiers", "assignoperator", "expression", 
		"primary", "boundExpression", "aliasExpression", "objectOrCollectioninitializer", 
		"objectinitializer", "memberinitializer", "initializervalue", "complexInitExpr", 
		"initializerMember", "collectioninitializer", "bracketedArgumentList", 
		"unnamedArgument", "argumentList", "namedArgument", "iif", "nameDot", 
		"name", "aliasedName", "simpleName", "genericArgumentList", "identifierName", 
		"varidentifier", "varidentifierName", "datatype", "arrayRank", "typeName", 
		"usualTypeName", "literalArray", "arrayElement", "anonType", "anonMember", 
		"codeblock", "codeblockCode", "lambdaParameterList", "codeblockParamList", 
		"codeblockExprList", "anonymousMethodExpression", "explicitAnonymousFunctionParamList", 
		"explicitAnonymousFunctionParameter", "linqQuery", "fromClause", "queryBody", 
		"queryBodyClause", "joinIntoClause", "ordering", "selectOrGroupclause", 
		"queryContinuation", "identifier", "identifierString", "xbaseFunc", "xbaseType", 
		"nativeType", "literalValue", "keywordvo", "keywordxs", "keywordxpp", 
		"xppclass", "xppclassModifiers", "xppclassMember", "xppmethodvis", "xppvisibility", 
		"xppdeclareMethod", "xppisin", "xppdeclareModifiers", "xppclassvars", 
		"xppvarassignment", "xppproperty", "xppmethod", "xppinlineMethod", "xppmemberModifiers", 
		"keywordfox", "foxclass", "foxclassmember", "foxmethod", "foxclassvars", 
		"foxfield", "foxfieldinitializer", "foximplementsclause", "foxaddobjectclause", 
		"foxpemcomattrib"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", "ADD", 
		"ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", "DESCENDING", 
		"EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", "JOIN", 
		"LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", "SELECT", 
		"SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", "WHEN", "WHERE", "YIELD", 
		"WITH", "LAST_POSITIONAL_KEYWORD", "FIRST_TYPE", "ARRAY", "BYTE", "CODEBLOCK", 
		"DATE", "DWORD", "FLOAT", "INT", "LOGIC", "LONGINT", "OBJECT", "PSZ", 
		"PTR", "REAL4", "REAL8", "REF", "SHORTINT", "STRING", "SYMBOL", "USUAL", 
		"VOID", "WORD", "CHAR", "INT64", "UINT64", "DYNAMIC", "DECIMAL", "DATETIME", 
		"CURRENCY", "BINARY", "NINT", "NUINT", "LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", 
		"SCRIPT_LOAD", "ASSIGNMENT", "DEFERRED", "ENDCLASS", "EXPORTED", "FREEZE", 
		"FINAL", "INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", 
		"SYNC", "ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", "EXCLUDE", "THISACCESS", 
		"HELPSTRING", "DIMENSION", "NOINIT", "EACH", "THEN", "FOX_M", "TEXT", 
		"ENDTEXT", "ADDITIVE", "FLAGS", "PRETEXT", "NOSHOW", "TEXTMERGE", "LAST_KEYWORD", 
		"FIRST_NULL", "NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", "NULL_DATE", 
		"NULL_OBJECT", "NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", "LAST_NULL", 
		"FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", 
		"NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", 
		"RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "VO_NOT", 
		"VO_AND", "VO_OR", "VO_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
		"ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", 
		"ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", 
		"FOX_NOT", "FOX_XOR", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRKT", 
		"RBRKT", "COLON", "COMMA", "PIPE", "AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", 
		"BACKSLASH", "ELLIPSIS", "BACKBACKSLASH", "LAST_OPERATOR", "FIRST_CONSTANT", 
		"FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", 
		"DATETIME_CONST", "REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", "PP_REGION", 
		"PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_LAST", "MACRO", "UDCSEP", 
		"ID", "KWID", "PRAGMA", "DOC_COMMENT", "SL_COMMENT", "ML_COMMENT", "LINE_CONT", 
		"LINE_CONT_OLD", "SEMI", "WS", "NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 366;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 360; Match(SCRIPT_LOAD);
						State = 361; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 362; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 363; Match(SCRIPT_REF);
						State = 364; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 365; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 370;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 374;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 371; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 376;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 377; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 382;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 384; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 385; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 388; Match(EOS);
			State = 389; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 391; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 397; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxsourceContext : XSharpParserRuleContext {
		public FilewidememvarContext _filewidememvar;
		public IList<FilewidememvarContext> _MemVars = new List<FilewidememvarContext>();
		public StatementBlockContext StmtBlk;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FilewidememvarContext[] filewidememvar() {
			return GetRuleContexts<FilewidememvarContext>();
		}
		public FilewidememvarContext filewidememvar(int i) {
			return GetRuleContext<FilewidememvarContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public FoxsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxsource(this);
		}
	}

	[RuleVersion(0)]
	public FoxsourceContext foxsource() {
		FoxsourceContext _localctx = new FoxsourceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_foxsource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 399; _localctx._filewidememvar = filewidememvar();
					_localctx._MemVars.Add(_localctx._filewidememvar);
					}
					} 
				}
				State = 404;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 405; _localctx.StmtBlk = statementBlock();
			State = 409;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 406; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 411;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 412; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public FoxclassContext foxclass() {
			return GetRuleContext<FoxclassContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public FuncprocContext funcproc() {
			return GetRuleContext<FuncprocContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FilewidememvarContext filewidememvar() {
			return GetRuleContext<FilewidememvarContext>(0);
		}
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public FoxdllContext foxdll() {
			return GetRuleContext<FoxdllContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_entity);
		try {
			State = 441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416; foxclass();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 417; xppclass();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 418; structure_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 419; interface_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 420; delegate_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 421; event_();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 422; enum_();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 423; globalAttributes();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 424; vostruct();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 425; vounion();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 426; funcproc();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 427; using_();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 428; vodefine();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 429; voglobal();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 430; vodll();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 431;
				if (!(!IsXPP)) throw new FailedPredicateException(this, "!IsXPP");
				State = 432; method();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 433;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 434; xppmethod();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 435; constructor();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 436; destructor();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 437; filewidememvar();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 438; pragma();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 439; foxdll();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 440; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 443; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 446;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : XSharpParserRuleContext {
		public IToken P;
		public IToken _EOS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _tset345;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode PRAGMA() { return GetToken(XSharpParser.PRAGMA, 0); }
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_pragma);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; _localctx.P = Match(PRAGMA);
			State = 452;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 449;
					_localctx._tset345 = _input.Lt(1);
					_la = _input.La(1);
					if ( _la <= 0 || (_la==EOS) ) {
						_localctx._tset345 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset345);
					}
					} 
				}
				State = 454;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			State = 455; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken InitExit;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public FuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproc(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocContext funcproc() {
		FuncprocContext _localctx = new FuncprocContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_funcproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 457; _localctx.Attributes = attributes();
				}
			}

			State = 461;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 460; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 463; _localctx.T = funcproctype();
			State = 464; _localctx.Sig = signature();
			State = 466;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
				{
				State = 465;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 468; vodummyclauses();
			State = 469; _localctx.end = eos();
			State = 470; _localctx.StmtBlk = statementBlock();
			State = 475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 471; Match(END);
				State = 472; _localctx.T2 = funcproctype();
				State = 473; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncproctypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public FuncproctypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproctype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproctype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproctype(this);
		}
	}

	[RuleVersion(0)]
	public FuncproctypeContext funcproctype() {
		FuncproctypeContext _localctx = new FuncproctypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_funcproctype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public ExpressionContext ExpressionBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; _localctx.Id = identifier();
			State = 481;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 480; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 483; _localctx.ParamList = parameterList();
				}
			}

			State = 488;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 486; Match(AS);
				State = 487; _localctx.Type = datatype();
				}
			}

			State = 493;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 490; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 495;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 497;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 496; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 501;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 499; Match(UDCSEP);
				State = 500; _localctx.ExpressionBody = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodummyclausesContext : XSharpParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public VodummyclausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodummyclauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodummyclauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodummyclauses(this);
		}
	}

	[RuleVersion(0)]
	public VodummyclausesContext vodummyclauses() {
		VodummyclausesContext _localctx = new VodummyclausesContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_vodummyclauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 503; Match(EXPORT);
				State = 504; Match(LOCAL);
				}
			}

			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 507; Match(DLLEXPORT);
				State = 508; Match(STRING_CONST);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public FuncproctypeContext T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public FuncproctypeContext funcproctype() {
			return GetRuleContext<FuncproctypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 513; _localctx.Attributes = attributes();
				}
			}

			State = 517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 516; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 519; _localctx.D = Match(DLL);
			State = 520; _localctx.T = funcproctype();
			State = 521; _localctx.Id = identifier();
			State = 522; _localctx.ParamList = parameterList();
			State = 525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 523; Match(AS);
				State = 524; _localctx.Type = datatype();
				}
			}

			State = 528;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 527; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 530; Match(COLON);
			State = 531; _localctx.Dll = identifierString();
			State = 534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 532; Match(DOT);
				State = 533; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 549;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 536; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 537; Match(DOT);
				State = 538; _localctx.Entrypoint = identifierString();
				State = 540;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 539; _localctx.Address = Match(ADDROF);
					}
				}

				State = 543;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 542; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 547;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 545; Match(NEQ2);
					State = 546; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 552;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTO || _la==ID) {
				{
				State = 551;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==ID) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 554; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public DatatypeContext Type;
		public IdentifierContext Id;
		public IdentifierContext Dll;
		public IdentifierStringContext Extension;
		public IdentifierContext Alias;
		public FoxdllparamContext _foxdllparam;
		public IList<FoxdllparamContext> _Params = new List<FoxdllparamContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierStringContext identifierString() {
			return GetRuleContext<IdentifierStringContext>(0);
		}
		public FoxdllparamContext[] foxdllparam() {
			return GetRuleContexts<FoxdllparamContext>();
		}
		public FoxdllparamContext foxdllparam(int i) {
			return GetRuleContext<FoxdllparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdll(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllContext foxdll() {
		FoxdllContext _localctx = new FoxdllContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_foxdll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 558; _localctx.Attributes = attributes();
				}
			}

			State = 562;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 561; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 564; Match(DECLARE);
			State = 566;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 565; _localctx.Type = datatype();
				}
				break;
			}
			State = 568; _localctx.Id = identifier();
			State = 569; Match(IN);
			State = 570; _localctx.Dll = identifier();
			State = 573;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 571; Match(DOT);
				State = 572; _localctx.Extension = identifierString();
				}
			}

			State = 577;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 575; Match(AS);
				State = 576; _localctx.Alias = identifier();
				}
			}

			State = 587;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)))) != 0)) {
				{
				State = 579; _localctx._foxdllparam = foxdllparam();
				_localctx._Params.Add(_localctx._foxdllparam);
				State = 584;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 580; Match(COMMA);
					State = 581; _localctx._foxdllparam = foxdllparam();
					_localctx._Params.Add(_localctx._foxdllparam);
					}
					}
					State = 586;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 589; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllparamContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DatatypeContext Type;
		public IToken Address;
		public IdentifierContext Name;
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxdllparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdllparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdllparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdllparam(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllparamContext foxdllparam() {
		FoxdllparamContext _localctx = new FoxdllparamContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_foxdllparam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 591; _localctx.Attributes = attributes();
				}
			}

			State = 594; _localctx.Type = datatype();
			State = 596;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ADDROF) {
				{
				State = 595; _localctx.Address = Match(ADDROF);
				}
			}

			State = 599;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
				{
				State = 598; _localctx.Name = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllmethodContext : XSharpParserRuleContext {
		public IToken D;
		public IToken T;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public VodllmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodllmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public VodllmethodContext vodllmethod() {
		VodllmethodContext _localctx = new VodllmethodContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_vodllmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601; _localctx.D = Match(DLL);
			State = 602;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0) || _la==CONSTRUCTOR || _la==DESTRUCTOR) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 604;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)) | (1L << (EXPORTED - 128)) | (1L << (FREEZE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (EACH - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (TEXT - 192)) | (1L << (ENDTEXT - 192)) | (1L << (ADDITIVE - 192)) | (1L << (FLAGS - 192)) | (1L << (PRETEXT - 192)) | (1L << (NOSHOW - 192)) | (1L << (TEXTMERGE - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)) | (1L << (QQMARK - 192)) | (1L << (QMARK - 192)) | (1L << (AND - 192)) | (1L << (OR - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOT - 256)) | (1L << (VO_NOT - 256)) | (1L << (VO_AND - 256)) | (1L << (VO_OR - 256)) | (1L << (VO_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)) | (1L << (INCOMPLETE_STRING_CONST - 256)) | (1L << (TEXT_STRING_CONST - 256)) | (1L << (BRACKETED_STRING_CONST - 256)) | (1L << (BINARY_CONST - 256)) | (1L << (LAST_CONSTANT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (KWID - 320)) | (1L << (PRAGMA - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0)) {
				{
				State = 603;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 606; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(LPAREN);
			State = 617;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (ELLIPSIS - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)))) != 0)) {
				{
				State = 609; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 614;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 610; Match(COMMA);
					State = 611; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 616;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 619; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parameter);
		int _la;
		try {
			State = 639;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FIELD:
			case GLOBAL:
			case INHERIT:
			case INIT1:
			case INIT2:
			case INIT3:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case SELF:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INIT:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case YIELD:
			case REF:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case CURRENCY:
			case BINARY:
			case NINT:
			case NUINT:
			case ASSIGNMENT:
			case EXPORTED:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
			case OLEPUBLIC:
			case EXCLUDE:
			case THISACCESS:
			case HELPSTRING:
			case NOINIT:
			case EACH:
			case THEN:
			case FOX_M:
			case FOX_AND:
			case FOX_OR:
			case FOX_NOT:
			case FOX_XOR:
			case LBRKT:
			case BRACKETED_STRING_CONST:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 621; _localctx.Attributes = attributes();
					}
				}

				State = 625;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SELF) {
					{
					State = 624; _localctx.Self = Match(SELF);
					}
				}

				State = 627; _localctx.Id = identifier();
				State = 631;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 628; _localctx.Op = assignoperator();
					State = 629; _localctx.Default = expression(0);
					}
				}

				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 633; _localctx.Modifiers = parameterDeclMods();
					State = 634; _localctx.Type = datatype();
					}
				}

				}
				break;
			case ELLIPSIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _IN;
		public IToken _tset972;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_localctx._tset972 = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset972 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset972);
			State = 643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 642; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 645; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 650;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _ASYNC;
		public IToken _tset1024;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 651;
				_localctx._tset1024 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1024 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1024);
				}
				}
				State = 654;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Static;
		public IdentifierNameContext Alias;
		public AssignoperatorContext Op;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 46, RULE_using_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(USING);
			State = 658;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 657; _localctx.Static = Match(STATIC);
				}
			}

			State = 663;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 660; _localctx.Alias = identifierName();
				State = 661; _localctx.Op = assignoperator();
				}
				break;
			}
			State = 665; _localctx.Name = name(0);
			State = 666; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Global;
		public IToken Const;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public IToken end;
		public IToken Static;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_voglobal);
		int _la;
		try {
			State = 705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 668; _localctx.Attributes = attributes();
					}
				}

				State = 672;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 671; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 674; _localctx.Global = Match(GLOBAL);
				State = 676;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 675; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 678; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 683;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 679; Match(COMMA);
					State = 680; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 685;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 686; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 688; _localctx.Attributes = attributes();
					}
				}

				State = 691; _localctx.Static = Match(STATIC);
				State = 693;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 692; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 695; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 700;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 696; Match(COMMA);
					State = 697; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 702;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 703; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public SignatureContext Sig;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public MethodtypeContext[] methodtype() {
			return GetRuleContexts<MethodtypeContext>();
		}
		public MethodtypeContext methodtype(int i) {
			return GetRuleContext<MethodtypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 707; _localctx.Attributes = attributes();
				}
			}

			State = 711;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 710; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 713; _localctx.T = methodtype();
			State = 715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 714; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 717; _localctx.Sig = signature();
			State = 720;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 718; Match(CLASS);
				State = 719; _localctx.ClassId = identifier();
				}
			}

			State = 722; vodummyclauses();
			State = 723; _localctx.end = eos();
			State = 724; _localctx.StmtBlk = statementBlock();
			State = 729;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 725; Match(END);
				State = 726; _localctx.T2 = methodtype();
				State = 727; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public TypeNameContext DataType;
		public IToken end;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 733; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 736; _localctx.D = Match(DEFINE);
			State = 737; _localctx.Id = identifier();
			State = 738; _localctx.Op = assignoperator();
			State = 739; _localctx.Expr = expression(0);
			State = 742;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 740; Match(AS);
				State = 741; _localctx.DataType = typeName();
				}
			}

			State = 744; _localctx.end = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken V;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public ITerminalNode[] VOSTRUCT() { return GetTokens(XSharpParser.VOSTRUCT); }
		public ITerminalNode VOSTRUCT(int i) {
			return GetToken(XSharpParser.VOSTRUCT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 746; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 749; _localctx.V = Match(VOSTRUCT);
			State = 751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 750; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 753; _localctx.Id = identifier();
			State = 756;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 754; Match(ALIGN);
				State = 755; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 758; _localctx.e = eos();
			State = 760;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 759; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 762;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,74,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 767;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 764; Match(END);
				State = 765; Match(VOSTRUCT);
				State = 766; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_vostructmember);
		int _la;
		try {
			State = 789;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769; Match(MEMBER);
				State = 770; _localctx.Dim = Match(DIM);
				State = 771; _localctx.Id = identifier();
				State = 772; Match(LBRKT);
				State = 773; _localctx.ArraySub = arraysub();
				State = 774; Match(RBRKT);
				State = 777;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 775;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 776; _localctx.DataType = datatype();
					}
				}

				State = 779; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 781; Match(MEMBER);
				State = 782; _localctx.Id = identifier();
				State = 785;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 783;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 784; _localctx.DataType = datatype();
					}
				}

				State = 787; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken U;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public ITerminalNode[] UNION() { return GetTokens(XSharpParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(XSharpParser.UNION, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 791; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 794; _localctx.U = Match(UNION);
			State = 796;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 795; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 798; _localctx.Id = identifier();
			State = 799; _localctx.e = eos();
			State = 801;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 800; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 803;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 805; Match(END);
				State = 806; Match(UNION);
				State = 807; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1494;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 810;
				_localctx._tset1494 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1494 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1494);
				}
				}
				State = 813;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_namespace_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; Match(BEGIN);
			State = 816; Match(NAMESPACE);
			State = 817; _localctx.Name = name(0);
			State = 818; _localctx.e = eos();
			State = 822;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,84,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 819; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 824;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,84,_ctx);
			}
			State = 825; Match(END);
			State = 826; Match(NAMESPACE);
			State = 827; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken I;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_interface_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 829; _localctx.Attributes = attributes();
				}
			}

			State = 833;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 832; _localctx.Modifiers = classModifiers();
				}
			}

			State = 835; _localctx.I = Match(INTERFACE);
			State = 837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 836; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 839; _localctx.Id = identifier();
			State = 841;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 840; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 845;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 843;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 844; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 851;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 847; Match(COMMA);
				State = 848; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 853;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 854; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 859;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 860; _localctx.e = eos();
			State = 864;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << DECLARE) | (1L << DLL) | (1L << EXPORT) | (1L << HIDDEN) | (1L << INSTANCE) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (CONSTRUCTOR - 79)) | (1L << (CONST - 79)) | (1L << (DELEGATE - 79)) | (1L << (DESTRUCTOR - 79)) | (1L << (ENUM - 79)) | (1L << (EVENT - 79)) | (1L << (INITONLY - 79)) | (1L << (INTERFACE - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (OPERATOR - 79)) | (1L << (PARTIAL - 79)) | (1L << (PROPERTY - 79)) | (1L << (SEALED - 79)) | (1L << (STRUCTURE - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (FIXED - 79)) | (1L << (OVERRIDE - 79)))) != 0) || _la==UNSAFE || _la==VOLATILE || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (LBRKT - 286)) | (1L << (BRACKETED_STRING_CONST - 286)) | (1L << (PRAGMA - 286)) | (1L << (EOS - 286)))) != 0)) {
				{
				{
				State = 861; _localctx._classmember = classmember();
				_localctx._Members.Add(_localctx._classmember);
				}
				}
				State = 866;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 867; Match(END);
			State = 868; Match(INTERFACE);
			State = 869; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 68, RULE_class_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 871; _localctx.Attributes = attributes();
				}
			}

			State = 875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 874; _localctx.Modifiers = classModifiers();
				}
			}

			State = 877; _localctx.C = Match(CLASS);
			State = 879;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 878; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 881; _localctx.Id = identifier();
			State = 883;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 882; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 885; Match(INHERIT);
				State = 886; _localctx.BaseType = datatype();
				}
			}

			State = 898;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 889; Match(IMPLEMENTS);
				State = 890; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 895;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 891; Match(COMMA);
					State = 892; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 897;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 903;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 900; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 905;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 906; _localctx.e = eos();
			State = 910;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << DECLARE) | (1L << DLL) | (1L << EXPORT) | (1L << HIDDEN) | (1L << INSTANCE) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (CONSTRUCTOR - 79)) | (1L << (CONST - 79)) | (1L << (DELEGATE - 79)) | (1L << (DESTRUCTOR - 79)) | (1L << (ENUM - 79)) | (1L << (EVENT - 79)) | (1L << (INITONLY - 79)) | (1L << (INTERFACE - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (OPERATOR - 79)) | (1L << (PARTIAL - 79)) | (1L << (PROPERTY - 79)) | (1L << (SEALED - 79)) | (1L << (STRUCTURE - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (FIXED - 79)) | (1L << (OVERRIDE - 79)))) != 0) || _la==UNSAFE || _la==VOLATILE || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (LBRKT - 286)) | (1L << (BRACKETED_STRING_CONST - 286)) | (1L << (PRAGMA - 286)) | (1L << (EOS - 286)))) != 0)) {
				{
				{
				State = 907; _localctx._classmember = classmember();
				_localctx._Members.Add(_localctx._classmember);
				}
				}
				State = 912;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 913; Match(END);
			State = 914; Match(CLASS);
			State = 915; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1746;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 917;
				_localctx._tset1746 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1746 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1746);
				}
				}
				State = 920;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922; Match(LT);
			State = 923; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 931;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 924; Match(COMMA);
				State = 926;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					State = 925; attributes();
					}
					break;
				}
				State = 928; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 933;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 934; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 936; _localctx.Attributes = attributes();
				}
			}

			State = 940;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 939;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 942; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(WHERE);
			State = 945; _localctx.Name = identifierName();
			State = 946; Match(IS);
			State = 947; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 948; Match(COMMA);
				State = 949; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 955;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 956; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 957; Match(NEW);
				State = 958; Match(LPAREN);
				State = 959; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_structure_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 962; _localctx.Attributes = attributes();
				}
			}

			State = 966;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 965; _localctx.Modifiers = classModifiers();
				}
			}

			State = 968; _localctx.S = Match(STRUCTURE);
			State = 970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 969; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 972; _localctx.Id = identifier();
			State = 974;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 973; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 985;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 976; Match(IMPLEMENTS);
				State = 977; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 982;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 978; Match(COMMA);
					State = 979; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 984;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 990;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 987; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 992;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 993; _localctx.e = eos();
			State = 997;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << DECLARE) | (1L << DLL) | (1L << EXPORT) | (1L << HIDDEN) | (1L << INSTANCE) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (CONSTRUCTOR - 79)) | (1L << (CONST - 79)) | (1L << (DELEGATE - 79)) | (1L << (DESTRUCTOR - 79)) | (1L << (ENUM - 79)) | (1L << (EVENT - 79)) | (1L << (INITONLY - 79)) | (1L << (INTERFACE - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (OPERATOR - 79)) | (1L << (PARTIAL - 79)) | (1L << (PROPERTY - 79)) | (1L << (SEALED - 79)) | (1L << (STRUCTURE - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (FIXED - 79)) | (1L << (OVERRIDE - 79)))) != 0) || _la==UNSAFE || _la==VOLATILE || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (LBRKT - 286)) | (1L << (BRACKETED_STRING_CONST - 286)) | (1L << (PRAGMA - 286)) | (1L << (EOS - 286)))) != 0)) {
				{
				{
				State = 994; _localctx._classmember = classmember();
				_localctx._Members.Add(_localctx._classmember);
				}
				}
				State = 999;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1000; Match(END);
			State = 1001; Match(STRUCTURE);
			State = 1002; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken D;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public IToken e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1004; _localctx.Attributes = attributes();
				}
			}

			State = 1008;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1007; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1010; _localctx.D = Match(DELEGATE);
			State = 1012;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				State = 1011; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1014; _localctx.Id = identifier();
			State = 1016;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1015; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1019;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1018; _localctx.ParamList = parameterList();
				}
			}

			State = 1023;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1021; Match(AS);
				State = 1022; _localctx.Type = datatype();
				}
			}

			State = 1028;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1025; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1030;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1031; _localctx.e = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken E;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 84, RULE_enum_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1033; _localctx.Attributes = attributes();
				}
			}

			State = 1037;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1036; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1039; _localctx.E = Match(ENUM);
			State = 1041;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1040; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1043; _localctx.Id = identifier();
			State = 1046;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 1044;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1045; _localctx.Type = datatype();
				}
			}

			State = 1048; _localctx.e = eos();
			State = 1050;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1049; _localctx._enummember = enummember();
				_localctx._Members.Add(_localctx._enummember);
				}
				}
				State = 1052;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMBER) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)))) != 0) );
			State = 1054; Match(END);
			State = 1056;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENUM) {
				{
				State = 1055; Match(ENUM);
				}
			}

			State = 1058; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1060; _localctx.Attributes = attributes();
				}
			}

			State = 1064;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEMBER) {
				{
				State = 1063; Match(MEMBER);
				}
			}

			State = 1066; _localctx.Id = identifier();
			State = 1070;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1067; _localctx.Op = assignoperator();
				State = 1068; _localctx.Expr = expression(0);
				}
			}

			State = 1072; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken E;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 88, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1074; _localctx.Attributes = attributes();
				}
			}

			State = 1078;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1077; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1080; _localctx.E = Match(EVENT);
			State = 1082;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1081; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1084; _localctx.Id = identifier();
			State = 1087;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1085; Match(AS);
				State = 1086; _localctx.Type = datatype();
				}
				break;
			}
			State = 1109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1089; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1091;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1090; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1093;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1095; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1097; _localctx.Multi = eos();
				State = 1099;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1098; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1101;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ADD - 97)) | (1L << (REMOVE - 97)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1103; Match(END);
				State = 1105;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EVENT) {
					{
					State = 1104; Match(EVENT);
					}
				}

				State = 1107; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 1111; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1114; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1117;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1118; _localctx.Key = Match(ADD);
				State = 1120;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					State = 1119; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1122;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1123; _localctx.Key = Match(REMOVE);
				State = 1125;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
				case 1:
					{
					State = 1124; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1127;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1130; _localctx.Attributes = attributes();
				}
			}

			State = 1134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1133; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1136; _localctx.Key = Match(ADD);
				State = 1137; _localctx.end = eos();
				State = 1138; _localctx.StmtBlk = statementBlock();
				State = 1139; Match(END);
				State = 1141;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1140; Match(ADD);
					}
				}

				}
				break;

			case 2:
				{
				State = 1143; _localctx.Key = Match(ADD);
				State = 1144; Match(UDCSEP);
				State = 1145; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1146; _localctx.Key = Match(REMOVE);
				State = 1147; _localctx.end = eos();
				State = 1148; _localctx.StmtBlk = statementBlock();
				State = 1149; Match(END);
				State = 1151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1150; Match(REMOVE);
					}
				}

				}
				break;

			case 4:
				{
				State = 1153; _localctx.Key = Match(REMOVE);
				State = 1154; Match(UDCSEP);
				State = 1155; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1158; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1160; _localctx.Attributes = attributes();
				}
			}

			State = 1163; _localctx.Modifiers = classvarModifiers();
			State = 1164; _localctx._classvar = classvar();
			_localctx._Vars.Add(_localctx._classvar);
			State = 1169;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1165; Match(COMMA);
				State = 1166; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				}
				}
				State = 1171;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1172; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _tset2441;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1174;
					_localctx._tset2441 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << INSTANCE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CONST - 83)) | (1L << (INITONLY - 83)) | (1L << (INTERNAL - 83)) | (1L << (FIXED - 83)) | (1L << (UNSAFE - 83)) | (1L << (VOLATILE - 83)))) != 0)) ) {
						_localctx._tset2441 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2441);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,153,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1179; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1182; _localctx.Id = identifier();
			State = 1187;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1183; Match(LBRKT);
				State = 1184; _localctx.ArraySub = arraysub();
				State = 1185; Match(RBRKT);
				}
			}

			State = 1192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1189; _localctx.Op = assignoperator();
				State = 1190; _localctx.Initializer = expression(0);
				}
			}

			State = 1196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1194;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1195; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1214;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1202;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1199; Match(RBRKT);
						State = 1200; Match(LBRKT);
						State = 1201; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1204;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,158,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1206; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1209;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1207; Match(COMMA);
					State = 1208; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1211;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1213; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken P;
		public PropertyParameterListContext ParamList;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public PropertyParameterListContext[] propertyParameterList() {
			return GetRuleContexts<PropertyParameterListContext>();
		}
		public PropertyParameterListContext propertyParameterList(int i) {
			return GetRuleContext<PropertyParameterListContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1216; _localctx.Attributes = attributes();
				}
			}

			State = 1220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1219; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1222; _localctx.P = Match(PROPERTY);
			State = 1229;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELF:
				{
				State = 1223; Match(SELF);
				State = 1224; _localctx.ParamList = propertyParameterList();
				}
				break;
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FIELD:
			case GLOBAL:
			case INHERIT:
			case INIT1:
			case INIT2:
			case INIT3:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INIT:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case YIELD:
			case REF:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case CURRENCY:
			case BINARY:
			case NINT:
			case NUINT:
			case ASSIGNMENT:
			case EXPORTED:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
			case OLEPUBLIC:
			case EXCLUDE:
			case THISACCESS:
			case HELPSTRING:
			case NOINIT:
			case EACH:
			case THEN:
			case FOX_M:
			case FOX_AND:
			case FOX_OR:
			case FOX_NOT:
			case FOX_XOR:
			case ID:
				{
				State = 1226;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					State = 1225; _localctx.ExplicitIface = nameDot(0);
					}
					break;
				}
				State = 1228; _localctx.Id = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1231; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1236;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1234; Match(AS);
				State = 1235; _localctx.Type = datatype();
				}
				break;
			}
			State = 1270;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 1238; _localctx.Auto = Match(AUTO);
				State = 1242;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					{
					State = 1239; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1244;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1248;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 1245; _localctx.Op = assignoperator();
					State = 1246; _localctx.Initializer = expression(0);
					}
				}

				State = 1250; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1252;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1251; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1254;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,169,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1256; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1258; _localctx.Multi = eos();
				State = 1260;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1259; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1262;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1264; Match(END);
				State = 1266;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROPERTY) {
					{
					State = 1265; Match(PROPERTY);
					}
				}

				State = 1268; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyParameterList);
		int _la;
		try {
			State = 1296;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1272; Match(LBRKT);
				State = 1281;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (ELLIPSIS - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)))) != 0)) {
					{
					State = 1273; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1278;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1274; Match(COMMA);
						State = 1275; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1280;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1283; Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; Match(LPAREN);
				State = 1293;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (ELLIPSIS - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)))) != 0)) {
					{
					State = 1285; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1290;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1286; Match(COMMA);
						State = 1287; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1292;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1295; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1298; _localctx.Attributes = attributes();
				}
			}

			State = 1302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1301; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1304;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				State = 1306; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1310;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1309; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1323;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1312;
				if (!(InputStream.La(2) != SET && InputStream.La(2) != INIT)) throw new FailedPredicateException(this, "InputStream.La(2) != SET && InputStream.La(2) != INIT");
				State = 1313;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==UDCSEP) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1315;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					State = 1314; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1317;
				if (!(InputStream.La(2) != GET && InputStream.La(2) != UDCSEP)) throw new FailedPredicateException(this, "InputStream.La(2) != GET && InputStream.La(2) != UDCSEP");
				State = 1318;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1320;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					State = 1319; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1322;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset2877;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1325;
					_localctx._tset2877 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset2877 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2877);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1328;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,185,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1335;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1331; Match(COMMA);
					State = 1332; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1337;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken Key2;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(XSharpParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(XSharpParser.INIT, i);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1338; _localctx.Attributes = attributes();
				}
			}

			State = 1342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1341; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1344; _localctx.Key = Match(GET);
				State = 1345; _localctx.end = eos();
				State = 1346; _localctx.StmtBlk = statementBlock();
				State = 1347; Match(END);
				State = 1349;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1348; _localctx.Key2 = Match(GET);
					}
				}

				}
				break;

			case 2:
				{
				State = 1351; _localctx.Key = Match(GET);
				State = 1352; Match(UDCSEP);
				State = 1353; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1354;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1355; _localctx.end = eos();
				State = 1356; _localctx.StmtBlk = statementBlock();
				State = 1357; Match(END);
				State = 1359;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==INIT) {
					{
					State = 1358;
					_localctx.Key2 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==SET || _la==INIT) ) {
						_localctx.Key2 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;

			case 4:
				{
				State = 1361;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1362; Match(UDCSEP);
				State = 1363; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1366; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClseosContext : ClassmemberContext {
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClseosContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClseos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClseos(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class ClspragmaContext : ClassmemberContext {
		public PragmaContext Member;
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public ClspragmaContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClspragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClspragma(this);
		}
	}
	public partial class ClsdllmethodContext : ClassmemberContext {
		public VodllmethodContext Member;
		public VodllmethodContext vodllmethod() {
			return GetRuleContext<VodllmethodContext>(0);
		}
		public ClsdllmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdllmethod(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public VodeclareContext decl;
		public VodeclareContext vodeclare() {
			return GetRuleContext<VodeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_classmember);
		try {
			State = 1384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1368; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1369; ((ClsdeclareContext)_localctx).decl = vodeclare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1370; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1371; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1372; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1373; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1374; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1375; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1376; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1377; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1378; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1379; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1380; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsdllmethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1381; ((ClsdllmethodContext)_localctx).Member = vodllmethod();
				}
				break;

			case 15:
				_localctx = new ClspragmaContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1382; ((ClspragmaContext)_localctx).Member = pragma();
				}
				break;

			case 16:
				_localctx = new ClseosContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1383; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public IToken c1;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public ConstructorchainContext Chain;
		public StatementBlockContext StmtBlk;
		public IToken c2;
		public ITerminalNode[] CONSTRUCTOR() { return GetTokens(XSharpParser.CONSTRUCTOR); }
		public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(XSharpParser.CONSTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstructorchainContext constructorchain() {
			return GetRuleContext<ConstructorchainContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1386; _localctx.Attributes = attributes();
				}
			}

			State = 1390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1389; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1392; _localctx.c1 = Match(CONSTRUCTOR);
			State = 1394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1393; _localctx.ParamList = parameterList();
				}
			}

			State = 1398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1396; Match(AS);
				State = 1397; Match(VOID);
				}
			}

			State = 1401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1400; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1405;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1403; Match(CLASS);
				State = 1404; _localctx.ClassId = identifier();
				}
			}

			State = 1409;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1407; Match(UDCSEP);
				State = 1408; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1411; _localctx.end = eos();
			State = 1413;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1412; _localctx.Chain = constructorchain();
				}
				break;
			}
			State = 1415; _localctx.StmtBlk = statementBlock();
			State = 1419;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1416; Match(END);
				State = 1417; _localctx.c2 = Match(CONSTRUCTOR);
				State = 1418; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorchainContext : XSharpParserRuleContext {
		public ArgumentListContext ArgList;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorchainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorchain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorchain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorchain(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorchainContext constructorchain() {
		ConstructorchainContext _localctx = new ConstructorchainContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_constructorchain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			_la = _input.La(1);
			if ( !(_la==SELF || _la==SUPER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				{
				State = 1422; Match(LPAREN);
				State = 1423; Match(RPAREN);
				}
				}
				break;

			case 2:
				{
				{
				State = 1424; Match(LPAREN);
				State = 1425; _localctx.ArgList = argumentList();
				State = 1426; Match(RPAREN);
				}
				}
				break;
			}
			State = 1430; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3319;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1432;
				_localctx._tset3319 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3319 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3319);
				}
				}
				State = 1435;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodeclareContext : XSharpParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public VodeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodeclare(this);
		}
	}

	[RuleVersion(0)]
	public VodeclareContext vodeclare() {
		VodeclareContext _localctx = new VodeclareContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_vodeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437; Match(DECLARE);
			State = 1438;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1439;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 1442;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)) | (1L << (EXPORTED - 128)) | (1L << (FREEZE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (EACH - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (TEXT - 192)) | (1L << (ENDTEXT - 192)) | (1L << (ADDITIVE - 192)) | (1L << (FLAGS - 192)) | (1L << (PRETEXT - 192)) | (1L << (NOSHOW - 192)) | (1L << (TEXTMERGE - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)) | (1L << (QQMARK - 192)) | (1L << (QMARK - 192)) | (1L << (AND - 192)) | (1L << (OR - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOT - 256)) | (1L << (VO_NOT - 256)) | (1L << (VO_AND - 256)) | (1L << (VO_OR - 256)) | (1L << (VO_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)) | (1L << (INCOMPLETE_STRING_CONST - 256)) | (1L << (TEXT_STRING_CONST - 256)) | (1L << (BRACKETED_STRING_CONST - 256)) | (1L << (BINARY_CONST - 256)) | (1L << (LAST_CONSTANT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (KWID - 320)) | (1L << (PRAGMA - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0) );
			State = 1444; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public IToken d1;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken d2;
		public ITerminalNode[] DESTRUCTOR() { return GetTokens(XSharpParser.DESTRUCTOR); }
		public ITerminalNode DESTRUCTOR(int i) {
			return GetToken(XSharpParser.DESTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1446; _localctx.Attributes = attributes();
				}
			}

			State = 1450;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1449; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1452; _localctx.d1 = Match(DESTRUCTOR);
			State = 1455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1453; Match(LPAREN);
				State = 1454; Match(RPAREN);
				}
			}

			State = 1459;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1457; Match(CLASS);
				State = 1458; _localctx.ClassId = identifier();
				}
			}

			State = 1463;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1461; Match(UDCSEP);
				State = 1462; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1465; _localctx.end = eos();
			State = 1466; _localctx.StmtBlk = statementBlock();
			State = 1470;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				State = 1467; Match(END);
				State = 1468; _localctx.d2 = Match(DESTRUCTOR);
				State = 1469; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1472; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1475;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (LT - 232)) | (1L << (LTE - 232)) | (1L << (GT - 232)) | (1L << (GTE - 232)) | (1L << (EEQ - 232)) | (1L << (NEQ - 232)) | (1L << (NEQ2 - 232)) | (1L << (INC - 232)) | (1L << (DEC - 232)) | (1L << (PLUS - 232)) | (1L << (MINUS - 232)) | (1L << (DIV - 232)) | (1L << (MOD - 232)) | (1L << (LSHIFT - 232)) | (1L << (RSHIFT - 232)) | (1L << (TILDE - 232)) | (1L << (MULT - 232)) | (1L << (AND - 232)) | (1L << (OR - 232)) | (1L << (NOT - 232)) | (1L << (PIPE - 232)) | (1L << (AMP - 232)))) != 0) || _la==FALSE_CONST || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public IToken o1;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] OPERATOR() { return GetTokens(XSharpParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(XSharpParser.OPERATOR, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 134, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1481; _localctx.Attributes = attributes();
				}
			}

			State = 1485;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1484; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1487; _localctx.o1 = Match(OPERATOR);
			State = 1490;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1488; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1489; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1493;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1492; _localctx.Gt = Match(GT);
				}
			}

			State = 1495; _localctx.ParamList = parameterList();
			State = 1498;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1496; Match(AS);
				State = 1497; _localctx.Type = datatype();
				}
			}

			State = 1502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1500; Match(UDCSEP);
				State = 1501; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1504; _localctx.end = eos();
			State = 1505; _localctx.StmtBlk = statementBlock();
			State = 1509;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 1506; Match(END);
				State = 1507; _localctx.o1 = Match(OPERATOR);
				State = 1508; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3692;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1511;
				_localctx._tset3692 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3692 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3692);
				}
				}
				State = 1514;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3719;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1516;
				_localctx._tset3719 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset3719 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3719);
				}
				}
				State = 1519;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1521; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,221,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attributeBlock);
		int _la;
		try {
			State = 1541;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1526; Match(LBRKT);
				State = 1528;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					State = 1527; _localctx.Target = attributeTarget();
					}
					break;
				}
				State = 1530; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				State = 1535;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1531; Match(COMMA);
					State = 1532; _localctx._attribute = attribute();
					_localctx._Attributes.Add(_localctx._attribute);
					}
					}
					State = 1537;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1538; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1540; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << FIELD) | (1L << METHOD) | (1L << RETURN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (CONSTRUCTOR - 82)) | (1L << (DELEGATE - 82)) | (1L << (ENUM - 82)) | (1L << (EVENT - 82)) | (1L << (INTERFACE - 82)) | (1L << (PROPERTY - 82)) | (1L << (STRUCTURE - 82)))) != 0) || _la==ID) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1544; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; _localctx.Name = name(0);
			State = 1559;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1547; Match(LPAREN);
				State = 1556;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					State = 1548; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1553;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1549; Match(COMMA);
						State = 1550; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1555;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1558; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_attributeParam);
		try {
			State = 1566;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1561; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1562; ((PropertyAttributeParamContext)_localctx).Op = assignoperator();
				State = 1563; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1565; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568; Match(LBRKT);
			State = 1569; _localctx.Target = globalAttributeTarget();
			State = 1570; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1571; Match(COMMA);
				State = 1572; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1577;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1578; Match(RBRKT);
			State = 1579; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_globalAttributeTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; _localctx.Token = Match(ID);
			State = 1582; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilewidememvarContext : XSharpParserRuleContext {
		public IToken Token;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public IToken end;
		public XbasevarContext _xbasevar;
		public IList<XbasevarContext> _XVars = new List<XbasevarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public XbasevarContext[] xbasevar() {
			return GetRuleContexts<XbasevarContext>();
		}
		public XbasevarContext xbasevar(int i) {
			return GetRuleContext<XbasevarContext>(i);
		}
		public FilewidememvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filewidememvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFilewidememvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFilewidememvar(this);
		}
	}

	[RuleVersion(0)]
	public FilewidememvarContext filewidememvar() {
		FilewidememvarContext _localctx = new FilewidememvarContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_filewidememvar);
		int _la;
		try {
			State = 1606;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MEMVAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1584; _localctx.Token = Match(MEMVAR);
				State = 1585; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				State = 1590;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1586; Match(COMMA);
					State = 1587; _localctx._identifierName = identifierName();
					_localctx._Vars.Add(_localctx._identifierName);
					}
					}
					State = 1592;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1593; _localctx.end = Match(EOS);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1595; _localctx.Token = Match(PUBLIC);
				State = 1596; _localctx._xbasevar = xbasevar();
				_localctx._XVars.Add(_localctx._xbasevar);
				State = 1601;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1597; Match(COMMA);
					State = 1598; _localctx._xbasevar = xbasevar();
					_localctx._XVars.Add(_localctx._xbasevar);
					}
					}
					State = 1603;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1604; _localctx.end = Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public IToken T;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public IToken Y;
		public IToken R;
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class LocalFunctionStmtContext : StatementContext {
		public LocalfuncprocContext Decl;
		public LocalfuncprocContext localfuncproc() {
			return GetRuleContext<LocalfuncprocContext>(0);
		}
		public LocalFunctionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalFunctionStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public IToken S;
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class FoxtextoutStmtContext : StatementContext {
		public IToken B;
		public IToken String;
		public IToken end;
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(XSharpParser.BACKSLASH, 0); }
		public ITerminalNode BACKBACKSLASH() { return GetToken(XSharpParser.BACKBACKSLASH, 0); }
		public FoxtextoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextoutStmt(this);
		}
	}
	public partial class DoStmtContext : StatementContext {
		public IToken D;
		public IdentifierContext Id;
		public ArgumentListContext ArgList;
		public EosContext end;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DoStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDoStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public CaseBlockContext CaseStmt;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class FoxtextStmtContext : StatementContext {
		public VaridentifierContext Id;
		public IToken Add;
		public IToken Merge;
		public IToken NoShow;
		public ExpressionContext Flags;
		public ExpressionContext Pretext;
		public IToken end;
		public IToken String;
		public EosContext e;
		public ITerminalNode TEXT() { return GetToken(XSharpParser.TEXT, 0); }
		public ITerminalNode ENDTEXT() { return GetToken(XSharpParser.ENDTEXT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode FLAGS() { return GetToken(XSharpParser.FLAGS, 0); }
		public ITerminalNode PRETEXT() { return GetToken(XSharpParser.PRETEXT, 0); }
		public ITerminalNode ADDITIVE() { return GetToken(XSharpParser.ADDITIVE, 0); }
		public ITerminalNode TEXTMERGE() { return GetToken(XSharpParser.TEXTMERGE, 0); }
		public ITerminalNode NOSHOW() { return GetToken(XSharpParser.NOSHOW, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FoxtextStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public IToken r;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}
	public partial class FoxexpressionStmtContext : StatementContext {
		public IToken Eq;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FoxexpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxexpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxexpressionStmt(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public IToken f;
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] FOR() { return GetTokens(XSharpParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(XSharpParser.FOR, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public IToken w;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IToken f;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode[] FOR() { return GetTokens(XSharpParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(XSharpParser.FOR, i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public IToken t;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken R;
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class WithBlockContext : StatementContext {
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WITH() { return GetTokens(XSharpParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(XSharpParser.WITH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public WithBlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWithBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWithBlock(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IToken i;
		public IfElseBlockContext IfStmt;
		public IToken e;
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public VariableDeclarationContext VarDecl;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] SCOPE() { return GetTokens(XSharpParser.SCOPE); }
		public ITerminalNode SCOPE(int i) {
			return GetToken(XSharpParser.SCOPE, i);
		}
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] CHECKED() { return GetTokens(XSharpParser.CHECKED); }
		public ITerminalNode CHECKED(int i) {
			return GetToken(XSharpParser.CHECKED, i);
		}
		public ITerminalNode[] UNCHECKED() { return GetTokens(XSharpParser.UNCHECKED); }
		public ITerminalNode UNCHECKED(int i) {
			return GetToken(XSharpParser.UNCHECKED, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}
	public partial class XbasedeclStmtContext : StatementContext {
		public XbasedeclContext Decl;
		public XbasedeclContext xbasedecl() {
			return GetRuleContext<XbasedeclContext>(0);
		}
		public XbasedeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasedeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasedeclStmt(this);
		}
	}
	public partial class FoxdeclStmtContext : StatementContext {
		public FoxdeclContext Decl;
		public FoxdeclContext foxdecl() {
			return GetRuleContext<FoxdeclContext>(0);
		}
		public FoxdeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdeclStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 2000;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new LocalFunctionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1609; ((LocalFunctionStmtContext)_localctx).Decl = localfuncproc();
				}
				break;

			case 3:
				_localctx = new XbasedeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1610;
				if (!(!IsFox)) throw new FailedPredicateException(this, "!IsFox");
				State = 1611; ((XbasedeclStmtContext)_localctx).Decl = xbasedecl();
				}
				break;

			case 4:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1612; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 5:
				_localctx = new FoxdeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1613;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 1614; ((FoxdeclStmtContext)_localctx).Decl = foxdecl();
				}
				break;

			case 6:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1616;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1615; Match(DO);
					}
				}

				State = 1618; ((WhileStmtContext)_localctx).w = Match(WHILE);
				State = 1619; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1620; ((WhileStmtContext)_localctx).end = eos();
				State = 1621; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1630;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					State = 1627;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1622; ((WhileStmtContext)_localctx).e = Match(END);
						State = 1624;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==DO || _la==WHILE) {
							{
							State = 1623;
							_la = _input.La(1);
							if ( !(_la==DO || _la==WHILE) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
						}

						}
						break;
					case ENDDO:
						{
						State = 1626; ((WhileStmtContext)_localctx).e = Match(ENDDO);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1629; eos();
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1632; Match(NOP);
				State = 1635;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1633; Match(LPAREN);
					State = 1634; Match(RPAREN);
					}
				}

				State = 1637; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1638; ((ForStmtContext)_localctx).f = Match(FOR);
				State = 1659;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					State = 1639; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1645;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1641;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1640; Match(LOCAL);
							}
						}

						State = 1643; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1644; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1647; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1648; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1649; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1651; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1652; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1653; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1654; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1657;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1655; Match(AS);
						State = 1656; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1661;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1662; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1665;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1663; Match(STEP);
					State = 1664; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1667; ((ForStmtContext)_localctx).end = eos();
				State = 1668; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1675;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					State = 1672;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case NEXT:
						{
						State = 1669; ((ForStmtContext)_localctx).e = Match(NEXT);
						}
						break;
					case END:
						{
						State = 1670; ((ForStmtContext)_localctx).e = Match(END);
						State = 1671; Match(FOR);
						}
						break;
					case EOS:
						break;
					default:
						break;
					}
					State = 1674; eos();
					}
					break;
				}
				}
				break;

			case 9:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1677; ((IfStmtContext)_localctx).i = Match(IF);
				State = 1678; ((IfStmtContext)_localctx).IfStmt = ifElseBlock();
				State = 1687;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 1684;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1679; ((IfStmtContext)_localctx).e = Match(END);
						State = 1681;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==IF) {
							{
							State = 1680; Match(IF);
							}
						}

						}
						break;
					case ENDIF:
						{
						State = 1683; ((IfStmtContext)_localctx).e = Match(ENDIF);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1686; eos();
					}
					break;
				}
				}
				break;

			case 10:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1689; Match(DO);
				State = 1690; Match(CASE);
				State = 1691; ((CaseStmtContext)_localctx).end = eos();
				State = 1693;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1692; ((CaseStmtContext)_localctx).CaseStmt = caseBlock();
					}
					break;
				}
				State = 1703;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1700;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1695; ((CaseStmtContext)_localctx).e = Match(END);
						State = 1697;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==CASE) {
							{
							State = 1696; Match(CASE);
							}
						}

						}
						break;
					case ENDCASE:
						{
						State = 1699; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1702; eos();
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1705; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1706; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 12:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1707; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1708; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 13:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1709; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1711;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1710; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1713; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1714; ((ReturnStmtContext)_localctx).R = Match(RETURN);
				State = 1717;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 1715; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1716; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1719; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 15:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1720;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					State = 1721; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1726;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1722; Match(COMMA);
						State = 1723; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1728;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1731; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 16:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1732; Match(BEGIN);
				State = 1733; Match(SEQUENCE);
				State = 1734; ((SeqStmtContext)_localctx).end = eos();
				State = 1735; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1738;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					State = 1736; Match(RECOVER);
					State = 1737; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
					break;
				}
				State = 1744;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 1740; Match(FINALLY);
					State = 1741; eos();
					State = 1742; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
					break;
				}
				State = 1751;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					State = 1746; ((SeqStmtContext)_localctx).e = Match(END);
					State = 1748;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEQUENCE) {
						{
						State = 1747; Match(SEQUENCE);
						}
					}

					State = 1750; eos();
					}
					break;
				}
				}
				break;

			case 17:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1753; ((RepeatStmtContext)_localctx).r = Match(REPEAT);
				State = 1754; ((RepeatStmtContext)_localctx).end = eos();
				State = 1755; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1756; Match(UNTIL);
				State = 1757; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1758; eos();
				}
				break;

			case 18:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1763;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOREACH:
					{
					State = 1760; ((ForeachStmtContext)_localctx).f = Match(FOREACH);
					}
					break;
				case FOR:
					{
					State = 1761; ((ForeachStmtContext)_localctx).f = Match(FOR);
					State = 1762; Match(EACH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1773;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 1765; Match(IMPLIED);
					State = 1766; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;

				case 2:
					{
					State = 1767; ((ForeachStmtContext)_localctx).Id = varidentifier();
					State = 1768; Match(AS);
					State = 1769; ((ForeachStmtContext)_localctx).Type = datatype();
					}
					break;

				case 3:
					{
					{
					State = 1771; Match(VAR);
					State = 1772; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					}
					break;
				}
				State = 1775; Match(IN);
				State = 1776; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1777; ((ForeachStmtContext)_localctx).end = eos();
				State = 1778; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1785;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 1782;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case NEXT:
						{
						State = 1779; ((ForeachStmtContext)_localctx).e = Match(NEXT);
						}
						break;
					case END:
						{
						State = 1780; ((ForeachStmtContext)_localctx).e = Match(END);
						State = 1781; Match(FOR);
						}
						break;
					case EOS:
						break;
					default:
						break;
					}
					State = 1784; eos();
					}
					break;
				}
				}
				break;

			case 19:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1787; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1789;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					State = 1788; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1791; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 20:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1792; ((TryStmtContext)_localctx).T = Match(TRY);
				State = 1793; ((TryStmtContext)_localctx).end = eos();
				State = 1794; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1801;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,266,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1795; Match(CATCH);
						State = 1797;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							State = 1796; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
							((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
							}
							break;
						}
						}
						} 
					}
					State = 1803;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,266,_ctx);
				}
				State = 1808;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 1804; ((TryStmtContext)_localctx).F = Match(FINALLY);
					State = 1805; eos();
					State = 1806; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
					break;
				}
				State = 1815;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					State = 1810; ((TryStmtContext)_localctx).e = Match(END);
					State = 1812;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TRY) {
						{
						State = 1811; Match(TRY);
						}
					}

					State = 1814; eos();
					}
					break;
				}
				}
				break;

			case 21:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1817; Match(BEGIN);
				State = 1818; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1819; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1820; ((BlockStmtContext)_localctx).end = eos();
				State = 1821; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1827;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					State = 1822; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1824;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCK) {
						{
						State = 1823; Match(LOCK);
						}
					}

					State = 1826; eos();
					}
					break;
				}
				}
				break;

			case 22:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1829; Match(BEGIN);
				State = 1830; ((BlockStmtContext)_localctx).Key = Match(SCOPE);
				State = 1831; ((BlockStmtContext)_localctx).end = eos();
				State = 1832; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1838;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					State = 1833; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1835;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SCOPE) {
						{
						State = 1834; Match(SCOPE);
						}
					}

					State = 1837; eos();
					}
					break;
				}
				}
				break;

			case 23:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1840; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1841; ((YieldStmtContext)_localctx).R = Match(RETURN);
				State = 1844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					State = 1842; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1843; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1846; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 24:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1847; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1848;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1849; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 25:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1851;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1850;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1853; ((SwitchStmtContext)_localctx).S = Match(SWITCH);
				State = 1854; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1855; ((SwitchStmtContext)_localctx).end = eos();
				State = 1857;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1856; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
						((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1859;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,276,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1866;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 1861; ((SwitchStmtContext)_localctx).e = Match(END);
					State = 1863;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SWITCH) {
						{
						State = 1862; Match(SWITCH);
						}
					}

					State = 1865; eos();
					}
					break;
				}
				}
				break;

			case 26:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1868; Match(BEGIN);
				State = 1869; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 1872;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					State = 1870; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 1871; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 1874; ((BlockStmtContext)_localctx).end = eos();
				State = 1875; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1881;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 1876; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1878;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==USING) {
						{
						State = 1877; Match(USING);
						}
					}

					State = 1880; eos();
					}
					break;
				}
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1883; Match(BEGIN);
				State = 1884; ((BlockStmtContext)_localctx).Key = Match(UNSAFE);
				State = 1885; ((BlockStmtContext)_localctx).end = eos();
				State = 1886; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1892;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					State = 1887; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1889;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==UNSAFE) {
						{
						State = 1888; Match(UNSAFE);
						}
					}

					State = 1891; eos();
					}
					break;
				}
				}
				break;

			case 28:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1894; Match(BEGIN);
				State = 1895; ((BlockStmtContext)_localctx).Key = Match(CHECKED);
				State = 1896; ((BlockStmtContext)_localctx).end = eos();
				State = 1897; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1903;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					State = 1898; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1900;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CHECKED) {
						{
						State = 1899; Match(CHECKED);
						}
					}

					State = 1902; eos();
					}
					break;
				}
				}
				break;

			case 29:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1905; Match(BEGIN);
				State = 1906; ((BlockStmtContext)_localctx).Key = Match(UNCHECKED);
				State = 1907; ((BlockStmtContext)_localctx).end = eos();
				State = 1908; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					State = 1909; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1911;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==UNCHECKED) {
						{
						State = 1910; Match(UNCHECKED);
						}
					}

					State = 1913; eos();
					}
					break;
				}
				}
				break;

			case 30:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1916; Match(BEGIN);
				State = 1917; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 1918; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 1919; ((BlockStmtContext)_localctx).end = eos();
				State = 1920; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1926;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 1921; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1923;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==FIXED) {
						{
						State = 1922; Match(FIXED);
						}
					}

					State = 1925; eos();
					}
					break;
				}
				}
				break;

			case 31:
				_localctx = new WithBlockContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1928; Match(WITH);
				State = 1929; ((WithBlockContext)_localctx).Expr = expression(0);
				State = 1930; ((WithBlockContext)_localctx).end = eos();
				State = 1931; ((WithBlockContext)_localctx).StmtBlk = statementBlock();
				State = 1937;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					State = 1932; ((WithBlockContext)_localctx).e = Match(END);
					State = 1934;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WITH) {
						{
						State = 1933; Match(WITH);
						}
					}

					State = 1936; eos();
					}
					break;
				}
				}
				break;

			case 32:
				_localctx = new FoxtextStmtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1939; Match(TEXT);
				State = 1959;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TO) {
					{
					State = 1940; Match(TO);
					State = 1941; ((FoxtextStmtContext)_localctx).Id = varidentifier();
					State = 1943;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==ADDITIVE) {
						{
						State = 1942; ((FoxtextStmtContext)_localctx).Add = Match(ADDITIVE);
						}
					}

					State = 1946;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TEXTMERGE) {
						{
						State = 1945; ((FoxtextStmtContext)_localctx).Merge = Match(TEXTMERGE);
						}
					}

					State = 1949;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==NOSHOW) {
						{
						State = 1948; ((FoxtextStmtContext)_localctx).NoShow = Match(NOSHOW);
						}
					}

					State = 1953;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==FLAGS) {
						{
						State = 1951; Match(FLAGS);
						State = 1952; ((FoxtextStmtContext)_localctx).Flags = expression(0);
						}
					}

					State = 1957;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==PRETEXT) {
						{
						State = 1955; Match(PRETEXT);
						State = 1956; ((FoxtextStmtContext)_localctx).Pretext = expression(0);
						}
					}

					}
				}

				State = 1961; ((FoxtextStmtContext)_localctx).end = Match(EOS);
				State = 1962; ((FoxtextStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 1963; Match(ENDTEXT);
				State = 1964; ((FoxtextStmtContext)_localctx).e = eos();
				}
				break;

			case 33:
				_localctx = new FoxexpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1965; ((FoxexpressionStmtContext)_localctx).Eq = Match(EQ);
				State = 1966; ((FoxexpressionStmtContext)_localctx)._expression = expression(0);
				((FoxexpressionStmtContext)_localctx)._Exprs.Add(((FoxexpressionStmtContext)_localctx)._expression);
				State = 1967; ((FoxexpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 34:
				_localctx = new FoxtextoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 1969;
				((FoxtextoutStmtContext)_localctx).B = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BACKSLASH || _la==BACKBACKSLASH) ) {
					((FoxtextoutStmtContext)_localctx).B = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1970; ((FoxtextoutStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 1971; ((FoxtextoutStmtContext)_localctx).end = Match(EOS);
				}
				break;

			case 35:
				_localctx = new DoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 1972; ((DoStmtContext)_localctx).D = Match(DO);
				State = 1973; ((DoStmtContext)_localctx).Id = identifier();
				State = 1976;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1974; Match(WITH);
					State = 1975; ((DoStmtContext)_localctx).ArgList = argumentList();
					}
				}

				State = 1978; ((DoStmtContext)_localctx).end = eos();
				}
				break;

			case 36:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 1980;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1981; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1982; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 37:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 1984;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1985; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1986;
				((ExpressionStmtContext)_localctx).t = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & ((1L << (RPAREN - 283)) | (1L << (RCURLY - 283)) | (1L << (RBRKT - 283)))) != 0)) ) {
					((ExpressionStmtContext)_localctx).t = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1987; ((ExpressionStmtContext)_localctx).end = eos();
				eosExpected(((ExpressionStmtContext)_localctx).t);
				}
				break;

			case 38:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 1990;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1991; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1994;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1992; Match(COMMA);
					State = 1993; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 1996;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				State = 1998; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public IToken Then;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IfElseBlockContext ElseIfBlock;
		public StatementBlockContext ElseBlock;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public IfElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockContext ifElseBlock() {
		IfElseBlockContext _localctx = new IfElseBlockContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_ifElseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002; _localctx.Cond = expression(0);
			State = 2004;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THEN) {
				{
				State = 2003; _localctx.Then = Match(THEN);
				}
			}

			State = 2006; _localctx.end = eos();
			State = 2007; _localctx.StmtBlk = statementBlock();
			State = 2014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				State = 2008; Match(ELSEIF);
				State = 2009; _localctx.ElseIfBlock = ifElseBlock();
				}
				break;

			case 2:
				{
				State = 2010; Match(ELSE);
				State = 2011; eos();
				State = 2012; _localctx.ElseBlock = statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Cond;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CaseBlockContext NextCase;
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_caseBlock);
		try {
			State = 2027;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2016; _localctx.Key = Match(CASE);
				State = 2017; _localctx.Cond = expression(0);
				State = 2018; _localctx.end = eos();
				State = 2019; _localctx.StmtBlk = statementBlock();
				State = 2021;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					State = 2020; _localctx.NextCase = caseBlock();
					}
					break;
				}
				}
				break;
			case OTHERWISE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2023; _localctx.Key = Match(OTHERWISE);
				State = 2024; _localctx.end = eos();
				State = 2025; _localctx.StmtBlk = statementBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public IToken W;
		public ExpressionContext whenexpr;
		public VaridentifierContext Id;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				State = 2029; _localctx.Key = Match(CASE);
				State = 2030; _localctx.Const = expression(0);
				State = 2033;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2031; _localctx.W = Match(WHEN);
					State = 2032; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 2:
				{
				State = 2035; _localctx.Key = Match(CASE);
				State = 2036; _localctx.Id = varidentifier();
				State = 2037; Match(AS);
				State = 2038; _localctx.DataType = datatype();
				State = 2041;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2039; _localctx.W = Match(WHEN);
					State = 2040; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 3:
				{
				State = 2043; _localctx.Key = Match(OTHERWISE);
				}
				break;
			}
			State = 2046; _localctx.end = eos();
			State = 2047; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken W;
		public ExpressionContext whenexpr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				State = 2049; Match(TO);
				}
				break;
			}
			State = 2053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				State = 2052; _localctx.Id = varidentifier();
				}
				break;
			}
			State = 2057;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2055; Match(AS);
				State = 2056; _localctx.Type = datatype();
				}
			}

			State = 2061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 2059; _localctx.W = Match(WHEN);
				State = 2060; _localctx.whenexpr = expression(0);
				}
			}

			State = 2063; _localctx.end = eos();
			State = 2064; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2066; Match(USING);
				State = 2067; _localctx.Id = varidentifier();
				}
			}

			State = 2070; _localctx.end = eos();
			State = 2071; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableDeclaration);
		int _la;
		try {
			State = 2101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2078;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 2074;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2073; Match(LOCAL);
						}
					}

					State = 2076; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 2077; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2080; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2085;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2081; Match(COMMA);
					State = 2082; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2087;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2088; Match(LOCAL);
				State = 2089; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2090; Match(COMMA);
					State = 2091; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2096;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2099;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2097; Match(AS);
					State = 2098; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2103; _localctx.Id = varidentifier();
			State = 2104; _localctx.Op = assignoperator();
			State = 2105; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public IToken Using;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_localdecl);
		int _la;
		try {
			State = 2222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2107; Match(LOCAL);
				State = 2109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2108; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2111; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2112; Match(COMMA);
					State = 2113; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2118;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2119; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2121; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2122; Match(LOCAL);
				State = 2123; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2128;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2124; Match(COMMA);
					State = 2125; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2130;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2131; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2133;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 2134; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2135; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2136; Match(COMMA);
					State = 2137; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2142;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2143; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2146;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2145; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2148; Match(VAR);
				State = 2149; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2154;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2150; Match(COMMA);
					State = 2151; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2156;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2157; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2159; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2160; Match(LOCAL);
					}
				}

				State = 2163; Match(IMPLIED);
				State = 2164; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2169;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2165; Match(COMMA);
					State = 2166; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2171;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2172; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2174; Match(LOCAL);
				State = 2176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2175; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2178; Match(IMPLIED);
				State = 2179; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2180; Match(COMMA);
					State = 2181; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2186;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2187; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 7:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2189; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2191;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2190; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2193; Match(VAR);
				State = 2194; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2195; Match(COMMA);
					State = 2196; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2201;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2202; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2204; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2205; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2209;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2208; Match(LOCAL);
					}
				}

				State = 2211; Match(IMPLIED);
				State = 2212; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2217;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2213; Match(COMMA);
					State = 2214; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2219;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2220; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public VaridentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierNameContext ClassLib;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_localvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 2224; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2227; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 2230; _localctx.Id = varidentifier();
			State = 2235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2231; Match(LBRKT);
				State = 2232; _localctx.ArraySub = arraysub();
				State = 2233; Match(RBRKT);
				}
			}

			State = 2240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2237; _localctx.Op = assignoperator();
				State = 2238; _localctx.Expression = expression(0);
				}
			}

			State = 2248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 2242;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2243; _localctx.DataType = datatype();
				State = 2246;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OF) {
					{
					State = 2244; Match(OF);
					State = 2245; _localctx.ClassLib = identifierName();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_impliedvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2250; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2253; _localctx.Id = varidentifier();
			State = 2254; _localctx.Op = assignoperator();
			State = 2255; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257; Match(FIELD);
			State = 2258; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2259; Match(COMMA);
				State = 2260; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2266; Match(IN);
				State = 2267; _localctx.Alias = identifierName();
				}
			}

			State = 2270; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbasedeclContext : XSharpParserRuleContext {
		public IToken T;
		public VaridentifierNameContext _varidentifierName;
		public IList<VaridentifierNameContext> _Vars = new List<VaridentifierNameContext>();
		public EosContext end;
		public XbasevarContext _xbasevar;
		public IList<XbasevarContext> _XVars = new List<XbasevarContext>();
		public VaridentifierNameContext[] varidentifierName() {
			return GetRuleContexts<VaridentifierNameContext>();
		}
		public VaridentifierNameContext varidentifierName(int i) {
			return GetRuleContext<VaridentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XbasevarContext[] xbasevar() {
			return GetRuleContexts<XbasevarContext>();
		}
		public XbasevarContext xbasevar(int i) {
			return GetRuleContext<XbasevarContext>(i);
		}
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public XbasedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbasedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasedecl(this);
		}
	}

	[RuleVersion(0)]
	public XbasedeclContext xbasedecl() {
		XbasedeclContext _localctx = new XbasedeclContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_xbasedecl);
		int _la;
		try {
			State = 2294;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MEMVAR:
			case PARAMETERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2272;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==MEMVAR || _la==PARAMETERS) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2273; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2278;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2274; Match(COMMA);
					State = 2275; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					}
					}
					State = 2280;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2281; _localctx.end = eos();
				}
				break;
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2283;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PRIVATE || _la==PUBLIC) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2284; _localctx._xbasevar = xbasevar();
				_localctx._XVars.Add(_localctx._xbasevar);
				State = 2289;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2285; Match(COMMA);
					State = 2286; _localctx._xbasevar = xbasevar();
					_localctx._XVars.Add(_localctx._xbasevar);
					}
					}
					State = 2291;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2292; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbasevarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbasevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbasevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasevar(this);
		}
	}

	[RuleVersion(0)]
	public XbasevarContext xbasevar() {
		XbasevarContext _localctx = new XbasevarContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_xbasevar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AMP) {
				{
				State = 2296; _localctx.Amp = Match(AMP);
				}
			}

			State = 2299; _localctx.Id = varidentifierName();
			State = 2304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2300; Match(LBRKT);
				State = 2301; _localctx.ArraySub = arraysub();
				State = 2302; Match(RBRKT);
				}
			}

			State = 2309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2306; _localctx.Op = assignoperator();
				State = 2307; _localctx.Expression = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdeclContext : XSharpParserRuleContext {
		public IToken T;
		public DimensionVarContext _dimensionVar;
		public IList<DimensionVarContext> _DimVars = new List<DimensionVarContext>();
		public EosContext end;
		public VaridentifierNameContext _varidentifierName;
		public IList<VaridentifierNameContext> _Vars = new List<VaridentifierNameContext>();
		public XbasedecltypeContext XT;
		public FoxbasevarContext _foxbasevar;
		public IList<FoxbasevarContext> _XVars = new List<FoxbasevarContext>();
		public IToken Ar;
		public DimensionVarContext[] dimensionVar() {
			return GetRuleContexts<DimensionVarContext>();
		}
		public DimensionVarContext dimensionVar(int i) {
			return GetRuleContext<DimensionVarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public VaridentifierNameContext[] varidentifierName() {
			return GetRuleContexts<VaridentifierNameContext>();
		}
		public VaridentifierNameContext varidentifierName(int i) {
			return GetRuleContext<VaridentifierNameContext>(i);
		}
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode LPARAMETERS() { return GetToken(XSharpParser.LPARAMETERS, 0); }
		public XbasedecltypeContext[] xbasedecltype() {
			return GetRuleContexts<XbasedecltypeContext>();
		}
		public XbasedecltypeContext xbasedecltype(int i) {
			return GetRuleContext<XbasedecltypeContext>(i);
		}
		public FoxbasevarContext[] foxbasevar() {
			return GetRuleContexts<FoxbasevarContext>();
		}
		public FoxbasevarContext foxbasevar(int i) {
			return GetRuleContext<FoxbasevarContext>(i);
		}
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public FoxdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxdeclContext foxdecl() {
		FoxdeclContext _localctx = new FoxdeclContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_foxdecl);
		int _la;
		try {
			State = 2387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2311;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECLARE || _la==DIMENSION) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2312; _localctx._dimensionVar = dimensionVar();
				_localctx._DimVars.Add(_localctx._dimensionVar);
				State = 2317;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2313; Match(COMMA);
					State = 2314; _localctx._dimensionVar = dimensionVar();
					_localctx._DimVars.Add(_localctx._dimensionVar);
					}
					}
					State = 2319;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2320; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2322; _localctx.T = Match(MEMVAR);
				State = 2323; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2328;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2324; Match(COMMA);
					State = 2325; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					}
					}
					State = 2330;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2331; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2333;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PARAMETERS || _la==LPARAMETERS) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2334; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2336;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2335; _localctx.XT = xbasedecltype();
					}
				}

				State = 2345;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2338; Match(COMMA);
					State = 2339; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					State = 2341;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2340; _localctx.XT = xbasedecltype();
						}
					}

					}
					}
					State = 2347;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2348; _localctx.end = eos();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2350;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PRIVATE || _la==PUBLIC) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2351; _localctx._foxbasevar = foxbasevar();
				_localctx._XVars.Add(_localctx._foxbasevar);
				State = 2356;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2352; Match(COMMA);
					State = 2353; _localctx._foxbasevar = foxbasevar();
					_localctx._XVars.Add(_localctx._foxbasevar);
					}
					}
					State = 2358;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2359; _localctx.end = eos();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2361; _localctx.T = Match(LOCAL);
				State = 2362; _localctx.Ar = Match(ARRAY);
				State = 2363; _localctx._dimensionVar = dimensionVar();
				_localctx._DimVars.Add(_localctx._dimensionVar);
				State = 2368;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2364; Match(COMMA);
					State = 2365; _localctx._dimensionVar = dimensionVar();
					_localctx._DimVars.Add(_localctx._dimensionVar);
					}
					}
					State = 2370;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2371; _localctx.end = eos();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2373; _localctx.T = Match(PUBLIC);
				State = 2375;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ARRAY) {
					{
					State = 2374; _localctx.Ar = Match(ARRAY);
					}
				}

				State = 2377; _localctx._dimensionVar = dimensionVar();
				_localctx._DimVars.Add(_localctx._dimensionVar);
				State = 2382;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2378; Match(COMMA);
					State = 2379; _localctx._dimensionVar = dimensionVar();
					_localctx._DimVars.Add(_localctx._dimensionVar);
					}
					}
					State = 2384;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2385; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionVarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Dims = new List<ExpressionContext>();
		public XbasedecltypeContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public XbasedecltypeContext xbasedecltype() {
			return GetRuleContext<XbasedecltypeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DimensionVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDimensionVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDimensionVar(this);
		}
	}

	[RuleVersion(0)]
	public DimensionVarContext dimensionVar() {
		DimensionVarContext _localctx = new DimensionVarContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_dimensionVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AMP) {
				{
				State = 2389; _localctx.Amp = Match(AMP);
				}
			}

			State = 2392; _localctx.Id = varidentifierName();
			State = 2415;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				{
				State = 2393; Match(LBRKT);
				State = 2394; _localctx._expression = expression(0);
				_localctx._Dims.Add(_localctx._expression);
				State = 2399;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2395; Match(COMMA);
					State = 2396; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					}
					}
					State = 2401;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2402; Match(RBRKT);
				}
				break;
			case LPAREN:
				{
				State = 2404; Match(LPAREN);
				State = 2405; _localctx._expression = expression(0);
				_localctx._Dims.Add(_localctx._expression);
				State = 2410;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2406; Match(COMMA);
					State = 2407; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					}
					}
					State = 2412;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2413; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2418;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2417; _localctx.XT = xbasedecltype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbasedecltypeContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IdentifierNameContext ClassLib;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public XbasedecltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbasedecltype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasedecltype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasedecltype(this);
		}
	}

	[RuleVersion(0)]
	public XbasedecltypeContext xbasedecltype() {
		XbasedecltypeContext _localctx = new XbasedecltypeContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_xbasedecltype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420; Match(AS);
			State = 2421; _localctx.Type = datatype();
			State = 2424;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 2422; Match(OF);
				State = 2423; _localctx.ClassLib = identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxbasevarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public XbasedecltypeContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public XbasedecltypeContext xbasedecltype() {
			return GetRuleContext<XbasedecltypeContext>(0);
		}
		public FoxbasevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxbasevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxbasevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxbasevar(this);
		}
	}

	[RuleVersion(0)]
	public FoxbasevarContext foxbasevar() {
		FoxbasevarContext _localctx = new FoxbasevarContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_foxbasevar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AMP) {
				{
				State = 2426; _localctx.Amp = Match(AMP);
				}
			}

			State = 2429; _localctx.Id = varidentifierName();
			State = 2431;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2430; _localctx.XT = xbasedecltype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocContext : XSharpParserRuleContext {
		public LocalfuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LocalfuncprocModifiersContext localfuncprocModifiers() {
			return GetRuleContext<LocalfuncprocModifiersContext>(0);
		}
		public LocalfuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncproc(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocContext localfuncproc() {
		LocalfuncprocContext _localctx = new LocalfuncprocContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_localfuncproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2434;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC || _la==UNSAFE) {
				{
				State = 2433; _localctx.Modifiers = localfuncprocModifiers();
				}
			}

			State = 2436; Match(LOCAL);
			State = 2437; _localctx.T = funcproctype();
			State = 2438; _localctx.Sig = signature();
			State = 2439; _localctx.end = eos();
			State = 2440; _localctx.StmtBlk = statementBlock();
			State = 2441; Match(END);
			State = 2442; _localctx.T2 = funcproctype();
			State = 2443; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _UNSAFE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASYNC;
		public IToken _tset6499;
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public LocalfuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocModifiersContext localfuncprocModifiers() {
		LocalfuncprocModifiersContext _localctx = new LocalfuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_localfuncprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2445;
				_localctx._tset6499 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
					_localctx._tset6499 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset6499);
				}
				}
				State = 2448;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASYNC || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignoperatorContext : XSharpParserRuleContext {
		public IToken Op;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public AssignoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignoperatorContext assignoperator() {
		AssignoperatorContext _localctx = new AssignoperatorContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_assignoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2450;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class XFunctionExpressionContext : ExpressionContext {
		public XbaseFuncContext XFunc;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public XbaseFuncContext xbaseFunc() {
			return GetRuleContext<XbaseFuncContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public XFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXFunctionExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_QQMARK() { return GetToken(XSharpParser.ASSIGN_QQMARK, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class AccessMemberLateNameContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberLateNameContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLateName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLateName(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public DatatypeContext Type;
		public VaridentifierContext Id;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 198;
		EnterRecursionRule(_localctx, 198, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2453;
				((AccessMemberContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (COLON - 288)) | (1L << (DOT - 288)) | (1L << (COLONCOLON - 288)))) != 0)) ) {
					((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2454; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2455; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2456; Match(LPAREN);
				State = 2457; Match(RPAREN);
				}
				break;

			case 3:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2459; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2460; Match(LPAREN);
				State = 2461; ((XFunctionExpressionContext)_localctx).ArgList = argumentList();
				State = 2462; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2464;
				if (!(IsTypeCastAllowed() )) throw new FailedPredicateException(this, "IsTypeCastAllowed() ");
				State = 2465; Match(LPAREN);
				State = 2466; ((TypeCastContext)_localctx).Type = datatype();
				State = 2467; Match(RPAREN);
				State = 2468; ((TypeCastContext)_localctx).Expr = expression(22);
				}
				break;

			case 5:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2470; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2471; ((AwaitExpressionContext)_localctx).Expr = expression(20);
				}
				break;

			case 6:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2472;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & ((1L << (INC - 241)) | (1L << (DEC - 241)) | (1L << (PLUS - 241)) | (1L << (MINUS - 241)) | (1L << (TILDE - 241)) | (1L << (ADDROF - 241)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2473; ((PrefixExpressionContext)_localctx).Expr = expression(19);
				}
				break;

			case 7:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2474;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOT - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (FOX_NOT - 256)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2475; ((PrefixExpressionContext)_localctx).Expr = expression(7);
				}
				break;

			case 8:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2476; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2566;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,373,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2564;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2479;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2480; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2481; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2482;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2483;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (DIV - 245)) | (1L << (MOD - 245)) | (1L << (MULT - 245)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2484; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2485;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2486;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2487; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2488;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2489; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2490; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2491;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2492; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2493; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2494; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2495;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2496;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (LT - 232)) | (1L << (LTE - 232)) | (1L << (GT - 232)) | (1L << (GTE - 232)) | (1L << (EQ - 232)) | (1L << (EEQ - 232)) | (1L << (SUBSTR - 232)) | (1L << (NEQ - 232)) | (1L << (NEQ2 - 232)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2497; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2498;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2499; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2500; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2501;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2502; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2503; ((BinaryExpressionContext)_localctx).Right = expression(10);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2504;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2505; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2506; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2507;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2508;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AND - 254)) | (1L << (LOGIC_AND - 254)) | (1L << (FOX_AND - 254)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2509; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2510;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2511;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LOGIC_XOR || _la==FOX_XOR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2512; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2513;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2514;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (OR - 255)) | (1L << (LOGIC_OR - 255)) | (1L << (FOX_OR - 255)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2515; ((BinaryExpressionContext)_localctx).Right = expression(5);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2516;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2517;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DEFAULT || _la==QQMARK) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2518; ((BinaryExpressionContext)_localctx).Right = expression(4);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2519;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2520;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (ASSIGN_OP - 261)) | (1L << (ASSIGN_ADD - 261)) | (1L << (ASSIGN_SUB - 261)) | (1L << (ASSIGN_EXP - 261)) | (1L << (ASSIGN_MUL - 261)) | (1L << (ASSIGN_DIV - 261)) | (1L << (ASSIGN_MOD - 261)) | (1L << (ASSIGN_BITAND - 261)) | (1L << (ASSIGN_BITOR - 261)) | (1L << (ASSIGN_LSHIFT - 261)) | (1L << (ASSIGN_RSHIFT - 261)) | (1L << (ASSIGN_XOR - 261)) | (1L << (ASSIGN_QQMARK - 261)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2521; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2522;
						if (!(Precpred(_ctx, 32))) throw new FailedPredicateException(this, "Precpred(_ctx, 32)");
						State = 2523;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2524; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2525;
						if (!(Precpred(_ctx, 30))) throw new FailedPredicateException(this, "Precpred(_ctx, 30)");
						State = 2526;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2527; Match(AMP);
						State = 2528; Match(LPAREN);
						State = 2529; ((AccessMemberLateContext)_localctx).Right = expression(0);
						State = 2530; Match(RPAREN);
						}
						break;

					case 17:
						{
						_localctx = new AccessMemberLateNameContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateNameContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2532;
						if (!(Precpred(_ctx, 29))) throw new FailedPredicateException(this, "Precpred(_ctx, 29)");
						State = 2533;
						((AccessMemberLateNameContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateNameContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2534; Match(AMP);
						State = 2535; ((AccessMemberLateNameContext)_localctx).Name = identifierName();
						}
						break;

					case 18:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2536;
						if (!(Precpred(_ctx, 28))) throw new FailedPredicateException(this, "Precpred(_ctx, 28)");
						State = 2537; Match(LPAREN);
						State = 2538; Match(RPAREN);
						}
						break;

					case 19:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2539;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2540; Match(LPAREN);
						State = 2541; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2542; Match(RPAREN);
						}
						break;

					case 20:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2544;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 2545; Match(LBRKT);
						State = 2546; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2547; Match(RBRKT);
						}
						break;

					case 21:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2549;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 2550; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2551; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 22:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2552;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2553;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 23:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2554;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2555; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2556; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						State = 2559;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
						case 1:
							{
							State = 2557; Match(VAR);
							State = 2558; ((TypeCheckExpressionContext)_localctx).Id = varidentifier();
							}
							break;
						}
						}
						break;

					case 24:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2561;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2562; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2563; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;
					}
					} 
				}
				State = 2568;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,373,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedExpressionContext : PrimaryContext {
		public AliasExpressionContext Expr;
		public AliasExpressionContext aliasExpression() {
			return GetRuleContext<AliasExpressionContext>(0);
		}
		public AliasedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpression(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ObjectOrCollectioninitializerContext Init;
		public ArgumentListContext ArgList;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VO_AND() { return GetToken(XSharpParser.VO_AND, 0); }
		public ITerminalNode VO_OR() { return GetToken(XSharpParser.VO_OR, 0); }
		public ITerminalNode VO_XOR() { return GetToken(XSharpParser.VO_XOR, 0); }
		public ITerminalNode VO_NOT() { return GetToken(XSharpParser.VO_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_primary);
		int _la;
		try {
			State = 2701;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2569; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2570; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2571; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 4:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2572; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 5:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2573; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 6:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2574; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 7:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2575; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 8:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2576; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 9:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2577; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2578; Match(LCURLY);
				State = 2579; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2580; Match(COMMA);
				State = 2581; Match(ADDROF);
				State = 2582; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2583; Match(LPAREN);
				State = 2584; Match(RPAREN);
				State = 2585; Match(RCURLY);
				}
				break;

			case 10:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2587; ((CtorCallContext)_localctx).Type = datatype();
				State = 2588; Match(LCURLY);
				State = 2589; Match(RCURLY);
				State = 2591;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					State = 2590; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2593; ((CtorCallContext)_localctx).Type = datatype();
				State = 2594; Match(LCURLY);
				State = 2595; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2596; Match(RCURLY);
				State = 2598;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 2597; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2600;
				((CheckedExpressionContext)_localctx).ch = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CHECKED || _la==UNCHECKED) ) {
					((CheckedExpressionContext)_localctx).ch = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2601; Match(LPAREN);
				State = 2602; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				State = 2603; Match(RPAREN);
				}
				break;

			case 13:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2605; Match(TYPEOF);
				State = 2606; Match(LPAREN);
				State = 2607; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2608; Match(RPAREN);
				}
				break;

			case 14:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2610; Match(SIZEOF);
				State = 2611; Match(LPAREN);
				State = 2612; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2613; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2615; Match(DEFAULT);
				State = 2616; Match(LPAREN);
				State = 2617; ((DefaultExpressionContext)_localctx).Type = datatype();
				State = 2618; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2620; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 17:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2621; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2622; Match(LPAREN);
				State = 2623; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2624; Match(RPAREN);
				}
				break;

			case 18:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2626; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2627; Match(LPAREN);
				State = 2628; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2629; Match(RPAREN);
				}
				break;

			case 19:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2631; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2632; Match(LPAREN);
				State = 2633; Match(CAST);
				State = 2634; Match(COMMA);
				State = 2635; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2636; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2638; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2639; Match(LPAREN);
				State = 2640; Match(CAST);
				State = 2641; Match(COMMA);
				State = 2642; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2643; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2645; Match(CASTCLASS);
				State = 2646; Match(LPAREN);
				State = 2647; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2648; Match(COMMA);
				State = 2649; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2650; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2652; Match(CASTCLASS);
				State = 2653; Match(LPAREN);
				State = 2654; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2655; Match(COMMA);
				State = 2656; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2657; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2659; Match(PTR);
				State = 2660; Match(LPAREN);
				State = 2661; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2662; Match(COMMA);
				State = 2663; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2664; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2666; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 25:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2667; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 26:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2668; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 27:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2669;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (VO_NOT - 257)) | (1L << (VO_AND - 257)) | (1L << (VO_OR - 257)) | (1L << (VO_XOR - 257)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2670; Match(LPAREN);
				State = 2671; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2676;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2672; Match(COMMA);
					State = 2673; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2678;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2679; Match(RPAREN);
				}
				break;

			case 28:
				_localctx = new AliasedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2681; ((AliasedExpressionContext)_localctx).Expr = aliasExpression();
				}
				break;

			case 29:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2682; Match(AMP);
				State = 2683; Match(LPAREN);
				State = 2684; ((MacroContext)_localctx).Expr = expression(0);
				State = 2685; Match(RPAREN);
				}
				break;

			case 30:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2687; Match(AMP);
				State = 2688; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 31:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2689; Match(LPAREN);
				State = 2690; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2695;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2691; Match(COMMA);
					State = 2692; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2697;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2698; Match(RPAREN);
				}
				break;

			case 32:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2700; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2710;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2704;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2705; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2706; Match(LBRKT);
				State = 2707; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2708; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2733;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,381,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2731;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2712;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2713; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2714; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2715;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2716;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2717; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2718;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2719; Match(LPAREN);
						State = 2720; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2721;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2722; Match(LPAREN);
						State = 2723; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2724; Match(RPAREN);
						}
						break;

					case 5:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2726;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2727; Match(LBRKT);
						State = 2728; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2729; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2735;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,381,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasExpressionContext : XSharpParserRuleContext {
		public AliasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExpression; } }
	 
		public AliasExpressionContext() { }
		public virtual void CopyFrom(AliasExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AliasedMemvarContext : AliasExpressionContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class AliasedFieldLateContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public ExpressionContext Field;
		public IdentifierContext Area;
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldLateContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class AliasedExprContext : AliasExpressionContext {
		public IdentifierContext Id;
		public ExpressionContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(XSharpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(XSharpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(XSharpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(XSharpParser.RPAREN, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AliasedExprContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class AliasedFieldContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public IdentifierContext Area;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpressionContext aliasExpression() {
		AliasExpressionContext _localctx = new AliasExpressionContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_aliasExpression);
		int _la;
		try {
			State = 2795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2736; Match(MEMVAR);
				State = 2737; Match(ALIAS);
				State = 2738; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 2:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2739; Match(FIELD);
				State = 2740; Match(ALIAS);
				State = 2744;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					State = 2741; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2742; Match(ALIAS);
					}
					break;
				}
				State = 2746; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 3:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2747;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2748; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2749; Match(ALIAS);
				State = 2750; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 4:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2752;
				if (!(InputStream.La(6) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(6) != LPAREN");
				State = 2753; Match(LPAREN);
				State = 2754; ((AliasedFieldContext)_localctx).Area = identifier();
				State = 2755; Match(RPAREN);
				State = 2756; Match(ALIAS);
				State = 2757; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 5:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2759; ((AliasedFieldLateContext)_localctx).Alias = identifier();
				State = 2760; Match(ALIAS);
				State = 2761; Match(AMP);
				State = 2762; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 6:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2764; Match(FIELD);
				State = 2765; Match(ALIAS);
				State = 2769;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
					{
					State = 2766; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2767; Match(ALIAS);
					}
				}

				State = 2771; Match(AMP);
				State = 2772; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 7:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2773; Match(LPAREN);
				State = 2774; ((AliasedFieldLateContext)_localctx).Area = identifier();
				State = 2775; Match(RPAREN);
				State = 2776; Match(ALIAS);
				State = 2777; Match(AMP);
				State = 2778; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 8:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2785;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ALIGN:
				case CALLBACK:
				case CLIPPER:
				case DECLARE:
				case DEFINE:
				case DIM:
				case DLLEXPORT:
				case DOWNTO:
				case FASTCALL:
				case FIELD:
				case GLOBAL:
				case INHERIT:
				case INIT1:
				case INIT2:
				case INIT3:
				case INSTANCE:
				case IN:
				case MEMVAR:
				case NAMEOF:
				case PARAMETERS:
				case PASCAL:
				case SEQUENCE:
				case STEP:
				case STRICT:
				case THISCALL:
				case TO:
				case UNION:
				case UPTO:
				case USING:
				case WINCALL:
				case ABSTRACT:
				case AUTO:
				case CONST:
				case DEFAULT:
				case DELEGATE:
				case ENUM:
				case EVENT:
				case EXPLICIT:
				case FOREACH:
				case GET:
				case IMPLEMENTS:
				case IMPLICIT:
				case IMPLIED:
				case INITONLY:
				case INTERFACE:
				case INTERNAL:
				case LOCK:
				case NAMESPACE:
				case NEW:
				case OPERATOR:
				case OUT:
				case PARTIAL:
				case PROPERTY:
				case SCOPE:
				case SEALED:
				case SET:
				case STRUCTURE:
				case TRY:
				case UNTIL:
				case VALUE:
				case VIRTUAL:
				case VOSTRUCT:
				case ADD:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case ASTYPE:
				case AWAIT:
				case BY:
				case CHECKED:
				case DESCENDING:
				case EQUALS:
				case EXTERN:
				case FIXED:
				case FROM:
				case GROUP:
				case INIT:
				case INTO:
				case JOIN:
				case LET:
				case NOP:
				case OF:
				case ON:
				case ORDERBY:
				case OVERRIDE:
				case PARAMS:
				case REMOVE:
				case SELECT:
				case SWITCH:
				case UNCHECKED:
				case UNSAFE:
				case VAR:
				case VOLATILE:
				case WHEN:
				case WHERE:
				case YIELD:
				case REF:
				case CHAR:
				case DYNAMIC:
				case DECIMAL:
				case DATETIME:
				case CURRENCY:
				case BINARY:
				case NINT:
				case NUINT:
				case ASSIGNMENT:
				case EXPORTED:
				case NOSAVE:
				case READONLY:
				case SHARING:
				case SHARED:
				case OLEPUBLIC:
				case EXCLUDE:
				case THISACCESS:
				case HELPSTRING:
				case NOINIT:
				case EACH:
				case THEN:
				case FOX_M:
				case FOX_AND:
				case FOX_OR:
				case FOX_NOT:
				case FOX_XOR:
				case ID:
					{
					State = 2780; ((AliasedExprContext)_localctx).Id = identifier();
					}
					break;
				case LPAREN:
					{
					State = 2781; Match(LPAREN);
					State = 2782; ((AliasedExprContext)_localctx).Alias = expression(0);
					State = 2783; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2787; Match(ALIAS);
				State = 2793;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					{
					State = 2788; Match(LPAREN);
					State = 2789; ((AliasedExprContext)_localctx).Expr = expression(0);
					State = 2790; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					State = 2792; ((AliasedExprContext)_localctx).Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_objectOrCollectioninitializer);
		try {
			State = 2799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2797; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2798; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; Match(LCURLY);
			State = 2810;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
				{
				State = 2802; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2807;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2803; Match(COMMA);
					State = 2804; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2809;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 2812; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public InitializervalueContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2814; _localctx.Name = identifierName();
			State = 2815; _localctx.Op = assignoperator();
			State = 2816; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_initializervalue);
		try {
			State = 2820;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2818; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2819; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexInitExprContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ComplexInitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexInitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterComplexInitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitComplexInitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComplexInitExprContext complexInitExpr() {
		ComplexInitExprContext _localctx = new ComplexInitExprContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_complexInitExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2822; Match(LCURLY);
			State = 2823; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2828;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2824; Match(COMMA);
				State = 2825; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2830;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2831; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerMemberContext : XSharpParserRuleContext {
		public ComplexInitExprContext Init;
		public ExpressionContext Expr;
		public ComplexInitExprContext complexInitExpr() {
			return GetRuleContext<ComplexInitExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializerMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializerMember(this);
		}
	}

	[RuleVersion(0)]
	public InitializerMemberContext initializerMember() {
		InitializerMemberContext _localctx = new InitializerMemberContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_initializerMember);
		try {
			State = 2835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2833; _localctx.Init = complexInitExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2834; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837; Match(LCURLY);
			State = 2838; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2843;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2839; Match(COMMA);
				State = 2840; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2845;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2846; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 2853;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2849; Match(COMMA);
				State = 2850; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 2855;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2857;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2856; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2859; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 2864;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2860; Match(COMMA);
				State = 2861; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 2866;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public IToken RefOut;
		public ExpressionContext Expr;
		public IToken Var;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken Null;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_namedArgument);
		int _la;
		try {
			State = 2892;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2867;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 2868; _localctx.Name = identifierName();
				State = 2869; _localctx.Op = assignoperator();
				State = 2871;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					State = 2870;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2874;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					State = 2873; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2876; _localctx.RefOut = Match(OUT);
				State = 2877; _localctx.Var = Match(VAR);
				State = 2878; _localctx.Id = varidentifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2879; _localctx.RefOut = Match(OUT);
				State = 2880; _localctx.Id = varidentifier();
				State = 2881; Match(AS);
				State = 2882; _localctx.Type = datatype();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2884; _localctx.RefOut = Match(OUT);
				State = 2885; _localctx.Null = Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2887;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					State = 2886;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2890;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 2889; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2895; Match(LPAREN);
			State = 2896; _localctx.Cond = expression(0);
			State = 2897; Match(COMMA);
			State = 2899;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2898; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 2901; Match(COMMA);
			State = 2903;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2902; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 2905; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2908; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 2909; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2917;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 2911;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2912; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 2913; Match(DOT);
					}
					} 
				}
				State = 2919;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 232;
		EnterRecursionRule(_localctx, 232, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2921; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2928;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 2923;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2924; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 2925; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 2930;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_aliasedName);
		try {
			State = 2939;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2931; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 2932; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2933; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 2935; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2936; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2938; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941; _localctx.Id = identifier();
			State = 2943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2942; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(LT);
			State = 2946; _localctx._datatype = datatype();
			_localctx._GenericArgs.Add(_localctx._datatype);
			State = 2951;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2947; Match(COMMA);
				State = 2948; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				}
				}
				State = 2953;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2954; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2956; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifier(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierContext varidentifier() {
		VaridentifierContext _localctx = new VaridentifierContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_varidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2960;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2958; Match(FOX_M);
				State = 2959; Match(DOT);
				}
				break;
			}
			State = 2962; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierNameContext : XSharpParserRuleContext {
		public IdentifierNameContext Id;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifierName(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierNameContext varidentifierName() {
		VaridentifierNameContext _localctx = new VaridentifierNameContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_varidentifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2964; Match(FOX_M);
				State = 2965; Match(DOT);
				}
				break;
			}
			State = 2968; _localctx.Id = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_datatype);
		try {
			int _alt;
			State = 2986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2970; Match(ARRAY);
				State = 2971; Match(OF);
				State = 2972; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2973; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 2974; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2976; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 2978;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2977; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2980;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,411,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2982; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2983; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 2984; Match(QMARK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_arrayRank);
		int _la;
		try {
			State = 2997;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2988; Match(LBRKT);
				State = 2992;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2989; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 2994;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2995; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2996; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_typeName);
		try {
			State = 3002;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2999; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3000; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3001; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_usualTypeName);
		try {
			State = 3006;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3004; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
			case CURRENCY:
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3005; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_literalArray);
		int _la;
		try {
			State = 3033;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3012;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3008; Match(LT);
					State = 3009; _localctx.Type = datatype();
					State = 3010; Match(GT);
					}
				}

				State = 3014; Match(LCURLY);
				State = 3015; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3020;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3016; Match(LT);
					State = 3017; _localctx.Type = datatype();
					State = 3018; Match(GT);
					}
				}

				State = 3022; Match(LCURLY);
				State = 3023; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 3028;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3024; Match(COMMA);
					State = 3025; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 3030;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3031; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3036;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 3035; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3038; Match(CLASS);
			State = 3039; Match(LCURLY);
			State = 3048;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				State = 3040; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 3045;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3041; Match(COMMA);
					State = 3042; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 3047;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3050; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_anonMember);
		try {
			State = 3057;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3052; _localctx.Name = identifierName();
				State = 3053; _localctx.Op = assignoperator();
				State = 3054; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3056; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public CodeblockCodeContext Code;
		public IToken lambda;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_codeblock);
		int _la;
		try {
			State = 3088;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3059; Match(LCURLY);
				State = 3066;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OR:
					{
					State = 3060; _localctx.Or = Match(OR);
					}
					break;
				case PIPE:
					{
					State = 3061; _localctx.P1 = Match(PIPE);
					State = 3063;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
						{
						State = 3062; _localctx.LambdaParamList = lambdaParameterList();
						}
					}

					State = 3065; _localctx.P2 = Match(PIPE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3068; _localctx.Code = codeblockCode();
				State = 3069; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3071; Match(LCURLY);
				State = 3082;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OR:
					{
					State = 3072; _localctx.Or = Match(OR);
					}
					break;
				case ALIGN:
				case CALLBACK:
				case CLIPPER:
				case DECLARE:
				case DEFINE:
				case DIM:
				case DLLEXPORT:
				case DOWNTO:
				case FASTCALL:
				case FIELD:
				case GLOBAL:
				case INHERIT:
				case INIT1:
				case INIT2:
				case INIT3:
				case INSTANCE:
				case IN:
				case MEMVAR:
				case NAMEOF:
				case PARAMETERS:
				case PASCAL:
				case SEQUENCE:
				case STEP:
				case STRICT:
				case THISCALL:
				case TO:
				case UNION:
				case UPTO:
				case USING:
				case WINCALL:
				case ABSTRACT:
				case AUTO:
				case CONST:
				case DEFAULT:
				case DELEGATE:
				case ENUM:
				case EVENT:
				case EXPLICIT:
				case FOREACH:
				case GET:
				case IMPLEMENTS:
				case IMPLICIT:
				case IMPLIED:
				case INITONLY:
				case INTERFACE:
				case INTERNAL:
				case LOCK:
				case NAMESPACE:
				case NEW:
				case OPERATOR:
				case OUT:
				case PARTIAL:
				case PROPERTY:
				case SCOPE:
				case SEALED:
				case SET:
				case STRUCTURE:
				case TRY:
				case UNTIL:
				case VALUE:
				case VIRTUAL:
				case VOSTRUCT:
				case ADD:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case ASTYPE:
				case AWAIT:
				case BY:
				case CHECKED:
				case DESCENDING:
				case EQUALS:
				case EXTERN:
				case FIXED:
				case FROM:
				case GROUP:
				case INIT:
				case INTO:
				case JOIN:
				case LET:
				case NOP:
				case OF:
				case ON:
				case ORDERBY:
				case OVERRIDE:
				case PARAMS:
				case REMOVE:
				case SELECT:
				case SWITCH:
				case UNCHECKED:
				case UNSAFE:
				case VAR:
				case VOLATILE:
				case WHEN:
				case WHERE:
				case YIELD:
				case REF:
				case CHAR:
				case DYNAMIC:
				case DECIMAL:
				case DATETIME:
				case CURRENCY:
				case BINARY:
				case NINT:
				case NUINT:
				case ASSIGNMENT:
				case EXPORTED:
				case NOSAVE:
				case READONLY:
				case SHARING:
				case SHARED:
				case OLEPUBLIC:
				case EXCLUDE:
				case THISACCESS:
				case HELPSTRING:
				case NOINIT:
				case EACH:
				case THEN:
				case FOX_M:
				case FOX_AND:
				case FOX_OR:
				case FOX_NOT:
				case FOX_XOR:
				case PIPE:
				case UDCSEP:
				case ID:
					{
					State = 3074;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
					case 1:
						{
						State = 3073; _localctx.P1 = Match(PIPE);
						}
						break;
					}
					State = 3077;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
						{
						State = 3076; _localctx.LambdaParamList = lambdaParameterList();
						}
					}

					State = 3080;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==PIPE) {
						{
						State = 3079; _localctx.P2 = Match(PIPE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3084; _localctx.lambda = Match(UDCSEP);
				State = 3085; _localctx.Code = codeblockCode();
				State = 3086; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_codeblockCode);
		try {
			State = 3097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3091;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					State = 3090; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3093; eos();
				State = 3094; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3096; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_lambdaParameterList);
		try {
			State = 3101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3099; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3100; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3103; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 3108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3104; Match(COMMA);
				State = 3105; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 3110;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3115;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3112;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
					case 1:
						{
						State = 3111; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 3114; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3117;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,437,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3119; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 3121; _localctx.Async = Match(ASYNC);
				}
			}

			State = 3124; _localctx.Delegate = Match(DELEGATE);
			State = 3130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3125; Match(LPAREN);
				State = 3127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (ID - 278)))) != 0)) {
					{
					State = 3126; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
				}

				State = 3129; Match(RPAREN);
				}
			}

			State = 3132; Match(LCURLY);
			State = 3133; _localctx.Code = codeblockCode();
			State = 3134; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3136; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 3141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3137; Match(COMMA);
				State = 3138; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 3143;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ParameterDeclModsContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3144; _localctx.Id = identifier();
			State = 3145; _localctx.Mod = parameterDeclMods();
			State = 3146; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3148; _localctx.From = fromClause();
			State = 3149; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3151; Match(FROM);
			State = 3152; _localctx.Id = identifier();
			State = 3155;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3153; Match(AS);
				State = 3154; _localctx.Type = typeName();
				}
			}

			State = 3157; Match(IN);
			State = 3158; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (FROM - 127)) | (1L << (JOIN - 127)) | (1L << (LET - 127)) | (1L << (ORDERBY - 127)) | (1L << (WHERE - 127)))) != 0)) {
				{
				{
				State = 3160; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 3165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3166; _localctx.SorG = selectOrGroupclause();
			State = 3168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				State = 3167; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public IToken W;
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IToken L;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public IToken O;
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IToken J;
		public IdentifierContext Id;
		public TypeNameContext Type;
		public IToken I;
		public ExpressionContext Expr;
		public IToken O;
		public ExpressionContext OnExpr;
		public IToken E;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_queryBodyClause);
		int _la;
		try {
			State = 3202;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3170; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3171; ((LetClauseContext)_localctx).L = Match(LET);
				State = 3172; ((LetClauseContext)_localctx).Id = identifier();
				State = 3173; ((LetClauseContext)_localctx).Op = assignoperator();
				State = 3174; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3176; ((WhereClauseContext)_localctx).W = Match(WHERE);
				State = 3177; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3178; ((JoinClauseContext)_localctx).J = Match(JOIN);
				State = 3179; ((JoinClauseContext)_localctx).Id = identifier();
				State = 3182;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3180; Match(AS);
					State = 3181; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 3184; ((JoinClauseContext)_localctx).I = Match(IN);
				State = 3185; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 3186; ((JoinClauseContext)_localctx).O = Match(ON);
				State = 3187; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 3188; ((JoinClauseContext)_localctx).E = Match(EQUALS);
				State = 3189; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 3191;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 3190; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3193; ((OrderbyClauseContext)_localctx).O = Match(ORDERBY);
				State = 3194; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 3199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3195; Match(COMMA);
					State = 3196; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 3201;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3204; _localctx.I = Match(INTO);
			State = 3205; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3207; _localctx.Expr = expression(0);
			State = 3209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 3208;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public IToken G;
		public ExpressionContext Expr;
		public IToken B;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public IToken S;
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_selectOrGroupclause);
		try {
			State = 3218;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3211; ((SelectClauseContext)_localctx).S = Match(SELECT);
				State = 3212; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3213; ((GroupClauseContext)_localctx).G = Match(GROUP);
				State = 3214; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 3215; ((GroupClauseContext)_localctx).B = Match(BY);
				State = 3216; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3220; _localctx.I = Match(INTO);
			State = 3221; _localctx.Id = identifier();
			State = 3222; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_identifier);
		try {
			State = 3228;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3224; Match(ID);
				}
				break;
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FIELD:
			case GLOBAL:
			case INHERIT:
			case INIT1:
			case INIT2:
			case INIT3:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INIT:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case YIELD:
			case REF:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case CURRENCY:
			case BINARY:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3225; keywordxs();
				}
				break;
			case ASSIGNMENT:
			case EXPORTED:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3226; keywordxpp();
				}
				break;
			case OLEPUBLIC:
			case EXCLUDE:
			case THISACCESS:
			case HELPSTRING:
			case NOINIT:
			case EACH:
			case THEN:
			case FOX_M:
			case FOX_AND:
			case FOX_OR:
			case FOX_NOT:
			case FOX_XOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3227; keywordfox();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_identifierString);
		try {
			State = 3235;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3230; Match(ID);
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3231; Match(STRING_CONST);
				}
				break;
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FIELD:
			case GLOBAL:
			case INHERIT:
			case INIT1:
			case INIT2:
			case INIT3:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INIT:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHEN:
			case WHERE:
			case YIELD:
			case REF:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case CURRENCY:
			case BINARY:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3232; keywordxs();
				}
				break;
			case ASSIGNMENT:
			case EXPORTED:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3233; keywordxpp();
				}
				break;
			case OLEPUBLIC:
			case EXCLUDE:
			case THISACCESS:
			case HELPSTRING:
			case NOINIT:
			case EACH:
			case THEN:
			case FOX_M:
			case FOX_AND:
			case FOX_OR:
			case FOX_NOT:
			case FOX_XOR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3234; keywordfox();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseFuncContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public XbaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseFunc(this);
		}
	}

	[RuleVersion(0)]
	public XbaseFuncContext xbaseFunc() {
		XbaseFuncContext _localctx = new XbaseFuncContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_xbaseFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3237;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (ARRAY - 152)) | (1L << (DATE - 152)) | (1L << (DATETIME - 152)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (ARRAY - 152)) | (1L << (CODEBLOCK - 152)) | (1L << (DATE - 152)) | (1L << (FLOAT - 152)) | (1L << (PSZ - 152)) | (1L << (SYMBOL - 152)) | (1L << (USUAL - 152)) | (1L << (CURRENCY - 152)) | (1L << (BINARY - 152)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3241;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (BYTE - 153)) | (1L << (DWORD - 153)) | (1L << (INT - 153)) | (1L << (LOGIC - 153)) | (1L << (LONGINT - 153)) | (1L << (OBJECT - 153)) | (1L << (PTR - 153)) | (1L << (REAL4 - 153)) | (1L << (REAL8 - 153)) | (1L << (SHORTINT - 153)) | (1L << (STRING - 153)) | (1L << (VOID - 153)) | (1L << (WORD - 153)) | (1L << (CHAR - 153)) | (1L << (INT64 - 153)) | (1L << (UINT64 - 153)) | (1L << (DYNAMIC - 153)) | (1L << (DECIMAL - 153)) | (1L << (DATETIME - 153)) | (1L << (NINT - 153)) | (1L << (NUINT - 153)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode BINARY_CONST() { return GetToken(XSharpParser.BINARY_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode INVALID_NUMBER() { return GetToken(XSharpParser.INVALID_NUMBER, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode DATETIME_CONST() { return GetToken(XSharpParser.DATETIME_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3243;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NIL - 220)) | (1L << (NULL - 220)) | (1L << (NULL_ARRAY - 220)) | (1L << (NULL_CODEBLOCK - 220)) | (1L << (NULL_DATE - 220)) | (1L << (NULL_OBJECT - 220)) | (1L << (NULL_PSZ - 220)) | (1L << (NULL_PTR - 220)) | (1L << (NULL_STRING - 220)) | (1L << (NULL_SYMBOL - 220)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (FALSE_CONST - 301)) | (1L << (TRUE_CONST - 301)) | (1L << (HEX_CONST - 301)) | (1L << (BIN_CONST - 301)) | (1L << (INT_CONST - 301)) | (1L << (DATE_CONST - 301)) | (1L << (DATETIME_CONST - 301)) | (1L << (REAL_CONST - 301)) | (1L << (INVALID_NUMBER - 301)) | (1L << (SYMBOL_CONST - 301)) | (1L << (CHAR_CONST - 301)) | (1L << (STRING_CONST - 301)) | (1L << (ESCAPED_STRING_CONST - 301)) | (1L << (INTERPOLATED_STRING_CONST - 301)) | (1L << (INCOMPLETE_STRING_CONST - 301)) | (1L << (BRACKETED_STRING_CONST - 301)) | (1L << (BINARY_CONST - 301)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvoContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode WHILE() { return GetToken(XSharpParser.WHILE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode VO_AND() { return GetToken(XSharpParser.VO_AND, 0); }
		public ITerminalNode VO_NOT() { return GetToken(XSharpParser.VO_NOT, 0); }
		public ITerminalNode VO_OR() { return GetToken(XSharpParser.VO_OR, 0); }
		public ITerminalNode VO_XOR() { return GetToken(XSharpParser.VO_XOR, 0); }
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode CATCH() { return GetToken(XSharpParser.CATCH, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public KeywordvoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvo(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvoContext keywordvo() {
		KeywordvoContext _localctx = new KeywordvoContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_keywordvo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3245;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << AS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << DLL) | (1L << DO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FOR) | (1L << FUNCTION) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << IS) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << METHOD) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (SUPER - 66)) | (1L << (TYPEOF - 66)) | (1L << (WHILE - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (DESTRUCTOR - 66)) | (1L << (REPEAT - 66)) | (1L << (TRY - 66)))) != 0) || _la==PTR || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (VO_NOT - 257)) | (1L << (VO_AND - 257)) | (1L << (VO_OR - 257)) | (1L << (VO_XOR - 257)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public KeywordxsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxs(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxsContext keywordxs() {
		KeywordxsContext _localctx = new KeywordxsContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_keywordxs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3247;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxppContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public KeywordxppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxpp(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxppContext keywordxpp() {
		KeywordxppContext _localctx = new KeywordxppContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_keywordxpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3249;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (ASSIGNMENT - 187)) | (1L << (EXPORTED - 187)) | (1L << (NOSAVE - 187)) | (1L << (READONLY - 187)) | (1L << (SHARING - 187)) | (1L << (SHARED - 187)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3251; _localctx.Attributes = attributes();
				}
			}

			State = 3255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC || _la==FREEZE || _la==FINAL) {
				{
				State = 3254; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 3257; _localctx.C = Match(CLASS);
			State = 3259;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 3258; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3261; _localctx.Id = identifier();
			State = 3271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 3262;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3263; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 3268;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3264; Match(COMMA);
					State = 3265; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 3270;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 3273; Match(IMPLEMENTS);
				State = 3274; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 3279;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3275; Match(COMMA);
					State = 3276; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 3281;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3284; _localctx.e = eos();
			State = 3288;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (OVERRIDE - 97)) | (1L << (VAR - 97)))) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (DEFERRED - 188)) | (1L << (EXPORTED - 188)) | (1L << (FINAL - 188)) | (1L << (INLINE - 188)) | (1L << (INTRODUCE - 188)) | (1L << (SYNC - 188)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (LBRKT - 286)) | (1L << (BRACKETED_STRING_CONST - 286)) | (1L << (PRAGMA - 286)))) != 0)) {
				{
				{
				State = 3285; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 3290;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3291; Match(ENDCLASS);
			State = 3292; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _tset10705;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3294;
				_localctx._tset10705 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==STATIC || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset10705 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset10705);
				}
				}
				State = 3297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STATIC || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XpppragmaContext : XppclassMemberContext {
		public PragmaContext Member;
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public XpppragmaContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXpppragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXpppragma(this);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XpppropertyContext Member;
		public XpppropertyContext xppproperty() {
			return GetRuleContext<XpppropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_xppclassMember);
		try {
			State = 3305;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3299; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3300; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3301; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3302; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3303; ((XppclspropertyContext)_localctx).Member = xppproperty();
				}
				break;

			case 6:
				_localctx = new XpppragmaContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3304; ((XpppragmaContext)_localctx).Member = pragma();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307; _localctx.Vis = xppvisibility();
			State = 3308; Match(COLON);
			State = 3309; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3311;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (HIDDEN - 34)) | (1L << (PRIVATE - 34)) | (1L << (PROTECTED - 34)) | (1L << (PUBLIC - 34)) | (1L << (INTERNAL - 34)))) != 0) || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public XppdeclareModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppdeclareModifiersContext xppdeclareModifiers() {
			return GetRuleContext<XppdeclareModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (OVERRIDE - 137)) | (1L << (DEFERRED - 137)) | (1L << (FINAL - 137)) | (1L << (INTRODUCE - 137)) | (1L << (SYNC - 137)))) != 0)) {
				{
				State = 3313; _localctx.Modifiers = xppdeclareModifiers();
				}
			}

			State = 3316; Match(METHOD);
			State = 3317; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 3326;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
			case IN:
				{
				State = 3318; xppisin();
				}
				break;
			case COMMA:
			case EOS:
				{
				State = 3323;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3319; Match(COMMA);
					State = 3320; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					}
					}
					State = 3325;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3328; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext SuperClass;
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_xppisin);
		int _la;
		try {
			State = 3338;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3330; Match(IS);
				State = 3331; _localctx.Id = identifier();
				State = 3334;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN) {
					{
					State = 3332; Match(IN);
					State = 3333; _localctx.SuperClass = identifier();
					}
				}

				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3336; Match(IN);
				State = 3337; _localctx.SuperClass = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _tset10916;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public XppdeclareModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareModifiersContext xppdeclareModifiers() {
		XppdeclareModifiersContext _localctx = new XppdeclareModifiersContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_xppdeclareModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3340;
				_localctx._tset10916 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (OVERRIDE - 137)) | (1L << (DEFERRED - 137)) | (1L << (FINAL - 137)) | (1L << (INTRODUCE - 137)) | (1L << (SYNC - 137)))) != 0)) ) {
					_localctx._tset10916 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset10916);
				}
				}
				State = 3343;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (OVERRIDE - 137)) | (1L << (DEFERRED - 137)) | (1L << (FINAL - 137)) | (1L << (INTRODUCE - 137)) | (1L << (SYNC - 137)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3346;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3345; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3348; Match(VAR);
			State = 3349; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3362;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
			case IN:
				{
				State = 3350; _localctx.Is = xppisin();
				}
				break;
			case AS:
			case ASSIGNMENT:
			case NOSAVE:
			case READONLY:
			case SHARED:
			case COMMA:
			case EOS:
				{
				{
				State = 3355;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3351; Match(COMMA);
					State = 3352; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 3357;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3360;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3358; Match(AS);
					State = 3359; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3365;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 3364; _localctx.Shared = Match(SHARED);
				}
			}

			State = 3368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 3367; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 3371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3370; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 3374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 3373; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 3376; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3378; Match(ASSIGNMENT);
			State = 3379; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XpppropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Access;
		public IToken Assign;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public EosContext end;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XpppropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppproperty(this);
		}
	}

	[RuleVersion(0)]
	public XpppropertyContext xppproperty() {
		XpppropertyContext _localctx = new XpppropertyContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_xppproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3381; _localctx.Attributes = attributes();
				}
			}

			State = 3392;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ACCESS:
				{
				State = 3384; _localctx.Access = Match(ACCESS);
				State = 3386;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGN) {
					{
					State = 3385; _localctx.Assign = Match(ASSIGN);
					}
				}

				}
				break;
			case ASSIGN:
				{
				State = 3388; _localctx.Assign = Match(ASSIGN);
				State = 3390;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ACCESS) {
					{
					State = 3389; _localctx.Access = Match(ACCESS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3394; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3397; _localctx.M = Match(METHOD);
			State = 3398; _localctx.Id = identifier();
			State = 3401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3399; Match(VAR);
				State = 3400; _localctx.VarName = identifier();
				}
			}

			State = 3405;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3403; Match(AS);
				State = 3404; _localctx.Type = datatype();
				}
			}

			State = 3407; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken MethodType;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext ClassId;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3409; _localctx.Attributes = attributes();
				}
			}

			State = 3413;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3412;
				_localctx.MethodType = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx.MethodType = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 3416;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3415; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3418; _localctx.M = Match(METHOD);
			State = 3422;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				State = 3419; _localctx.ClassId = identifier();
				State = 3420; Match(COLON);
				}
				break;
			}
			State = 3424; _localctx.Id = identifier();
			State = 3426;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3425; _localctx.ParamList = parameterList();
				}
			}

			State = 3430;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3428; Match(AS);
				State = 3429; _localctx.Type = datatype();
				}
			}

			State = 3434;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 3432; Match(UDCSEP);
				State = 3433; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 3436; _localctx.end = eos();
			State = 3437; _localctx.StmtBlk = statementBlock();
			State = 3441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 3438; Match(END);
				State = 3439; Match(METHOD);
				State = 3440; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken I;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3443; _localctx.Attributes = attributes();
				}
			}

			State = 3446; _localctx.I = Match(INLINE);
			State = 3448;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3447; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3450; Match(METHOD);
			State = 3451; _localctx.Id = identifier();
			State = 3453;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3452; _localctx.ParamList = parameterList();
				}
			}

			State = 3457;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3455; Match(AS);
				State = 3456; _localctx.Type = datatype();
				}
			}

			State = 3461;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 3459; Match(UDCSEP);
				State = 3460; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 3463; _localctx.end = eos();
			State = 3464; _localctx.StmtBlk = statementBlock();
			State = 3468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 3465; Match(END);
				State = 3466; Match(METHOD);
				State = 3467; eos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _CLASS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _tset11352;
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3471;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3470;
				_localctx._tset11352 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC) ) {
					_localctx._tset11352 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11352);
				}
				}
				State = 3473;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordfoxContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public KeywordfoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordfox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordfox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordfox(this);
		}
	}

	[RuleVersion(0)]
	public KeywordfoxContext keywordfox() {
		KeywordfoxContext _localctx = new KeywordfoxContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_keywordfox);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3475;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (OLEPUBLIC - 202)) | (1L << (EXCLUDE - 202)) | (1L << (THISACCESS - 202)) | (1L << (HELPSTRING - 202)) | (1L << (NOINIT - 202)) | (1L << (EACH - 202)) | (1L << (THEN - 202)) | (1L << (FOX_M - 202)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken D;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public IdentifierContext Classlib;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public FoxclassmemberContext _foxclassmember;
		public IList<FoxclassmemberContext> _Members = new List<FoxclassmemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] DEFINE() { return GetTokens(XSharpParser.DEFINE); }
		public ITerminalNode DEFINE(int i) {
			return GetToken(XSharpParser.DEFINE, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ENDDEFINE() { return GetToken(XSharpParser.ENDDEFINE, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public FoxclassmemberContext[] foxclassmember() {
			return GetRuleContexts<FoxclassmemberContext>();
		}
		public FoxclassmemberContext foxclassmember(int i) {
			return GetRuleContext<FoxclassmemberContext>(i);
		}
		public FoxclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclass(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassContext foxclass() {
		FoxclassContext _localctx = new FoxclassContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_foxclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3477; _localctx.Attributes = attributes();
				}
			}

			State = 3480; _localctx.D = Match(DEFINE);
			State = 3482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3481; _localctx.Modifiers = classModifiers();
				}
			}

			State = 3484; Match(CLASS);
			State = 3486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				State = 3485; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3488; _localctx.Id = identifier();
			State = 3490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3489; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3492; Match(AS);
				State = 3493; _localctx.BaseType = datatype();
				}
			}

			State = 3498;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 3496; Match(OF);
				State = 3497; _localctx.Classlib = identifier();
				}
			}

			State = 3503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3500; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3505;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3507;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OLEPUBLIC) {
				{
				State = 3506; Match(OLEPUBLIC);
				}
			}

			State = 3509; _localctx.e = eos();
			State = 3513;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SEQUENCE) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (NOSAVE - 195)) | (1L << (READONLY - 195)) | (1L << (SHARING - 195)) | (1L << (SHARED - 195)) | (1L << (OLEPUBLIC - 195)) | (1L << (EXCLUDE - 195)) | (1L << (THISACCESS - 195)) | (1L << (HELPSTRING - 195)) | (1L << (DIMENSION - 195)) | (1L << (NOINIT - 195)) | (1L << (EACH - 195)) | (1L << (THEN - 195)) | (1L << (FOX_M - 195)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (FOX_AND - 278)) | (1L << (FOX_OR - 278)) | (1L << (FOX_NOT - 278)) | (1L << (FOX_XOR - 278)) | (1L << (LBRKT - 278)) | (1L << (BRACKETED_STRING_CONST - 278)) | (1L << (ID - 278)) | (1L << (PRAGMA - 278)))) != 0)) {
				{
				{
				State = 3510; _localctx._foxclassmember = foxclassmember();
				_localctx._Members.Add(_localctx._foxclassmember);
				}
				}
				State = 3515;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3519;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDDEFINE:
				{
				State = 3516; Match(ENDDEFINE);
				}
				break;
			case END:
				{
				State = 3517; Match(END);
				State = 3518; Match(DEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3521; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassmemberContext : XSharpParserRuleContext {
		public FoxclassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassmember; } }
	 
		public FoxclassmemberContext() { }
		public virtual void CopyFrom(FoxclassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoximplementsContext : FoxclassmemberContext {
		public FoximplementsclauseContext Member;
		public FoximplementsclauseContext foximplementsclause() {
			return GetRuleContext<FoximplementsclauseContext>(0);
		}
		public FoximplementsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplements(this);
		}
	}
	public partial class FoxaddobjectContext : FoxclassmemberContext {
		public FoxaddobjectclauseContext Member;
		public FoxaddobjectclauseContext foxaddobjectclause() {
			return GetRuleContext<FoxaddobjectclauseContext>(0);
		}
		public FoxaddobjectContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobject(this);
		}
	}
	public partial class FoxclsvarinitContext : FoxclassmemberContext {
		public FoxfieldContext Member;
		public FoxfieldContext foxfield() {
			return GetRuleContext<FoxfieldContext>(0);
		}
		public FoxclsvarinitContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvarinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvarinit(this);
		}
	}
	public partial class FoxclsmethodContext : FoxclassmemberContext {
		public FoxmethodContext Member;
		public FoxmethodContext foxmethod() {
			return GetRuleContext<FoxmethodContext>(0);
		}
		public FoxclsmethodContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsmethod(this);
		}
	}
	public partial class FoxclsdtorContext : FoxclassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FoxclsdtorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsdtor(this);
		}
	}
	public partial class FoxclsvarsContext : FoxclassmemberContext {
		public FoxclassvarsContext Member;
		public FoxclassvarsContext foxclassvars() {
			return GetRuleContext<FoxclassvarsContext>(0);
		}
		public FoxclsvarsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvars(this);
		}
	}
	public partial class FoxpemcomContext : FoxclassmemberContext {
		public FoxpemcomattribContext Member;
		public FoxpemcomattribContext foxpemcomattrib() {
			return GetRuleContext<FoxpemcomattribContext>(0);
		}
		public FoxpemcomContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcom(this);
		}
	}
	public partial class FoxclsctorContext : FoxclassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FoxclsctorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsctor(this);
		}
	}
	public partial class FoxpragmaContext : FoxclassmemberContext {
		public PragmaContext Member;
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public FoxpragmaContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpragma(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassmemberContext foxclassmember() {
		FoxclassmemberContext _localctx = new FoxclassmemberContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_foxclassmember);
		try {
			State = 3532;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
			case 1:
				_localctx = new FoxclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3523; ((FoxclsvarsContext)_localctx).Member = foxclassvars();
				}
				break;

			case 2:
				_localctx = new FoxclsvarinitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3524; ((FoxclsvarinitContext)_localctx).Member = foxfield();
				}
				break;

			case 3:
				_localctx = new FoxclsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3525; ((FoxclsmethodContext)_localctx).Member = foxmethod();
				}
				break;

			case 4:
				_localctx = new FoximplementsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3526; ((FoximplementsContext)_localctx).Member = foximplementsclause();
				}
				break;

			case 5:
				_localctx = new FoxaddobjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3527; ((FoxaddobjectContext)_localctx).Member = foxaddobjectclause();
				}
				break;

			case 6:
				_localctx = new FoxpemcomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3528; ((FoxpemcomContext)_localctx).Member = foxpemcomattrib();
				}
				break;

			case 7:
				_localctx = new FoxclsctorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3529; ((FoxclsctorContext)_localctx).Member = constructor();
				}
				break;

			case 8:
				_localctx = new FoxclsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3530; ((FoxclsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 9:
				_localctx = new FoxpragmaContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 3531; ((FoxpragmaContext)_localctx).Member = pragma();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken HelpString;
		public ExpressionContext HelpText;
		public IToken ThisAccess;
		public IdentifierContext MemberId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmethod(this);
		}
	}

	[RuleVersion(0)]
	public FoxmethodContext foxmethod() {
		FoxmethodContext _localctx = new FoxmethodContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_foxmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3534; _localctx.Attributes = attributes();
				}
			}

			State = 3538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3537; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 3540; _localctx.T = funcproctype();
			State = 3541; _localctx.Sig = signature();
			State = 3544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==HELPSTRING) {
				{
				State = 3542; _localctx.HelpString = Match(HELPSTRING);
				State = 3543; _localctx.HelpText = expression(0);
				}
			}

			State = 3551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THISACCESS) {
				{
				State = 3546; _localctx.ThisAccess = Match(THISACCESS);
				State = 3547; Match(LPAREN);
				State = 3548; _localctx.MemberId = identifier();
				State = 3549; Match(RPAREN);
				}
			}

			State = 3553; _localctx.end = eos();
			State = 3554; _localctx.StmtBlk = statementBlock();
			State = 3559;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				State = 3555; Match(END);
				State = 3556; _localctx.T2 = funcproctype();
				State = 3557; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public DatatypeContext DataType;
		public EosContext end;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclassvars(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassvarsContext foxclassvars() {
		FoxclassvarsContext _localctx = new FoxclassvarsContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_foxclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3562;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3561; _localctx.Attributes = attributes();
				}
			}

			State = 3565;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				State = 3564; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3568;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 3567; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3570; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3571; Match(COMMA);
				State = 3572; _localctx._identifier = identifier();
				_localctx._Vars.Add(_localctx._identifier);
				}
				}
				State = 3577;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3580;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3578; Match(AS);
				State = 3579; _localctx.DataType = datatype();
				}
			}

			State = 3582; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldContext : XSharpParserRuleContext {
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public FoxfieldinitializerContext F;
		public EosContext end;
		public FoxfieldinitializerContext foxfieldinitializer() {
			return GetRuleContext<FoxfieldinitializerContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public FoxfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfield(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldContext foxfield() {
		FoxfieldContext _localctx = new FoxfieldContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_foxfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3585;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				State = 3584; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				State = 3587; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3590; _localctx.F = foxfieldinitializer();
			State = 3591; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldinitializerContext : XSharpParserRuleContext {
		public NameContext Name;
		public ExpressionContext Expr;
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxfieldinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfieldinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfieldinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfieldinitializer(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldinitializerContext foxfieldinitializer() {
		FoxfieldinitializerContext _localctx = new FoxfieldinitializerContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_foxfieldinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3593; _localctx.Name = name(0);
			State = 3594; assignoperator();
			State = 3595; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoximplementsclauseContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IToken Excl;
		public ExpressionContext Library;
		public EosContext end;
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoximplementsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foximplementsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplementsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplementsclause(this);
		}
	}

	[RuleVersion(0)]
	public FoximplementsclauseContext foximplementsclause() {
		FoximplementsclauseContext _localctx = new FoximplementsclauseContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_foximplementsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3597; Match(IMPLEMENTS);
			State = 3598; _localctx.Type = datatype();
			State = 3600;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXCLUDE) {
				{
				State = 3599; _localctx.Excl = Match(EXCLUDE);
				}
			}

			State = 3604;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3602; Match(IN);
				State = 3603; _localctx.Library = expression(0);
				}
			}

			State = 3606; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxaddobjectclauseContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken NoInit;
		public FoxfieldinitializerContext _foxfieldinitializer;
		public IList<FoxfieldinitializerContext> _FieldsInits = new List<FoxfieldinitializerContext>();
		public EosContext end;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public FoxfieldinitializerContext[] foxfieldinitializer() {
			return GetRuleContexts<FoxfieldinitializerContext>();
		}
		public FoxfieldinitializerContext foxfieldinitializer(int i) {
			return GetRuleContext<FoxfieldinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxaddobjectclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxaddobjectclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobjectclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobjectclause(this);
		}
	}

	[RuleVersion(0)]
	public FoxaddobjectclauseContext foxaddobjectclause() {
		FoxaddobjectclauseContext _localctx = new FoxaddobjectclauseContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_foxaddobjectclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3608; _localctx.Attributes = attributes();
				}
			}

			State = 3611; Match(ADD);
			State = 3612; Match(OBJECT);
			State = 3614;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				State = 3613; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3616; _localctx.Id = identifier();
			State = 3617; Match(AS);
			State = 3618; _localctx.Type = datatype();
			State = 3620;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOINIT) {
				{
				State = 3619; _localctx.NoInit = Match(NOINIT);
				}
			}

			State = 3631;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 3622; Match(WITH);
				State = 3623; _localctx._foxfieldinitializer = foxfieldinitializer();
				_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
				State = 3628;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3624; Match(COMMA);
					State = 3625; _localctx._foxfieldinitializer = foxfieldinitializer();
					_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
					}
					}
					State = 3630;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3633; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxpemcomattribContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public FoxpemcomattribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxpemcomattrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcomattrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcomattrib(this);
		}
	}

	[RuleVersion(0)]
	public FoxpemcomattribContext foxpemcomattrib() {
		FoxpemcomattribContext _localctx = new FoxpemcomattribContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_foxpemcomattrib);
		int _la;
		try {
			State = 3665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,531,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3635; Match(DIMENSION);
				State = 3636; _localctx.Id = identifier();
				State = 3637; Match(LBRKT);
				State = 3638; expression(0);
				State = 3641;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3639; Match(COMMA);
					State = 3640; expression(0);
					}
				}

				State = 3643; Match(RBRKT);
				State = 3644; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3646; Match(DIMENSION);
				State = 3647; _localctx.Id = identifier();
				State = 3648; Match(LPAREN);
				State = 3649; expression(0);
				State = 3652;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3650; Match(COMMA);
					State = 3651; expression(0);
					}
				}

				State = 3654; Match(RPAREN);
				State = 3655; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3657; _localctx.Id = identifier();
				State = 3658; Match(LBRKT);
				State = 3659; expression(0);
				State = 3660; Match(RBRKT);
				State = 3661; assignoperator();
				State = 3662; expression(0);
				State = 3663; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return entity_sempred((EntityContext)_localctx, predIndex);

		case 45: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 54: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 78: return statement_sempred((StatementContext)_localctx, predIndex);

		case 86: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 99: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 101: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 102: return aliasExpression_sempred((AliasExpressionContext)_localctx, predIndex);

		case 113: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 115: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 116: return name_sempred((NameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !IsXPP;

		case 1: return IsXPP;
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return InputStream.La(2) != REMOVE;

		case 3: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return InputStream.La(2) != SET && InputStream.La(2) != INIT;

		case 5: return InputStream.La(2) != GET && InputStream.La(2) != UDCSEP;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return !IsFox;

		case 7: return IsFox;

		case 8: return validExpressionStmt();

		case 9: return validExpressionStmt();

		case 10: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return IsTypeCastAllowed() ;

		case 13: return Precpred(_ctx, 16);

		case 14: return Precpred(_ctx, 15);

		case 15: return Precpred(_ctx, 14);

		case 16: return Precpred(_ctx, 13);

		case 17: return Precpred(_ctx, 12);

		case 18: return Precpred(_ctx, 11);

		case 19: return Precpred(_ctx, 10);

		case 20: return Precpred(_ctx, 9);

		case 21: return Precpred(_ctx, 8);

		case 22: return Precpred(_ctx, 6);

		case 23: return Precpred(_ctx, 5);

		case 24: return Precpred(_ctx, 4);

		case 25: return Precpred(_ctx, 3);

		case 26: return Precpred(_ctx, 2);

		case 27: return Precpred(_ctx, 32);

		case 28: return Precpred(_ctx, 30);

		case 29: return Precpred(_ctx, 29);

		case 30: return Precpred(_ctx, 28);

		case 31: return Precpred(_ctx, 27);

		case 32: return Precpred(_ctx, 24);

		case 33: return Precpred(_ctx, 23);

		case 34: return Precpred(_ctx, 21);

		case 35: return Precpred(_ctx, 18);

		case 36: return Precpred(_ctx, 17);
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(_ctx, 3);

		case 38: return Precpred(_ctx, 7);

		case 39: return Precpred(_ctx, 6);

		case 40: return Precpred(_ctx, 5);

		case 41: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool aliasExpression_sempred(AliasExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return InputStream.La(4) != LPAREN;

		case 43: return InputStream.La(6) != LPAREN;
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x161\xE56\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x171"+
		"\n\x2\f\x2\xE\x2\x174\v\x2\x3\x2\a\x2\x177\n\x2\f\x2\xE\x2\x17A\v\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x181\n\x3\x3\x4\x3\x4\x5\x4\x185\n\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\a\x5\x18B\n\x5\f\x5\xE\x5\x18E\v\x5\x3\x5\x3"+
		"\x5\x3\x6\a\x6\x193\n\x6\f\x6\xE\x6\x196\v\x6\x3\x6\x3\x6\a\x6\x19A\n"+
		"\x6\f\x6\xE\x6\x19D\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1BC\n\a\x3\b\x6\b\x1BF\n\b\r\b"+
		"\xE\b\x1C0\x3\t\x3\t\a\t\x1C5\n\t\f\t\xE\t\x1C8\v\t\x3\t\x3\t\x3\n\x5"+
		"\n\x1CD\n\n\x3\n\x5\n\x1D0\n\n\x3\n\x3\n\x3\n\x5\n\x1D5\n\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1DE\n\n\x3\v\x3\v\x3\f\x3\f\x5\f\x1E4"+
		"\n\f\x3\f\x5\f\x1E7\n\f\x3\f\x3\f\x5\f\x1EB\n\f\x3\f\a\f\x1EE\n\f\f\f"+
		"\xE\f\x1F1\v\f\x3\f\x5\f\x1F4\n\f\x3\f\x3\f\x5\f\x1F8\n\f\x3\r\x3\r\x5"+
		"\r\x1FC\n\r\x3\r\x3\r\x5\r\x200\n\r\x3\xE\x3\xE\x3\xF\x5\xF\x205\n\xF"+
		"\x3\xF\x5\xF\x208\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x210"+
		"\n\xF\x3\xF\x5\xF\x213\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x219\n\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x5\xF\x21F\n\xF\x3\xF\x5\xF\x222\n\xF\x3\xF\x3\xF"+
		"\x5\xF\x226\n\xF\x5\xF\x228\n\xF\x3\xF\x5\xF\x22B\n\xF\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x11\x5\x11\x232\n\x11\x3\x11\x5\x11\x235\n\x11\x3\x11\x3"+
		"\x11\x5\x11\x239\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x240"+
		"\n\x11\x3\x11\x3\x11\x5\x11\x244\n\x11\x3\x11\x3\x11\x3\x11\a\x11\x249"+
		"\n\x11\f\x11\xE\x11\x24C\v\x11\x5\x11\x24E\n\x11\x3\x11\x3\x11\x3\x12"+
		"\x5\x12\x253\n\x12\x3\x12\x3\x12\x5\x12\x257\n\x12\x3\x12\x5\x12\x25A"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x25F\n\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\a\x14\x267\n\x14\f\x14\xE\x14\x26A\v\x14\x5\x14\x26C"+
		"\n\x14\x3\x14\x3\x14\x3\x15\x5\x15\x271\n\x15\x3\x15\x5\x15\x274\n\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x27A\n\x15\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x27F\n\x15\x3\x15\x5\x15\x282\n\x15\x3\x16\x3\x16\x5\x16\x286\n\x16"+
		"\x3\x17\a\x17\x289\n\x17\f\x17\xE\x17\x28C\v\x17\x3\x18\x6\x18\x28F\n"+
		"\x18\r\x18\xE\x18\x290\x3\x19\x3\x19\x5\x19\x295\n\x19\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\x29A\n\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x5\x1A\x2A0\n\x1A\x3"+
		"\x1A\x5\x1A\x2A3\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2A7\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\a\x1A\x2AC\n\x1A\f\x1A\xE\x1A\x2AF\v\x1A\x3\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x2B4\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2B8\n\x1A\x3\x1A\x3\x1A\x3\x1A\a"+
		"\x1A\x2BD\n\x1A\f\x1A\xE\x1A\x2C0\v\x1A\x3\x1A\x3\x1A\x5\x1A\x2C4\n\x1A"+
		"\x3\x1B\x5\x1B\x2C7\n\x1B\x3\x1B\x5\x1B\x2CA\n\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2CE\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2D3\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2DC\n\x1B\x3\x1C\x3\x1C\x3\x1D\x5"+
		"\x1D\x2E1\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2E9"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x2EE\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2F2"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2F7\n\x1E\x3\x1E\x3\x1E\x6\x1E\x2FB"+
		"\n\x1E\r\x1E\xE\x1E\x2FC\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x302\n\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x30C\n\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x314\n\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x318\n\x1F\x3 \x5 \x31B\n \x3 \x3 \x5 \x31F\n \x3 \x3 \x3 \x6"+
		" \x324\n \r \xE \x325\x3 \x3 \x3 \x5 \x32B\n \x3!\x6!\x32E\n!\r!\xE!\x32F"+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x337\n\"\f\"\xE\"\x33A\v\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3#\x5#\x341\n#\x3#\x5#\x344\n#\x3#\x3#\x5#\x348\n#\x3#\x3#\x5"+
		"#\x34C\n#\x3#\x3#\x5#\x350\n#\x3#\x3#\a#\x354\n#\f#\xE#\x357\v#\x3#\a"+
		"#\x35A\n#\f#\xE#\x35D\v#\x3#\x3#\a#\x361\n#\f#\xE#\x364\v#\x3#\x3#\x3"+
		"#\x3#\x3$\x5$\x36B\n$\x3$\x5$\x36E\n$\x3$\x3$\x5$\x372\n$\x3$\x3$\x5$"+
		"\x376\n$\x3$\x3$\x5$\x37A\n$\x3$\x3$\x3$\x3$\a$\x380\n$\f$\xE$\x383\v"+
		"$\x5$\x385\n$\x3$\a$\x388\n$\f$\xE$\x38B\v$\x3$\x3$\a$\x38F\n$\f$\xE$"+
		"\x392\v$\x3$\x3$\x3$\x3$\x3%\x6%\x399\n%\r%\xE%\x39A\x3&\x3&\x3&\x3&\x5"+
		"&\x3A1\n&\x3&\a&\x3A4\n&\f&\xE&\x3A7\v&\x3&\x3&\x3\'\x5\'\x3AC\n\'\x3"+
		"\'\x5\'\x3AF\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\a(\x3B9\n(\f(\xE(\x3BC"+
		"\v(\x3)\x3)\x3)\x3)\x3)\x5)\x3C3\n)\x3*\x5*\x3C6\n*\x3*\x5*\x3C9\n*\x3"+
		"*\x3*\x5*\x3CD\n*\x3*\x3*\x5*\x3D1\n*\x3*\x3*\x3*\x3*\a*\x3D7\n*\f*\xE"+
		"*\x3DA\v*\x5*\x3DC\n*\x3*\a*\x3DF\n*\f*\xE*\x3E2\v*\x3*\x3*\a*\x3E6\n"+
		"*\f*\xE*\x3E9\v*\x3*\x3*\x3*\x3*\x3+\x5+\x3F0\n+\x3+\x5+\x3F3\n+\x3+\x3"+
		"+\x5+\x3F7\n+\x3+\x3+\x5+\x3FB\n+\x3+\x5+\x3FE\n+\x3+\x3+\x5+\x402\n+"+
		"\x3+\a+\x405\n+\f+\xE+\x408\v+\x3+\x3+\x3,\x5,\x40D\n,\x3,\x5,\x410\n"+
		",\x3,\x3,\x5,\x414\n,\x3,\x3,\x3,\x5,\x419\n,\x3,\x3,\x6,\x41D\n,\r,\xE"+
		",\x41E\x3,\x3,\x5,\x423\n,\x3,\x3,\x3-\x5-\x428\n-\x3-\x5-\x42B\n-\x3"+
		"-\x3-\x3-\x3-\x5-\x431\n-\x3-\x3-\x3.\x5.\x436\n.\x3.\x5.\x439\n.\x3."+
		"\x3.\x5.\x43D\n.\x3.\x3.\x3.\x5.\x442\n.\x3.\x3.\x6.\x446\n.\r.\xE.\x447"+
		"\x3.\x3.\x3.\x3.\x6.\x44E\n.\r.\xE.\x44F\x3.\x3.\x5.\x454\n.\x3.\x3.\x5"+
		".\x458\n.\x3/\x5/\x45B\n/\x3/\x5/\x45E\n/\x3/\x3/\x3/\x5/\x463\n/\x3/"+
		"\x3/\x3/\x5/\x468\n/\x3/\x5/\x46B\n/\x3\x30\x5\x30\x46E\n\x30\x3\x30\x5"+
		"\x30\x471\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x478\n\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x482\n\x30"+
		"\x3\x30\x3\x30\x3\x30\x5\x30\x487\n\x30\x3\x30\x3\x30\x3\x31\x5\x31\x48C"+
		"\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\a\x31\x492\n\x31\f\x31\xE\x31\x495"+
		"\v\x31\x3\x31\x3\x31\x3\x32\x6\x32\x49A\n\x32\r\x32\xE\x32\x49B\x3\x33"+
		"\x5\x33\x49F\n\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x4A6\n\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x4AB\n\x33\x3\x33\x3\x33\x5\x33\x4AF\n\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x6\x34\x4B5\n\x34\r\x34\xE\x34\x4B6\x3\x34"+
		"\x3\x34\x3\x34\x6\x34\x4BC\n\x34\r\x34\xE\x34\x4BD\x3\x34\x5\x34\x4C1"+
		"\n\x34\x3\x35\x5\x35\x4C4\n\x35\x3\x35\x5\x35\x4C7\n\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x5\x35\x4CD\n\x35\x3\x35\x5\x35\x4D0\n\x35\x3\x35\x5\x35"+
		"\x4D3\n\x35\x3\x35\x3\x35\x5\x35\x4D7\n\x35\x3\x35\x3\x35\a\x35\x4DB\n"+
		"\x35\f\x35\xE\x35\x4DE\v\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4E3\n\x35\x3"+
		"\x35\x3\x35\x6\x35\x4E7\n\x35\r\x35\xE\x35\x4E8\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x6\x35\x4EF\n\x35\r\x35\xE\x35\x4F0\x3\x35\x3\x35\x5\x35\x4F5\n\x35"+
		"\x3\x35\x3\x35\x5\x35\x4F9\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x4FF"+
		"\n\x36\f\x36\xE\x36\x502\v\x36\x5\x36\x504\n\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\a\x36\x50B\n\x36\f\x36\xE\x36\x50E\v\x36\x5\x36\x510\n"+
		"\x36\x3\x36\x5\x36\x513\n\x36\x3\x37\x5\x37\x516\n\x37\x3\x37\x5\x37\x519"+
		"\n\x37\x3\x37\x3\x37\x3\x38\x5\x38\x51E\n\x38\x3\x38\x5\x38\x521\n\x38"+
		"\x3\x38\x3\x38\x3\x38\x5\x38\x526\n\x38\x3\x38\x3\x38\x3\x38\x5\x38\x52B"+
		"\n\x38\x3\x38\x5\x38\x52E\n\x38\x3\x39\x6\x39\x531\n\x39\r\x39\xE\x39"+
		"\x532\x3:\x3:\x3:\a:\x538\n:\f:\xE:\x53B\v:\x3;\x5;\x53E\n;\x3;\x5;\x541"+
		"\n;\x3;\x3;\x3;\x3;\x3;\x5;\x548\n;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5"+
		";\x552\n;\x3;\x3;\x3;\x5;\x557\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<"+
		"\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x56B\n<\x3=\x5=\x56E\n=\x3=\x5"+
		"=\x571\n=\x3=\x3=\x5=\x575\n=\x3=\x3=\x5=\x579\n=\x3=\x5=\x57C\n=\x3="+
		"\x3=\x5=\x580\n=\x3=\x3=\x5=\x584\n=\x3=\x3=\x5=\x588\n=\x3=\x3=\x3=\x3"+
		"=\x5=\x58E\n=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x597\n>\x3>\x3>\x3?\x6?"+
		"\x59C\n?\r?\xE?\x59D\x3@\x3@\x3@\x6@\x5A3\n@\r@\xE@\x5A4\x3@\x3@\x3\x41"+
		"\x5\x41\x5AA\n\x41\x3\x41\x5\x41\x5AD\n\x41\x3\x41\x3\x41\x3\x41\x5\x41"+
		"\x5B2\n\x41\x3\x41\x3\x41\x5\x41\x5B6\n\x41\x3\x41\x3\x41\x5\x41\x5BA"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x5C1\n\x41\x3\x42\x6"+
		"\x42\x5C4\n\x42\r\x42\xE\x42\x5C5\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x5"+
		"\x45\x5CD\n\x45\x3\x45\x5\x45\x5D0\n\x45\x3\x45\x3\x45\x3\x45\x5\x45\x5D5"+
		"\n\x45\x3\x45\x5\x45\x5D8\n\x45\x3\x45\x3\x45\x3\x45\x5\x45\x5DD\n\x45"+
		"\x3\x45\x3\x45\x5\x45\x5E1\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5"+
		"\x45\x5E8\n\x45\x3\x46\x6\x46\x5EB\n\x46\r\x46\xE\x46\x5EC\x3G\x6G\x5F0"+
		"\nG\rG\xEG\x5F1\x3H\x6H\x5F5\nH\rH\xEH\x5F6\x3I\x3I\x5I\x5FB\nI\x3I\x3"+
		"I\x3I\aI\x600\nI\fI\xEI\x603\vI\x3I\x3I\x3I\x5I\x608\nI\x3J\x3J\x3J\x3"+
		"K\x3K\x3K\x3K\x3K\aK\x612\nK\fK\xEK\x615\vK\x5K\x617\nK\x3K\x5K\x61A\n"+
		"K\x3L\x3L\x3L\x3L\x3L\x5L\x621\nL\x3M\x3M\x3M\x3M\x3M\aM\x628\nM\fM\xE"+
		"M\x62B\vM\x3M\x3M\x3M\x3N\x3N\x3N\x3O\x3O\x3O\x3O\aO\x637\nO\fO\xEO\x63A"+
		"\vO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x642\nO\fO\xEO\x645\vO\x3O\x3O\x5O\x649"+
		"\nO\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x653\nP\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x5P\x65B\nP\x3P\x5P\x65E\nP\x3P\x5P\x661\nP\x3P\x3P\x3P\x5P\x666\nP"+
		"\x3P\x3P\x3P\x3P\x5P\x66C\nP\x3P\x3P\x5P\x670\nP\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x5P\x67C\nP\x5P\x67E\nP\x3P\x3P\x3P\x3P\x5P\x684\nP"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x68B\nP\x3P\x5P\x68E\nP\x3P\x3P\x3P\x3P\x5P\x694"+
		"\nP\x3P\x5P\x697\nP\x3P\x5P\x69A\nP\x3P\x3P\x3P\x3P\x5P\x6A0\nP\x3P\x3"+
		"P\x5P\x6A4\nP\x3P\x5P\x6A7\nP\x3P\x5P\x6AA\nP\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x5P\x6B2\nP\x3P\x3P\x3P\x3P\x5P\x6B8\nP\x3P\x3P\x3P\x3P\x3P\aP\x6BF\n"+
		"P\fP\xEP\x6C2\vP\x5P\x6C4\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x6CD\nP\x3"+
		"P\x3P\x3P\x3P\x5P\x6D3\nP\x3P\x3P\x5P\x6D7\nP\x3P\x5P\x6DA\nP\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x6E6\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x5P\x6F0\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x6F9\nP\x3P\x5P\x6FC"+
		"\nP\x3P\x3P\x5P\x700\nP\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x708\nP\aP\x70A\n"+
		"P\fP\xEP\x70D\vP\x3P\x3P\x3P\x3P\x5P\x713\nP\x3P\x3P\x5P\x717\nP\x3P\x5"+
		"P\x71A\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x723\nP\x3P\x5P\x726\nP\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x72E\nP\x3P\x5P\x731\nP\x3P\x3P\x3P\x3P\x5P\x737"+
		"\nP\x3P\x3P\x3P\x3P\x3P\x5P\x73E\nP\x3P\x3P\x3P\x3P\x6P\x744\nP\rP\xE"+
		"P\x745\x3P\x3P\x5P\x74A\nP\x3P\x5P\x74D\nP\x3P\x3P\x3P\x3P\x5P\x753\n"+
		"P\x3P\x3P\x3P\x3P\x5P\x759\nP\x3P\x5P\x75C\nP\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x5P\x764\nP\x3P\x5P\x767\nP\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x76F\nP\x3P\x5"+
		"P\x772\nP\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x77A\nP\x3P\x5P\x77D\nP\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x786\nP\x3P\x5P\x789\nP\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x5P\x791\nP\x3P\x5P\x794\nP\x3P\x3P\x3P\x3P\x5P\x79A\nP\x3P\x5P\x79D"+
		"\nP\x3P\x5P\x7A0\nP\x3P\x3P\x5P\x7A4\nP\x3P\x3P\x5P\x7A8\nP\x5P\x7AA\n"+
		"P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x7BB"+
		"\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x6"+
		"P\x7CD\nP\rP\xEP\x7CE\x3P\x3P\x5P\x7D3\nP\x3Q\x3Q\x5Q\x7D7\nQ\x3Q\x3Q"+
		"\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x7E1\nQ\x3R\x3R\x3R\x3R\x3R\x5R\x7E8\nR\x3"+
		"R\x3R\x3R\x3R\x5R\x7EE\nR\x3S\x3S\x3S\x3S\x5S\x7F4\nS\x3S\x3S\x3S\x3S"+
		"\x3S\x3S\x5S\x7FC\nS\x3S\x5S\x7FF\nS\x3S\x3S\x3S\x3T\x5T\x805\nT\x3T\x5"+
		"T\x808\nT\x3T\x3T\x5T\x80C\nT\x3T\x3T\x5T\x810\nT\x3T\x3T\x3T\x3U\x3U"+
		"\x5U\x817\nU\x3U\x3U\x3U\x3V\x5V\x81D\nV\x3V\x3V\x5V\x821\nV\x3V\x3V\x3"+
		"V\aV\x826\nV\fV\xEV\x829\vV\x3V\x3V\x3V\x3V\aV\x82F\nV\fV\xEV\x832\vV"+
		"\x3V\x3V\x5V\x836\nV\x5V\x838\nV\x3W\x3W\x3W\x3W\x3X\x3X\x5X\x840\nX\x3"+
		"X\x3X\x3X\aX\x845\nX\fX\xEX\x848\vX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\aX\x851"+
		"\nX\fX\xEX\x854\vX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\aX\x85D\nX\fX\xEX\x860"+
		"\vX\x3X\x3X\x3X\x5X\x865\nX\x3X\x3X\x3X\x3X\aX\x86B\nX\fX\xEX\x86E\vX"+
		"\x3X\x3X\x3X\x3X\x5X\x874\nX\x3X\x3X\x3X\x3X\aX\x87A\nX\fX\xEX\x87D\v"+
		"X\x3X\x3X\x3X\x3X\x5X\x883\nX\x3X\x3X\x3X\x3X\aX\x889\nX\fX\xEX\x88C\v"+
		"X\x3X\x3X\x3X\x3X\x5X\x892\nX\x3X\x3X\x3X\x3X\aX\x898\nX\fX\xEX\x89B\v"+
		"X\x3X\x3X\x3X\x3X\x5X\x8A1\nX\x3X\x5X\x8A4\nX\x3X\x3X\x3X\x3X\aX\x8AA"+
		"\nX\fX\xEX\x8AD\vX\x3X\x3X\x5X\x8B1\nX\x3Y\x5Y\x8B4\nY\x3Y\x5Y\x8B7\n"+
		"Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x8BE\nY\x3Y\x3Y\x3Y\x5Y\x8C3\nY\x3Y\x3Y\x3Y"+
		"\x3Y\x5Y\x8C9\nY\x5Y\x8CB\nY\x3Z\x5Z\x8CE\nZ\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3"+
		"[\x3[\a[\x8D8\n[\f[\xE[\x8DB\v[\x3[\x3[\x5[\x8DF\n[\x3[\x3[\x3\\\x3\\"+
		"\x3\\\x3\\\a\\\x8E7\n\\\f\\\xE\\\x8EA\v\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3"+
		"\\\a\\\x8F2\n\\\f\\\xE\\\x8F5\v\\\x3\\\x3\\\x5\\\x8F9\n\\\x3]\x5]\x8FC"+
		"\n]\x3]\x3]\x3]\x3]\x3]\x5]\x903\n]\x3]\x3]\x3]\x5]\x908\n]\x3^\x3^\x3"+
		"^\x3^\a^\x90E\n^\f^\xE^\x911\v^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x919\n^\f^"+
		"\xE^\x91C\v^\x3^\x3^\x3^\x3^\x3^\x5^\x923\n^\x3^\x3^\x3^\x5^\x928\n^\a"+
		"^\x92A\n^\f^\xE^\x92D\v^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x935\n^\f^\xE^\x938"+
		"\v^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x941\n^\f^\xE^\x944\v^\x3^\x3^\x3^"+
		"\x3^\x5^\x94A\n^\x3^\x3^\x3^\a^\x94F\n^\f^\xE^\x952\v^\x3^\x3^\x5^\x956"+
		"\n^\x3_\x5_\x959\n_\x3_\x3_\x3_\x3_\x3_\a_\x960\n_\f_\xE_\x963\v_\x3_"+
		"\x3_\x3_\x3_\x3_\x3_\a_\x96B\n_\f_\xE_\x96E\v_\x3_\x3_\x5_\x972\n_\x3"+
		"_\x5_\x975\n_\x3`\x3`\x3`\x3`\x5`\x97B\n`\x3\x61\x5\x61\x97E\n\x61\x3"+
		"\x61\x3\x61\x5\x61\x982\n\x61\x3\x62\x5\x62\x985\n\x62\x3\x62\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x6\x63\x991\n\x63"+
		"\r\x63\xE\x63\x992\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5"+
		"\x65\x9B0\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x5\x65\xA02\n\x65\x3\x65\x3\x65\x3\x65\a\x65\xA07\n\x65"+
		"\f\x65\xE\x65\xA0A\v\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\xA22\n\x66\x3\x66\x3\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\xA29\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\a"+
		"\x66\xA75\n\x66\f\x66\xE\x66\xA78\v\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\a"+
		"\x66\xA88\n\x66\f\x66\xE\x66\xA8B\v\x66\x3\x66\x3\x66\x3\x66\x5\x66\xA90"+
		"\n\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x5g\xA99\ng\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\ag\xAAE\ng\fg\xE"+
		"g\xAB1\vg\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xABB\nh\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x5h\xAD4\nh\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x5h\xAE4\nh\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xAEC\nh\x5h\xAEE\nh\x3i\x3"+
		"i\x5i\xAF2\ni\x3j\x3j\x3j\x3j\aj\xAF8\nj\fj\xEj\xAFB\vj\x5j\xAFD\nj\x3"+
		"j\x3j\x3k\x3k\x3k\x3k\x3l\x3l\x5l\xB07\nl\x3m\x3m\x3m\x3m\am\xB0D\nm\f"+
		"m\xEm\xB10\vm\x3m\x3m\x3n\x3n\x5n\xB16\nn\x3o\x3o\x3o\x3o\ao\xB1C\no\f"+
		"o\xEo\xB1F\vo\x3o\x3o\x3p\x3p\x3p\ap\xB26\np\fp\xEp\xB29\vp\x3q\x5q\xB2C"+
		"\nq\x3r\x3r\x3r\ar\xB31\nr\fr\xEr\xB34\vr\x3s\x3s\x3s\x3s\x5s\xB3A\ns"+
		"\x3s\x5s\xB3D\ns\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x5s\xB4A"+
		"\ns\x3s\x5s\xB4D\ns\x5s\xB4F\ns\x3t\x3t\x3t\x3t\x3t\x5t\xB56\nt\x3t\x3"+
		"t\x5t\xB5A\nt\x3t\x3t\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\au\xB66\nu\fu\xE"+
		"u\xB69\vu\x3v\x3v\x3v\x3v\x3v\x3v\av\xB71\nv\fv\xEv\xB74\vv\x3w\x3w\x3"+
		"w\x3w\x3w\x3w\x3w\x3w\x5w\xB7E\nw\x3x\x3x\x5x\xB82\nx\x3y\x3y\x3y\x3y"+
		"\ay\xB88\ny\fy\xEy\xB8B\vy\x3y\x3y\x3z\x3z\x3{\x3{\x5{\xB93\n{\x3{\x3"+
		"{\x3|\x3|\x5|\xB99\n|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x6}\xBA5"+
		"\n}\r}\xE}\xBA6\x3}\x3}\x3}\x3}\x5}\xBAD\n}\x3~\x3~\a~\xBB1\n~\f~\xE~"+
		"\xBB4\v~\x3~\x3~\x5~\xBB8\n~\x3\x7F\x3\x7F\x3\x7F\x5\x7F\xBBD\n\x7F\x3"+
		"\x80\x3\x80\x5\x80\xBC1\n\x80\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\xBC7"+
		"\n\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\xBCF\n\x81\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\a\x81\xBD5\n\x81\f\x81\xE\x81\xBD8\v\x81\x3"+
		"\x81\x3\x81\x5\x81\xBDC\n\x81\x3\x82\x5\x82\xBDF\n\x82\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x3\x83\a\x83\xBE6\n\x83\f\x83\xE\x83\xBE9\v\x83\x5\x83\xBEB"+
		"\n\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\xBF4\n"+
		"\x84\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xBFA\n\x85\x3\x85\x5\x85\xBFD"+
		"\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xC05\n\x85\x3"+
		"\x85\x5\x85\xC08\n\x85\x3\x85\x5\x85\xC0B\n\x85\x5\x85\xC0D\n\x85\x3\x85"+
		"\x3\x85\x3\x85\x3\x85\x5\x85\xC13\n\x85\x3\x86\x5\x86\xC16\n\x86\x3\x86"+
		"\x3\x86\x3\x86\x3\x86\x5\x86\xC1C\n\x86\x3\x87\x3\x87\x5\x87\xC20\n\x87"+
		"\x3\x88\x3\x88\x3\x88\a\x88\xC25\n\x88\f\x88\xE\x88\xC28\v\x88\x3\x89"+
		"\x5\x89\xC2B\n\x89\x3\x89\x6\x89\xC2E\n\x89\r\x89\xE\x89\xC2F\x3\x89\x3"+
		"\x89\x3\x8A\x5\x8A\xC35\n\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\xC3A\n\x8A\x3"+
		"\x8A\x5\x8A\xC3D\n\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B"+
		"\a\x8B\xC46\n\x8B\f\x8B\xE\x8B\xC49\v\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xC56\n\x8E\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8F\a\x8F\xC5C\n\x8F\f\x8F\xE\x8F\xC5F\v\x8F\x3"+
		"\x8F\x3\x8F\x5\x8F\xC63\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\xC71\n\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\xC7A\n\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\a\x90\xC80\n\x90\f\x90\xE\x90\xC83\v\x90\x5\x90\xC85\n"+
		"\x90\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\x5\x92\xC8C\n\x92\x3\x93\x3\x93"+
		"\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xC95\n\x93\x3\x94\x3\x94\x3"+
		"\x94\x3\x94\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xC9F\n\x95\x3\x96\x3\x96"+
		"\x3\x96\x3\x96\x3\x96\x5\x96\xCA6\n\x96\x3\x97\x3\x97\x3\x98\x3\x98\x3"+
		"\x99\x3\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3"+
		"\x9E\x5\x9E\xCB7\n\x9E\x3\x9E\x5\x9E\xCBA\n\x9E\x3\x9E\x3\x9E\x5\x9E\xCBE"+
		"\n\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\a\x9E\xCC5\n\x9E\f\x9E\xE\x9E"+
		"\xCC8\v\x9E\x5\x9E\xCCA\n\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9E\a\x9E\xCD0\n"+
		"\x9E\f\x9E\xE\x9E\xCD3\v\x9E\x5\x9E\xCD5\n\x9E\x3\x9E\x3\x9E\a\x9E\xCD9"+
		"\n\x9E\f\x9E\xE\x9E\xCDC\v\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9F\x6\x9F\xCE2"+
		"\n\x9F\r\x9F\xE\x9F\xCE3\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5"+
		"\xA0\xCEC\n\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA3\x5\xA3"+
		"\xCF5\n\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\a\xA3\xCFC\n\xA3\f\xA3"+
		"\xE\xA3\xCFF\v\xA3\x5\xA3\xD01\n\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA4"+
		"\x3\xA4\x5\xA4\xD09\n\xA4\x3\xA4\x3\xA4\x5\xA4\xD0D\n\xA4\x3\xA5\x6\xA5"+
		"\xD10\n\xA5\r\xA5\xE\xA5\xD11\x3\xA6\x5\xA6\xD15\n\xA6\x3\xA6\x3\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\a\xA6\xD1C\n\xA6\f\xA6\xE\xA6\xD1F\v\xA6\x3\xA6\x3"+
		"\xA6\x5\xA6\xD23\n\xA6\x5\xA6\xD25\n\xA6\x3\xA6\x5\xA6\xD28\n\xA6\x3\xA6"+
		"\x5\xA6\xD2B\n\xA6\x3\xA6\x5\xA6\xD2E\n\xA6\x3\xA6\x5\xA6\xD31\n\xA6\x3"+
		"\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x5\xA8\xD39\n\xA8\x3\xA8\x3\xA8"+
		"\x5\xA8\xD3D\n\xA8\x3\xA8\x3\xA8\x5\xA8\xD41\n\xA8\x5\xA8\xD43\n\xA8\x3"+
		"\xA8\x5\xA8\xD46\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\xD4C\n\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\xD50\n\xA8\x3\xA8\x3\xA8\x3\xA9\x5\xA9\xD55\n\xA9\x3"+
		"\xA9\x5\xA9\xD58\n\xA9\x3\xA9\x5\xA9\xD5B\n\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x5\xA9\xD61\n\xA9\x3\xA9\x3\xA9\x5\xA9\xD65\n\xA9\x3\xA9\x3\xA9\x5"+
		"\xA9\xD69\n\xA9\x3\xA9\x3\xA9\x5\xA9\xD6D\n\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x3\xA9\x5\xA9\xD74\n\xA9\x3\xAA\x5\xAA\xD77\n\xAA\x3\xAA\x3\xAA\x5"+
		"\xAA\xD7B\n\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\xD80\n\xAA\x3\xAA\x3\xAA\x5"+
		"\xAA\xD84\n\xAA\x3\xAA\x3\xAA\x5\xAA\xD88\n\xAA\x3\xAA\x3\xAA\x3\xAA\x3"+
		"\xAA\x3\xAA\x5\xAA\xD8F\n\xAA\x3\xAB\x6\xAB\xD92\n\xAB\r\xAB\xE\xAB\xD93"+
		"\x3\xAC\x3\xAC\x3\xAD\x5\xAD\xD99\n\xAD\x3\xAD\x3\xAD\x5\xAD\xD9D\n\xAD"+
		"\x3\xAD\x3\xAD\x5\xAD\xDA1\n\xAD\x3\xAD\x3\xAD\x5\xAD\xDA5\n\xAD\x3\xAD"+
		"\x3\xAD\x5\xAD\xDA9\n\xAD\x3\xAD\x3\xAD\x5\xAD\xDAD\n\xAD\x3\xAD\a\xAD"+
		"\xDB0\n\xAD\f\xAD\xE\xAD\xDB3\v\xAD\x3\xAD\x5\xAD\xDB6\n\xAD\x3\xAD\x3"+
		"\xAD\a\xAD\xDBA\n\xAD\f\xAD\xE\xAD\xDBD\v\xAD\x3\xAD\x3\xAD\x3\xAD\x5"+
		"\xAD\xDC2\n\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE"+
		"\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDCF\n\xAE\x3\xAF\x5\xAF\xDD2\n\xAF\x3\xAF"+
		"\x5\xAF\xDD5\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\xDDB\n\xAF\x3\xAF"+
		"\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\xDE2\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x5\xAF\xDEA\n\xAF\x3\xB0\x5\xB0\xDED\n\xB0\x3\xB0\x5"+
		"\xB0\xDF0\n\xB0\x3\xB0\x5\xB0\xDF3\n\xB0\x3\xB0\x3\xB0\x3\xB0\a\xB0\xDF8"+
		"\n\xB0\f\xB0\xE\xB0\xDFB\v\xB0\x3\xB0\x3\xB0\x5\xB0\xDFF\n\xB0\x3\xB0"+
		"\x3\xB0\x3\xB1\x5\xB1\xE04\n\xB1\x3\xB1\x5\xB1\xE07\n\xB1\x3\xB1\x3\xB1"+
		"\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x5\xB3\xE13\n"+
		"\xB3\x3\xB3\x3\xB3\x5\xB3\xE17\n\xB3\x3\xB3\x3\xB3\x3\xB4\x5\xB4\xE1C"+
		"\n\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\xE21\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3"+
		"\xB4\x5\xB4\xE27\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\a\xB4\xE2D\n\xB4\f"+
		"\xB4\xE\xB4\xE30\v\xB4\x5\xB4\xE32\n\xB4\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\xE3C\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\xE47\n\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\xE54"+
		"\n\xB5\x3\xB5\x3\x1C6\x2\x6\xC8\xCC\xE8\xEA\xB6\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x2L\x3\x2\x15F\x15F\x4\x2"+
		"\x1D\x1D(*\x4\x2\"\"\x39\x39\n\x2\a\a\v\v\xF\xF\x1F\x1F\x37\x37\x43\x43"+
		"\x45\x45LL\x4\x2RR\x154\x154\a\x2\x4\x4\b\b\x32\x32TTXX\a\x2\x6\x6,-h"+
		"h\x8C\x8C\xA8\xA8\b\x2\x1E\x1E;;\x41\x41\x63\x63xx\x91\x91\x5\x2\x4\x4"+
		"\b\b\x32\x32\x4\x2\x6\x6,,\a\x2\x1E\x1E;;\x41\x41\x63\x63\x91\x91\x4\x2"+
		"\'\'\x122\x122\r\x2\x1E\x1E$$\x38\x38:;\x41\x41QQ\x63\x63\x66\x66iimm"+
		"\x91\x91\x4\x2--hh\x4\x2\xE\xEoo\x4\x2\x6\x6\'\'\x4\x2uu\x8D\x8D\xE\x2"+
		"\x1E\x1E$$++\x38\x38:;\x41\x41UU\x61\x61\x63\x63\x80\x80\x91\x91\x93\x93"+
		"\x5\x2]]nn\x83\x83\x4\x2]]\x153\x153\x4\x2nn\x83\x83\a\x2\x1E\x1E$$\x38"+
		"\x38:;\x63\x63\x4\x2>>\x44\x44\t\x2\x1E\x1E$$\x38\x38:;\x41\x41\x63\x63"+
		"\x7F\x7F\t\x2\xEA\xED\xEF\xEF\xF1\xF8\xFA\xFD\x100\x102\x124\x125\x12F"+
		"\x130\x4\x2[[__\x5\x2;;\x41\x41\x7F\x7F\x10\x2\x1E\x1E$$\x38\x38:;\x41"+
		"\x41QQ\x63\x63\x66\x66mmssxx\x7F\x7F\x8B\x8B\x91\x91\r\x2\xE\xE  \x32"+
		"\x32==TTWWYZ\x62\x62jjoo\x154\x154\x4\x2\x15\x15KK\x5\x2\x16\x16\x46\x46"+
		"II\x3\x2\xFE\xFF\x4\x2\n\n\x1D\x1D\x4\x2\t\t\x15\x15\x4\x2\x12A\x12A\x12C"+
		"\x12C\x5\x2\x11D\x11D\x11F\x11F\x121\x121\x4\x2\x31\x31\x36\x36\x4\x2"+
		"\x38\x38;;\x4\x2\x10\x10\xD0\xD0\x4\x2\x36\x36\xCB\xCB\x4\x2xx\x91\x91"+
		"\x4\x2\xEE\xEE\x107\x107\x4\x2\x122\x122\x128\x129\x5\x2\xF3\xF6\xFC\xFC"+
		"\x126\x126\x5\x2\x102\x102\x116\x116\x11A\x11A\x4\x2\xF7\xF8\xFD\xFD\x3"+
		"\x2\xF5\xF6\x3\x2\xEA\xF2\x5\x2\x100\x100\x114\x114\x118\x118\x4\x2\x117"+
		"\x117\x11B\x11B\x5\x2\x101\x101\x115\x115\x119\x119\x4\x2VV\xFE\xFE\x3"+
		"\x2\x107\x113\x4\x2\x122\x122\x128\x128\x3\x2\xF3\xF4\x4\x2||\x90\x90"+
		"\x3\x2\x103\x106\x4\x2hh\xA8\xA8\x3\x2%&\x4\x2ww}}\x5\x2\x9A\x9A\x9D\x9D"+
		"\xB4\xB4\b\x2\x9A\x9A\x9C\x9D\x9F\x9F\xA4\xA4\xAB\xAC\xB5\xB6\t\x2\x9B"+
		"\x9B\x9E\x9E\xA0\xA3\xA5\xA7\xA9\xAA\xAD\xB4\xB7\xB8\x5\x2\xDE\xE7\x12F"+
		"\x13D\x13F\x140\x1B\x2\x4\x4\x6\x6\b\n\f\xE\x13\x13\x15\x15\x17\x1E!\""+
		"$&,,.\x30\x32\x32\x34\x35\x38>@@\x44\x44GGKKMNTTXXkkpp\xA5\xA5\x103\x106"+
		"\x1A\x2\x5\x5\v\v\xF\x12\x14\x14\x16\x16\x1F ##\'+--\x31\x31\x33\x33\x36"+
		"\x37??\x42\x43\x45\x46HJLLQRUWYjl\x96\xA8\xA8\xAF\xAF\xB2\xB8\x5\x2\xBD"+
		"\xBD\xC0\xC0\xC5\xC8\x4\x2\x81\x81\xC7\xC7\x4\x2\x41\x41\xC1\xC2\a\x2"+
		"$$\x38\x38:;\x63\x63\xC0\xC0\b\x2\xE\xE\x8B\x8B\xBE\xBE\xC2\xC2\xC4\xC4"+
		"\xC9\xC9\x4\x2\x4\x4\b\b\x4\x2\xE\xE\x41\x41\x5\x2\xCC\xCF\xD1\xD4\x118"+
		"\x11B\x107B\x2\x172\x3\x2\x2\x2\x4\x180\x3\x2\x2\x2\x6\x184\x3\x2\x2\x2"+
		"\b\x18C\x3\x2\x2\x2\n\x194\x3\x2\x2\x2\f\x1BB\x3\x2\x2\x2\xE\x1BE\x3\x2"+
		"\x2\x2\x10\x1C2\x3\x2\x2\x2\x12\x1CC\x3\x2\x2\x2\x14\x1DF\x3\x2\x2\x2"+
		"\x16\x1E1\x3\x2\x2\x2\x18\x1FB\x3\x2\x2\x2\x1A\x201\x3\x2\x2\x2\x1C\x204"+
		"\x3\x2\x2\x2\x1E\x22E\x3\x2\x2\x2 \x231\x3\x2\x2\x2\"\x252\x3\x2\x2\x2"+
		"$\x25B\x3\x2\x2\x2&\x262\x3\x2\x2\x2(\x281\x3\x2\x2\x2*\x283\x3\x2\x2"+
		"\x2,\x28A\x3\x2\x2\x2.\x28E\x3\x2\x2\x2\x30\x292\x3\x2\x2\x2\x32\x2C3"+
		"\x3\x2\x2\x2\x34\x2C6\x3\x2\x2\x2\x36\x2DD\x3\x2\x2\x2\x38\x2E0\x3\x2"+
		"\x2\x2:\x2ED\x3\x2\x2\x2<\x317\x3\x2\x2\x2>\x31A\x3\x2\x2\x2@\x32D\x3"+
		"\x2\x2\x2\x42\x331\x3\x2\x2\x2\x44\x340\x3\x2\x2\x2\x46\x36A\x3\x2\x2"+
		"\x2H\x398\x3\x2\x2\x2J\x39C\x3\x2\x2\x2L\x3AB\x3\x2\x2\x2N\x3B2\x3\x2"+
		"\x2\x2P\x3C2\x3\x2\x2\x2R\x3C5\x3\x2\x2\x2T\x3EF\x3\x2\x2\x2V\x40C\x3"+
		"\x2\x2\x2X\x427\x3\x2\x2\x2Z\x435\x3\x2\x2\x2\\\x45A\x3\x2\x2\x2^\x46D"+
		"\x3\x2\x2\x2`\x48B\x3\x2\x2\x2\x62\x499\x3\x2\x2\x2\x64\x49E\x3\x2\x2"+
		"\x2\x66\x4C0\x3\x2\x2\x2h\x4C3\x3\x2\x2\x2j\x512\x3\x2\x2\x2l\x515\x3"+
		"\x2\x2\x2n\x51D\x3\x2\x2\x2p\x530\x3\x2\x2\x2r\x534\x3\x2\x2\x2t\x53D"+
		"\x3\x2\x2\x2v\x56A\x3\x2\x2\x2x\x56D\x3\x2\x2\x2z\x58F\x3\x2\x2\x2|\x59B"+
		"\x3\x2\x2\x2~\x59F\x3\x2\x2\x2\x80\x5A9\x3\x2\x2\x2\x82\x5C3\x3\x2\x2"+
		"\x2\x84\x5C7\x3\x2\x2\x2\x86\x5C9\x3\x2\x2\x2\x88\x5CC\x3\x2\x2\x2\x8A"+
		"\x5EA\x3\x2\x2\x2\x8C\x5EF\x3\x2\x2\x2\x8E\x5F4\x3\x2\x2\x2\x90\x607\x3"+
		"\x2\x2\x2\x92\x609\x3\x2\x2\x2\x94\x60C\x3\x2\x2\x2\x96\x620\x3\x2\x2"+
		"\x2\x98\x622\x3\x2\x2\x2\x9A\x62F\x3\x2\x2\x2\x9C\x648\x3\x2\x2\x2\x9E"+
		"\x7D2\x3\x2\x2\x2\xA0\x7D4\x3\x2\x2\x2\xA2\x7ED\x3\x2\x2\x2\xA4\x7FE\x3"+
		"\x2\x2\x2\xA6\x804\x3\x2\x2\x2\xA8\x816\x3\x2\x2\x2\xAA\x837\x3\x2\x2"+
		"\x2\xAC\x839\x3\x2\x2\x2\xAE\x8B0\x3\x2\x2\x2\xB0\x8B3\x3\x2\x2\x2\xB2"+
		"\x8CD\x3\x2\x2\x2\xB4\x8D3\x3\x2\x2\x2\xB6\x8F8\x3\x2\x2\x2\xB8\x8FB\x3"+
		"\x2\x2\x2\xBA\x955\x3\x2\x2\x2\xBC\x958\x3\x2\x2\x2\xBE\x976\x3\x2\x2"+
		"\x2\xC0\x97D\x3\x2\x2\x2\xC2\x984\x3\x2\x2\x2\xC4\x990\x3\x2\x2\x2\xC6"+
		"\x994\x3\x2\x2\x2\xC8\x9AF\x3\x2\x2\x2\xCA\xA8F\x3\x2\x2\x2\xCC\xA98\x3"+
		"\x2\x2\x2\xCE\xAED\x3\x2\x2\x2\xD0\xAF1\x3\x2\x2\x2\xD2\xAF3\x3\x2\x2"+
		"\x2\xD4\xB00\x3\x2\x2\x2\xD6\xB06\x3\x2\x2\x2\xD8\xB08\x3\x2\x2\x2\xDA"+
		"\xB15\x3\x2\x2\x2\xDC\xB17\x3\x2\x2\x2\xDE\xB22\x3\x2\x2\x2\xE0\xB2B\x3"+
		"\x2\x2\x2\xE2\xB2D\x3\x2\x2\x2\xE4\xB4E\x3\x2\x2\x2\xE6\xB50\x3\x2\x2"+
		"\x2\xE8\xB5D\x3\x2\x2\x2\xEA\xB6A\x3\x2\x2\x2\xEC\xB7D\x3\x2\x2\x2\xEE"+
		"\xB7F\x3\x2\x2\x2\xF0\xB83\x3\x2\x2\x2\xF2\xB8E\x3\x2\x2\x2\xF4\xB92\x3"+
		"\x2\x2\x2\xF6\xB98\x3\x2\x2\x2\xF8\xBAC\x3\x2\x2\x2\xFA\xBB7\x3\x2\x2"+
		"\x2\xFC\xBBC\x3\x2\x2\x2\xFE\xBC0\x3\x2\x2\x2\x100\xBDB\x3\x2\x2\x2\x102"+
		"\xBDE\x3\x2\x2\x2\x104\xBE0\x3\x2\x2\x2\x106\xBF3\x3\x2\x2\x2\x108\xC12"+
		"\x3\x2\x2\x2\x10A\xC1B\x3\x2\x2\x2\x10C\xC1F\x3\x2\x2\x2\x10E\xC21\x3"+
		"\x2\x2\x2\x110\xC2D\x3\x2\x2\x2\x112\xC34\x3\x2\x2\x2\x114\xC42\x3\x2"+
		"\x2\x2\x116\xC4A\x3\x2\x2\x2\x118\xC4E\x3\x2\x2\x2\x11A\xC51\x3\x2\x2"+
		"\x2\x11C\xC5D\x3\x2\x2\x2\x11E\xC84\x3\x2\x2\x2\x120\xC86\x3\x2\x2\x2"+
		"\x122\xC89\x3\x2\x2\x2\x124\xC94\x3\x2\x2\x2\x126\xC96\x3\x2\x2\x2\x128"+
		"\xC9E\x3\x2\x2\x2\x12A\xCA5\x3\x2\x2\x2\x12C\xCA7\x3\x2\x2\x2\x12E\xCA9"+
		"\x3\x2\x2\x2\x130\xCAB\x3\x2\x2\x2\x132\xCAD\x3\x2\x2\x2\x134\xCAF\x3"+
		"\x2\x2\x2\x136\xCB1\x3\x2\x2\x2\x138\xCB3\x3\x2\x2\x2\x13A\xCB6\x3\x2"+
		"\x2\x2\x13C\xCE1\x3\x2\x2\x2\x13E\xCEB\x3\x2\x2\x2\x140\xCED\x3\x2\x2"+
		"\x2\x142\xCF1\x3\x2\x2\x2\x144\xCF4\x3\x2\x2\x2\x146\xD0C\x3\x2\x2\x2"+
		"\x148\xD0F\x3\x2\x2\x2\x14A\xD14\x3\x2\x2\x2\x14C\xD34\x3\x2\x2\x2\x14E"+
		"\xD38\x3\x2\x2\x2\x150\xD54\x3\x2\x2\x2\x152\xD76\x3\x2\x2\x2\x154\xD91"+
		"\x3\x2\x2\x2\x156\xD95\x3\x2\x2\x2\x158\xD98\x3\x2\x2\x2\x15A\xDCE\x3"+
		"\x2\x2\x2\x15C\xDD1\x3\x2\x2\x2\x15E\xDEC\x3\x2\x2\x2\x160\xE03\x3\x2"+
		"\x2\x2\x162\xE0B\x3\x2\x2\x2\x164\xE0F\x3\x2\x2\x2\x166\xE1B\x3\x2\x2"+
		"\x2\x168\xE53\x3\x2\x2\x2\x16A\x16B\a\xBC\x2\x2\x16B\x16C\a\x13A\x2\x2"+
		"\x16C\x171\a\x15F\x2\x2\x16D\x16E\a\xBB\x2\x2\x16E\x16F\a\x13A\x2\x2\x16F"+
		"\x171\a\x15F\x2\x2\x170\x16A\x3\x2\x2\x2\x170\x16D\x3\x2\x2\x2\x171\x174"+
		"\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x178\x3"+
		"\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175\x177\x5\x4\x3\x2\x176\x175\x3\x2"+
		"\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2"+
		"\x2\x179\x17B\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B\x17C\a\x2\x2\x3\x17C"+
		"\x3\x3\x2\x2\x2\x17D\x181\x5\x9EP\x2\x17E\x181\x5\f\a\x2\x17F\x181\x5"+
		"\xC8\x65\x2\x180\x17D\x3\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x17F\x3\x2"+
		"\x2\x2\x181\x5\x3\x2\x2\x2\x182\x185\x5\x108\x85\x2\x183\x185\x5\x10A"+
		"\x86\x2\x184\x182\x3\x2\x2\x2\x184\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2"+
		"\x2\x186\x187\a\x15F\x2\x2\x187\x188\a\x2\x2\x3\x188\a\x3\x2\x2\x2\x189"+
		"\x18B\x5\f\a\x2\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A"+
		"\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3"+
		"\x2\x2\x2\x18F\x190\a\x2\x2\x3\x190\t\x3\x2\x2\x2\x191\x193\x5\x9CO\x2"+
		"\x192\x191\x3\x2\x2\x2\x193\x196\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x194"+
		"\x195\x3\x2\x2\x2\x195\x197\x3\x2\x2\x2\x196\x194\x3\x2\x2\x2\x197\x19B"+
		"\x5,\x17\x2\x198\x19A\x5\f\a\x2\x199\x198\x3\x2\x2\x2\x19A\x19D\x3\x2"+
		"\x2\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\x19E\x3\x2\x2"+
		"\x2\x19D\x19B\x3\x2\x2\x2\x19E\x19F\a\x2\x2\x3\x19F\v\x3\x2\x2\x2\x1A0"+
		"\x1BC\x5\x42\"\x2\x1A1\x1BC\x5\x46$\x2\x1A2\x1BC\x5\x158\xAD\x2\x1A3\x1BC"+
		"\x5\x13A\x9E\x2\x1A4\x1BC\x5R*\x2\x1A5\x1BC\x5\x44#\x2\x1A6\x1BC\x5T+"+
		"\x2\x1A7\x1BC\x5Z.\x2\x1A8\x1BC\x5V,\x2\x1A9\x1BC\x5\x98M\x2\x1AA\x1BC"+
		"\x5:\x1E\x2\x1AB\x1BC\x5> \x2\x1AC\x1BC\x5\x12\n\x2\x1AD\x1BC\x5\x30\x19"+
		"\x2\x1AE\x1BC\x5\x38\x1D\x2\x1AF\x1BC\x5\x32\x1A\x2\x1B0\x1BC\x5\x1C\xF"+
		"\x2\x1B1\x1B2\x6\a\x2\x2\x1B2\x1BC\x5\x34\x1B\x2\x1B3\x1B4\x6\a\x3\x2"+
		"\x1B4\x1BC\x5\x150\xA9\x2\x1B5\x1BC\x5x=\x2\x1B6\x1BC\x5\x80\x41\x2\x1B7"+
		"\x1BC\x5\x9CO\x2\x1B8\x1BC\x5\x10\t\x2\x1B9\x1BC\x5 \x11\x2\x1BA\x1BC"+
		"\x5\xE\b\x2\x1BB\x1A0\x3\x2\x2\x2\x1BB\x1A1\x3\x2\x2\x2\x1BB\x1A2\x3\x2"+
		"\x2\x2\x1BB\x1A3\x3\x2\x2\x2\x1BB\x1A4\x3\x2\x2\x2\x1BB\x1A5\x3\x2\x2"+
		"\x2\x1BB\x1A6\x3\x2\x2\x2\x1BB\x1A7\x3\x2\x2\x2\x1BB\x1A8\x3\x2\x2\x2"+
		"\x1BB\x1A9\x3\x2\x2\x2\x1BB\x1AA\x3\x2\x2\x2\x1BB\x1AB\x3\x2\x2\x2\x1BB"+
		"\x1AC\x3\x2\x2\x2\x1BB\x1AD\x3\x2\x2\x2\x1BB\x1AE\x3\x2\x2\x2\x1BB\x1AF"+
		"\x3\x2\x2\x2\x1BB\x1B0\x3\x2\x2\x2\x1BB\x1B1\x3\x2\x2\x2\x1BB\x1B3\x3"+
		"\x2\x2\x2\x1BB\x1B5\x3\x2\x2\x2\x1BB\x1B6\x3\x2\x2\x2\x1BB\x1B7\x3\x2"+
		"\x2\x2\x1BB\x1B8\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB\x1BA\x3\x2\x2"+
		"\x2\x1BC\r\x3\x2\x2\x2\x1BD\x1BF\a\x15F\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF"+
		"\x1C0\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\xF"+
		"\x3\x2\x2\x2\x1C2\x1C6\a\x156\x2\x2\x1C3\x1C5\n\x2\x2\x2\x1C4\x1C3\x3"+
		"\x2\x2\x2\x1C5\x1C8\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C6\x1C4\x3\x2"+
		"\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CA\a\x15F\x2"+
		"\x2\x1CA\x11\x3\x2\x2\x2\x1CB\x1CD\x5\x8EH\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC"+
		"\x1CD\x3\x2\x2\x2\x1CD\x1CF\x3\x2\x2\x2\x1CE\x1D0\x5.\x18\x2\x1CF\x1CE"+
		"\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2\x5"+
		"\x14\v\x2\x1D2\x1D4\x5\x16\f\x2\x1D3\x1D5\t\x3\x2\x2\x1D4\x1D3\x3\x2\x2"+
		"\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x5\x18\r\x2"+
		"\x1D7\x1D8\x5\xE\b\x2\x1D8\x1DD\x5,\x17\x2\x1D9\x1DA\a\x19\x2\x2\x1DA"+
		"\x1DB\x5\x14\v\x2\x1DB\x1DC\a\x15F\x2\x2\x1DC\x1DE\x3\x2\x2\x2\x1DD\x1D9"+
		"\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x13\x3\x2\x2\x2\x1DF\x1E0\t\x4"+
		"\x2\x2\x1E0\x15\x3\x2\x2\x2\x1E1\x1E3\x5\x128\x95\x2\x1E2\x1E4\x5J&\x2"+
		"\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5"+
		"\x1E7\x5&\x14\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1EA"+
		"\x3\x2\x2\x2\x1E8\x1E9\a\x6\x2\x2\x1E9\x1EB\x5\xF8}\x2\x1EA\x1E8\x3\x2"+
		"\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EF\x3\x2\x2\x2\x1EC\x1EE\x5N(\x2\x1ED"+
		"\x1EC\x3\x2\x2\x2\x1EE\x1F1\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0"+
		"\x3\x2\x2\x2\x1F0\x1F3\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2\x1F4\x5"+
		"\x1A\xE\x2\x1F3\x1F2\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F7\x3\x2"+
		"\x2\x2\x1F5\x1F6\a\x153\x2\x2\x1F6\x1F8\x5\xC8\x65\x2\x1F7\x1F5\x3\x2"+
		"\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x17\x3\x2\x2\x2\x1F9\x1FA\a\x1E\x2\x2"+
		"\x1FA\x1FC\a.\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FF"+
		"\x3\x2\x2\x2\x1FD\x1FE\a\x14\x2\x2\x1FE\x200\a\x13A\x2\x2\x1FF\x1FD\x3"+
		"\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x19\x3\x2\x2\x2\x201\x202\t\x5\x2"+
		"\x2\x202\x1B\x3\x2\x2\x2\x203\x205\x5\x8EH\x2\x204\x203\x3\x2\x2\x2\x204"+
		"\x205\x3\x2\x2\x2\x205\x207\x3\x2\x2\x2\x206\x208\x5.\x18\x2\x207\x206"+
		"\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20A\a\x13"+
		"\x2\x2\x20A\x20B\x5\x14\v\x2\x20B\x20C\x5\x128\x95\x2\x20C\x20F\x5&\x14"+
		"\x2\x20D\x20E\a\x6\x2\x2\x20E\x210\x5\xF8}\x2\x20F\x20D\x3\x2\x2\x2\x20F"+
		"\x210\x3\x2\x2\x2\x210\x212\x3\x2\x2\x2\x211\x213\x5\x1E\x10\x2\x212\x211"+
		"\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x215\a\x122"+
		"\x2\x2\x215\x218\x5\x12A\x96\x2\x216\x217\a\x128\x2\x2\x217\x219\x5\x12A"+
		"\x96\x2\x218\x216\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x227\x3\x2\x2"+
		"\x2\x21A\x228\a\x136\x2\x2\x21B\x21C\a\x128\x2\x2\x21C\x21E\x5\x12A\x96"+
		"\x2\x21D\x21F\a\x126\x2\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2"+
		"\x21F\x221\x3\x2\x2\x2\x220\x222\a\x133\x2\x2\x221\x220\x3\x2\x2\x2\x221"+
		"\x222\x3\x2\x2\x2\x222\x225\x3\x2\x2\x2\x223\x224\a\xF2\x2\x2\x224\x226"+
		"\a\x133\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228\x3"+
		"\x2\x2\x2\x227\x21A\x3\x2\x2\x2\x227\x21B\x3\x2\x2\x2\x228\x22A\x3\x2"+
		"\x2\x2\x229\x22B\t\x6\x2\x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2"+
		"\x22B\x22C\x3\x2\x2\x2\x22C\x22D\a\x15F\x2\x2\x22D\x1D\x3\x2\x2\x2\x22E"+
		"\x22F\t\x5\x2\x2\x22F\x1F\x3\x2\x2\x2\x230\x232\x5\x8EH\x2\x231\x230\x3"+
		"\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x234\x3\x2\x2\x2\x233\x235\x5.\x18"+
		"\x2\x234\x233\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2"+
		"\x236\x238\a\x10\x2\x2\x237\x239\x5\xF8}\x2\x238\x237\x3\x2\x2\x2\x238"+
		"\x239\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23B\x5\x128\x95\x2\x23B"+
		"\x23C\a-\x2\x2\x23C\x23F\x5\x128\x95\x2\x23D\x23E\a\x128\x2\x2\x23E\x240"+
		"\x5\x12A\x96\x2\x23F\x23D\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x243"+
		"\x3\x2\x2\x2\x241\x242\a\x6\x2\x2\x242\x244\x5\x128\x95\x2\x243\x241\x3"+
		"\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\x24D\x3\x2\x2\x2\x245\x24A\x5\"\x12"+
		"\x2\x246\x247\a\x123\x2\x2\x247\x249\x5\"\x12\x2\x248\x246\x3\x2\x2\x2"+
		"\x249\x24C\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B"+
		"\x24E\x3\x2\x2\x2\x24C\x24A\x3\x2\x2\x2\x24D\x245\x3\x2\x2\x2\x24D\x24E"+
		"\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\a\x15F\x2\x2\x250!\x3\x2"+
		"\x2\x2\x251\x253\x5\x8EH\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2"+
		"\x253\x254\x3\x2\x2\x2\x254\x256\x5\xF8}\x2\x255\x257\a\x126\x2\x2\x256"+
		"\x255\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x259\x3\x2\x2\x2\x258\x25A"+
		"\x5\x128\x95\x2\x259\x258\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A#\x3\x2"+
		"\x2\x2\x25B\x25C\a\x13\x2\x2\x25C\x25E\t\a\x2\x2\x25D\x25F\n\x2\x2\x2"+
		"\x25E\x25D\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260"+
		"\x261\a\x15F\x2\x2\x261%\x3\x2\x2\x2\x262\x26B\a\x11C\x2\x2\x263\x268"+
		"\x5(\x15\x2\x264\x265\a\x123\x2\x2\x265\x267\x5(\x15\x2\x266\x264\x3\x2"+
		"\x2\x2\x267\x26A\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x268\x269\x3\x2\x2"+
		"\x2\x269\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26B\x263\x3\x2\x2\x2"+
		"\x26B\x26C\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26E\a\x11D\x2\x2\x26E"+
		"\'\x3\x2\x2\x2\x26F\x271\x5\x8EH\x2\x270\x26F\x3\x2\x2\x2\x270\x271\x3"+
		"\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x274\a>\x2\x2\x273\x272\x3\x2\x2"+
		"\x2\x273\x274\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x279\x5\x128\x95"+
		"\x2\x276\x277\x5\xC6\x64\x2\x277\x278\x5\xC8\x65\x2\x278\x27A\x3\x2\x2"+
		"\x2\x279\x276\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27E\x3\x2\x2\x2"+
		"\x27B\x27C\x5*\x16\x2\x27C\x27D\x5\xF8}\x2\x27D\x27F\x3\x2\x2\x2\x27E"+
		"\x27B\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x282\x3\x2\x2\x2\x280\x282"+
		"\a\x12B\x2\x2\x281\x270\x3\x2\x2\x2\x281\x280\x3\x2\x2\x2\x282)\x3\x2"+
		"\x2\x2\x283\x285\t\b\x2\x2\x284\x286\aU\x2\x2\x285\x284\x3\x2\x2\x2\x285"+
		"\x286\x3\x2\x2\x2\x286+\x3\x2\x2\x2\x287\x289\x5\x9EP\x2\x288\x287\x3"+
		"\x2\x2\x2\x289\x28C\x3\x2\x2\x2\x28A\x288\x3\x2\x2\x2\x28A\x28B\x3\x2"+
		"\x2\x2\x28B-\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2\x28D\x28F\t\t\x2\x2\x28E"+
		"\x28D\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x28E\x3\x2\x2\x2\x290\x291"+
		"\x3\x2\x2\x2\x291/\x3\x2\x2\x2\x292\x294\aJ\x2\x2\x293\x295\a\x41\x2\x2"+
		"\x294\x293\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x299\x3\x2\x2\x2\x296"+
		"\x297\x5\xF2z\x2\x297\x298\x5\xC6\x64\x2\x298\x29A\x3\x2\x2\x2\x299\x296"+
		"\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x29C\x5"+
		"\xEAv\x2\x29C\x29D\a\x15F\x2\x2\x29D\x31\x3\x2\x2\x2\x29E\x2A0\x5\x8E"+
		"H\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A2\x3\x2\x2\x2"+
		"\x2A1\x2A3\x5.\x18\x2\x2A2\x2A1\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3"+
		"\x2A4\x3\x2\x2\x2\x2A4\x2A6\a#\x2\x2\x2A5\x2A7\aU\x2\x2\x2A6\x2A5\x3\x2"+
		"\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AD\x5\x64\x33"+
		"\x2\x2A9\x2AA\a\x123\x2\x2\x2AA\x2AC\x5\x64\x33\x2\x2AB\x2A9\x3\x2\x2"+
		"\x2\x2AC\x2AF\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2"+
		"\x2AE\x2B0\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2B0\x2B1\a\x15F\x2\x2\x2B1"+
		"\x2C4\x3\x2\x2\x2\x2B2\x2B4\x5\x8EH\x2\x2B3\x2B2\x3\x2\x2\x2\x2B3\x2B4"+
		"\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B7\a\x41\x2\x2\x2B6\x2B8\aU"+
		"\x2\x2\x2B7\x2B6\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2"+
		"\x2\x2B9\x2BE\x5\x64\x33\x2\x2BA\x2BB\a\x123\x2\x2\x2BB\x2BD\x5\x64\x33"+
		"\x2\x2BC\x2BA\x3\x2\x2\x2\x2BD\x2C0\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2\x2"+
		"\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C1\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2\x2\x2C1"+
		"\x2C2\a\x15F\x2\x2\x2C2\x2C4\x3\x2\x2\x2\x2C3\x29F\x3\x2\x2\x2\x2C3\x2B3"+
		"\x3\x2\x2\x2\x2C4\x33\x3\x2\x2\x2\x2C5\x2C7\x5\x8EH\x2\x2C6\x2C5\x3\x2"+
		"\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2CA\x5\x8CG\x2"+
		"\x2C9\x2C8\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB"+
		"\x2CD\x5\x36\x1C\x2\x2CC\x2CE\x5\xE8u\x2\x2CD\x2CC\x3\x2\x2\x2\x2CD\x2CE"+
		"\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D2\x5\x16\f\x2\x2D0\x2D1\a\xE"+
		"\x2\x2\x2D1\x2D3\x5\x128\x95\x2\x2D2\x2D0\x3\x2\x2\x2\x2D2\x2D3\x3\x2"+
		"\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D5\x5\x18\r\x2\x2D5\x2D6\x5\xE\b\x2"+
		"\x2D6\x2DB\x5,\x17\x2\x2D7\x2D8\a\x19\x2\x2\x2D8\x2D9\x5\x36\x1C\x2\x2D9"+
		"\x2DA\a\x15F\x2\x2\x2DA\x2DC\x3\x2\x2\x2\x2DB\x2D7\x3\x2\x2\x2\x2DB\x2DC"+
		"\x3\x2\x2\x2\x2DC\x35\x3\x2\x2\x2\x2DD\x2DE\t\n\x2\x2\x2DE\x37\x3\x2\x2"+
		"\x2\x2DF\x2E1\x5.\x18\x2\x2E0\x2DF\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1"+
		"\x2E2\x3\x2\x2\x2\x2E2\x2E3\a\x11\x2\x2\x2E3\x2E4\x5\x128\x95\x2\x2E4"+
		"\x2E5\x5\xC6\x64\x2\x2E5\x2E8\x5\xC8\x65\x2\x2E6\x2E7\a\x6\x2\x2\x2E7"+
		"\x2E9\x5\xFC\x7F\x2\x2E8\x2E6\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EA"+
		"\x3\x2\x2\x2\x2EA\x2EB\a\x15F\x2\x2\x2EB\x39\x3\x2\x2\x2\x2EC\x2EE\x5"+
		"@!\x2\x2ED\x2EC\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2"+
		"\x2EF\x2F1\at\x2\x2\x2F0\x2F2\x5\xE8u\x2\x2F1\x2F0\x3\x2\x2\x2\x2F1\x2F2"+
		"\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F6\x5\x128\x95\x2\x2F4\x2F5"+
		"\a\x5\x2\x2\x2F5\x2F7\a\x133\x2\x2\x2F6\x2F4\x3\x2\x2\x2\x2F6\x2F7\x3"+
		"\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2FA\x5\xE\b\x2\x2F9\x2FB\x5<\x1F"+
		"\x2\x2FA\x2F9\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FA\x3\x2\x2\x2"+
		"\x2FC\x2FD\x3\x2\x2\x2\x2FD\x301\x3\x2\x2\x2\x2FE\x2FF\a\x19\x2\x2\x2FF"+
		"\x300\at\x2\x2\x300\x302\a\x15F\x2\x2\x301\x2FE\x3\x2\x2\x2\x301\x302"+
		"\x3\x2\x2\x2\x302;\x3\x2\x2\x2\x303\x304\a\x30\x2\x2\x304\x305\a\x12\x2"+
		"\x2\x305\x306\x5\x128\x95\x2\x306\x307\a\x120\x2\x2\x307\x308\x5\x66\x34"+
		"\x2\x308\x30B\a\x121\x2\x2\x309\x30A\t\v\x2\x2\x30A\x30C\x5\xF8}\x2\x30B"+
		"\x309\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30E"+
		"\x5\xE\b\x2\x30E\x318\x3\x2\x2\x2\x30F\x310\a\x30\x2\x2\x310\x313\x5\x128"+
		"\x95\x2\x311\x312\t\v\x2\x2\x312\x314\x5\xF8}\x2\x313\x311\x3\x2\x2\x2"+
		"\x313\x314\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x316\x5\xE\b\x2\x316"+
		"\x318\x3\x2\x2\x2\x317\x303\x3\x2\x2\x2\x317\x30F\x3\x2\x2\x2\x318=\x3"+
		"\x2\x2\x2\x319\x31B\x5@!\x2\x31A\x319\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2"+
		"\x31B\x31C\x3\x2\x2\x2\x31C\x31E\aH\x2\x2\x31D\x31F\x5\xE8u\x2\x31E\x31D"+
		"\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321\x5"+
		"\x128\x95\x2\x321\x323\x5\xE\b\x2\x322\x324\x5<\x1F\x2\x323\x322\x3\x2"+
		"\x2\x2\x324\x325\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x325\x326\x3\x2\x2"+
		"\x2\x326\x32A\x3\x2\x2\x2\x327\x328\a\x19\x2\x2\x328\x329\aH\x2\x2\x329"+
		"\x32B\a\x15F\x2\x2\x32A\x327\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B?\x3"+
		"\x2\x2\x2\x32C\x32E\t\f\x2\x2\x32D\x32C\x3\x2\x2\x2\x32E\x32F\x3\x2\x2"+
		"\x2\x32F\x32D\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x41\x3\x2\x2\x2\x331"+
		"\x332\a\t\x2\x2\x332\x333\a\x65\x2\x2\x333\x334\x5\xEAv\x2\x334\x338\x5"+
		"\xE\b\x2\x335\x337\x5\f\a\x2\x336\x335\x3\x2\x2\x2\x337\x33A\x3\x2\x2"+
		"\x2\x338\x336\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x33B\x3\x2\x2\x2"+
		"\x33A\x338\x3\x2\x2\x2\x33B\x33C\a\x19\x2\x2\x33C\x33D\a\x65\x2\x2\x33D"+
		"\x33E\a\x15F\x2\x2\x33E\x43\x3\x2\x2\x2\x33F\x341\x5\x8EH\x2\x340\x33F"+
		"\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341\x343\x3\x2\x2\x2\x342\x344\x5"+
		"H%\x2\x343\x342\x3\x2\x2\x2\x343\x344\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2"+
		"\x345\x347\a\x62\x2\x2\x346\x348\x5\xE8u\x2\x347\x346\x3\x2\x2\x2\x347"+
		"\x348\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34B\x5\x128\x95\x2\x34A"+
		"\x34C\x5J&\x2\x34B\x34A\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34F\x3"+
		"\x2\x2\x2\x34D\x34E\t\r\x2\x2\x34E\x350\x5\xF8}\x2\x34F\x34D\x3\x2\x2"+
		"\x2\x34F\x350\x3\x2\x2\x2\x350\x355\x3\x2\x2\x2\x351\x352\a\x123\x2\x2"+
		"\x352\x354\x5\xF8}\x2\x353\x351\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355"+
		"\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x35B\x3\x2\x2\x2\x357\x355"+
		"\x3\x2\x2\x2\x358\x35A\x5N(\x2\x359\x358\x3\x2\x2\x2\x35A\x35D\x3\x2\x2"+
		"\x2\x35B\x359\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C\x35E\x3\x2\x2\x2"+
		"\x35D\x35B\x3\x2\x2\x2\x35E\x362\x5\xE\b\x2\x35F\x361\x5v<\x2\x360\x35F"+
		"\x3\x2\x2\x2\x361\x364\x3\x2\x2\x2\x362\x360\x3\x2\x2\x2\x362\x363\x3"+
		"\x2\x2\x2\x363\x365\x3\x2\x2\x2\x364\x362\x3\x2\x2\x2\x365\x366\a\x19"+
		"\x2\x2\x366\x367\a\x62\x2\x2\x367\x368\a\x15F\x2\x2\x368\x45\x3\x2\x2"+
		"\x2\x369\x36B\x5\x8EH\x2\x36A\x369\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B"+
		"\x36D\x3\x2\x2\x2\x36C\x36E\x5H%\x2\x36D\x36C\x3\x2\x2\x2\x36D\x36E\x3"+
		"\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x371\a\xE\x2\x2\x370\x372\x5\xE8"+
		"u\x2\x371\x370\x3\x2\x2\x2\x371\x372\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2"+
		"\x373\x375\x5\x128\x95\x2\x374\x376\x5J&\x2\x375\x374\x3\x2\x2\x2\x375"+
		"\x376\x3\x2\x2\x2\x376\x379\x3\x2\x2\x2\x377\x378\a\'\x2\x2\x378\x37A"+
		"\x5\xF8}\x2\x379\x377\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x384\x3\x2"+
		"\x2\x2\x37B\x37C\a^\x2\x2\x37C\x381\x5\xF8}\x2\x37D\x37E\a\x123\x2\x2"+
		"\x37E\x380\x5\xF8}\x2\x37F\x37D\x3\x2\x2\x2\x380\x383\x3\x2\x2\x2\x381"+
		"\x37F\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2\x382\x385\x3\x2\x2\x2\x383\x381"+
		"\x3\x2\x2\x2\x384\x37B\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x389\x3"+
		"\x2\x2\x2\x386\x388\x5N(\x2\x387\x386\x3\x2\x2\x2\x388\x38B\x3\x2\x2\x2"+
		"\x389\x387\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x38C\x3\x2\x2\x2\x38B"+
		"\x389\x3\x2\x2\x2\x38C\x390\x5\xE\b\x2\x38D\x38F\x5v<\x2\x38E\x38D\x3"+
		"\x2\x2\x2\x38F\x392\x3\x2\x2\x2\x390\x38E\x3\x2\x2\x2\x390\x391\x3\x2"+
		"\x2\x2\x391\x393\x3\x2\x2\x2\x392\x390\x3\x2\x2\x2\x393\x394\a\x19\x2"+
		"\x2\x394\x395\a\xE\x2\x2\x395\x396\a\x15F\x2\x2\x396G\x3\x2\x2\x2\x397"+
		"\x399\t\xE\x2\x2\x398\x397\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x398"+
		"\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39BI\x3\x2\x2\x2\x39C\x39D\a\xEA\x2"+
		"\x2\x39D\x3A5\x5L\'\x2\x39E\x3A0\a\x123\x2\x2\x39F\x3A1\x5\x8EH\x2\x3A0"+
		"\x39F\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A4"+
		"\x5L\'\x2\x3A3\x39E\x3\x2\x2\x2\x3A4\x3A7\x3\x2\x2\x2\x3A5\x3A3\x3\x2"+
		"\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3A8\x3\x2\x2\x2\x3A7\x3A5\x3\x2\x2"+
		"\x2\x3A8\x3A9\a\xEC\x2\x2\x3A9K\x3\x2\x2\x2\x3AA\x3AC\x5\x8EH\x2\x3AB"+
		"\x3AA\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AE\x3\x2\x2\x2\x3AD\x3AF"+
		"\t\xF\x2\x2\x3AE\x3AD\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B0\x3\x2"+
		"\x2\x2\x3B0\x3B1\x5\x128\x95\x2\x3B1M\x3\x2\x2\x2\x3B2\x3B3\a\x95\x2\x2"+
		"\x3B3\x3B4\x5\xF2z\x2\x3B4\x3B5\a,\x2\x2\x3B5\x3BA\x5P)\x2\x3B6\x3B7\a"+
		"\x123\x2\x2\x3B7\x3B9\x5P)\x2\x3B8\x3B6\x3\x2\x2\x2\x3B9\x3BC\x3\x2\x2"+
		"\x2\x3BA\x3B8\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BBO\x3\x2\x2\x2\x3BC"+
		"\x3BA\x3\x2\x2\x2\x3BD\x3C3\t\x10\x2\x2\x3BE\x3C3\x5\xFC\x7F\x2\x3BF\x3C0"+
		"\a\x66\x2\x2\x3C0\x3C1\a\x11C\x2\x2\x3C1\x3C3\a\x11D\x2\x2\x3C2\x3BD\x3"+
		"\x2\x2\x2\x3C2\x3BE\x3\x2\x2\x2\x3C2\x3BF\x3\x2\x2\x2\x3C3Q\x3\x2\x2\x2"+
		"\x3C4\x3C6\x5\x8EH\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6"+
		"\x3C8\x3\x2\x2\x2\x3C7\x3C9\x5H%\x2\x3C8\x3C7\x3\x2\x2\x2\x3C8\x3C9\x3"+
		"\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x3CC\ao\x2\x2\x3CB\x3CD\x5\xE8u\x2"+
		"\x3CC\x3CB\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE"+
		"\x3D0\x5\x128\x95\x2\x3CF\x3D1\x5J&\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1"+
		"\x3\x2\x2\x2\x3D1\x3DB\x3\x2\x2\x2\x3D2\x3D3\a^\x2\x2\x3D3\x3D8\x5\xF8"+
		"}\x2\x3D4\x3D5\a\x123\x2\x2\x3D5\x3D7\x5\xF8}\x2\x3D6\x3D4\x3\x2\x2\x2"+
		"\x3D7\x3DA\x3\x2\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9"+
		"\x3DC\x3\x2\x2\x2\x3DA\x3D8\x3\x2\x2\x2\x3DB\x3D2\x3\x2\x2\x2\x3DB\x3DC"+
		"\x3\x2\x2\x2\x3DC\x3E0\x3\x2\x2\x2\x3DD\x3DF\x5N(\x2\x3DE\x3DD\x3\x2\x2"+
		"\x2\x3DF\x3E2\x3\x2\x2\x2\x3E0\x3DE\x3\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2"+
		"\x3E1\x3E3\x3\x2\x2\x2\x3E2\x3E0\x3\x2\x2\x2\x3E3\x3E7\x5\xE\b\x2\x3E4"+
		"\x3E6\x5v<\x2\x3E5\x3E4\x3\x2\x2\x2\x3E6\x3E9\x3\x2\x2\x2\x3E7\x3E5\x3"+
		"\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3EA\x3\x2\x2\x2\x3E9\x3E7\x3\x2"+
		"\x2\x2\x3EA\x3EB\a\x19\x2\x2\x3EB\x3EC\ao\x2\x2\x3EC\x3ED\a\x15F\x2\x2"+
		"\x3EDS\x3\x2\x2\x2\x3EE\x3F0\x5\x8EH\x2\x3EF\x3EE\x3\x2\x2\x2\x3EF\x3F0"+
		"\x3\x2\x2\x2\x3F0\x3F2\x3\x2\x2\x2\x3F1\x3F3\x5H%\x2\x3F2\x3F1\x3\x2\x2"+
		"\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F6\aW\x2\x2\x3F5"+
		"\x3F7\x5\xE8u\x2\x3F6\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F8"+
		"\x3\x2\x2\x2\x3F8\x3FA\x5\x128\x95\x2\x3F9\x3FB\x5J&\x2\x3FA\x3F9\x3\x2"+
		"\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3FD\x3\x2\x2\x2\x3FC\x3FE\x5&\x14\x2"+
		"\x3FD\x3FC\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x401\x3\x2\x2\x2\x3FF"+
		"\x400\a\x6\x2\x2\x400\x402\x5\xF8}\x2\x401\x3FF\x3\x2\x2\x2\x401\x402"+
		"\x3\x2\x2\x2\x402\x406\x3\x2\x2\x2\x403\x405\x5N(\x2\x404\x403\x3\x2\x2"+
		"\x2\x405\x408\x3\x2\x2\x2\x406\x404\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2"+
		"\x407\x409\x3\x2\x2\x2\x408\x406\x3\x2\x2\x2\x409\x40A\a\x15F\x2\x2\x40A"+
		"U\x3\x2\x2\x2\x40B\x40D\x5\x8EH\x2\x40C\x40B\x3\x2\x2\x2\x40C\x40D\x3"+
		"\x2\x2\x2\x40D\x40F\x3\x2\x2\x2\x40E\x410\x5H%\x2\x40F\x40E\x3\x2\x2\x2"+
		"\x40F\x410\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x413\aY\x2\x2\x412\x414"+
		"\x5\xE8u\x2\x413\x412\x3\x2\x2\x2\x413\x414\x3\x2\x2\x2\x414\x415\x3\x2"+
		"\x2\x2\x415\x418\x5\x128\x95\x2\x416\x417\t\x11\x2\x2\x417\x419\x5\xF8"+
		"}\x2\x418\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2"+
		"\x41A\x41C\x5\xE\b\x2\x41B\x41D\x5X-\x2\x41C\x41B\x3\x2\x2\x2\x41D\x41E"+
		"\x3\x2\x2\x2\x41E\x41C\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F\x420\x3"+
		"\x2\x2\x2\x420\x422\a\x19\x2\x2\x421\x423\aY\x2\x2\x422\x421\x3\x2\x2"+
		"\x2\x422\x423\x3\x2\x2\x2\x423\x424\x3\x2\x2\x2\x424\x425\a\x15F\x2\x2"+
		"\x425W\x3\x2\x2\x2\x426\x428\x5\x8EH\x2\x427\x426\x3\x2\x2\x2\x427\x428"+
		"\x3\x2\x2\x2\x428\x42A\x3\x2\x2\x2\x429\x42B\a\x30\x2\x2\x42A\x429\x3"+
		"\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x430\x5\x128"+
		"\x95\x2\x42D\x42E\x5\xC6\x64\x2\x42E\x42F\x5\xC8\x65\x2\x42F\x431\x3\x2"+
		"\x2\x2\x430\x42D\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2"+
		"\x2\x432\x433\x5\xE\b\x2\x433Y\x3\x2\x2\x2\x434\x436\x5\x8EH\x2\x435\x434"+
		"\x3\x2\x2\x2\x435\x436\x3\x2\x2\x2\x436\x438\x3\x2\x2\x2\x437\x439\x5"+
		"\x8CG\x2\x438\x437\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2"+
		"\x2\x43A\x43C\aZ\x2\x2\x43B\x43D\x5\xE8u\x2\x43C\x43B\x3\x2\x2\x2\x43C"+
		"\x43D\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x441\x5\x128\x95\x2\x43F"+
		"\x440\a\x6\x2\x2\x440\x442\x5\xF8}\x2\x441\x43F\x3\x2\x2\x2\x441\x442"+
		"\x3\x2\x2\x2\x442\x457\x3\x2\x2\x2\x443\x458\a\x15F\x2\x2\x444\x446\x5"+
		"\\/\x2\x445\x444\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x445\x3\x2\x2"+
		"\x2\x447\x448\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44A\a\x15F\x2\x2"+
		"\x44A\x458\x3\x2\x2\x2\x44B\x44D\x5\xE\b\x2\x44C\x44E\x5^\x30\x2\x44D"+
		"\x44C\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F\x44D\x3\x2\x2\x2\x44F\x450"+
		"\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x453\a\x19\x2\x2\x452\x454\aZ"+
		"\x2\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x455\x3\x2\x2"+
		"\x2\x455\x456\a\x15F\x2\x2\x456\x458\x3\x2\x2\x2\x457\x443\x3\x2\x2\x2"+
		"\x457\x445\x3\x2\x2\x2\x457\x44B\x3\x2\x2\x2\x458[\x3\x2\x2\x2\x459\x45B"+
		"\x5\x8EH\x2\x45A\x459\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45D\x3\x2"+
		"\x2\x2\x45C\x45E\x5p\x39\x2\x45D\x45C\x3\x2\x2\x2\x45D\x45E\x3\x2\x2\x2"+
		"\x45E\x46A\x3\x2\x2\x2\x45F\x460\x6/\x4\x2\x460\x462\au\x2\x2\x461\x463"+
		"\x5r:\x2\x462\x461\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x46B\x3\x2\x2"+
		"\x2\x464\x465\x6/\x5\x2\x465\x467\a\x8D\x2\x2\x466\x468\x5r:\x2\x467\x466"+
		"\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x46B\x3\x2\x2\x2\x469\x46B\t\x12"+
		"\x2\x2\x46A\x45F\x3\x2\x2\x2\x46A\x464\x3\x2\x2\x2\x46A\x469\x3\x2\x2"+
		"\x2\x46B]\x3\x2\x2\x2\x46C\x46E\x5\x8EH\x2\x46D\x46C\x3\x2\x2\x2\x46D"+
		"\x46E\x3\x2\x2\x2\x46E\x470\x3\x2\x2\x2\x46F\x471\x5p\x39\x2\x470\x46F"+
		"\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x486\x3\x2\x2\x2\x472\x473\au"+
		"\x2\x2\x473\x474\x5\xE\b\x2\x474\x475\x5,\x17\x2\x475\x477\a\x19\x2\x2"+
		"\x476\x478\au\x2\x2\x477\x476\x3\x2\x2\x2\x477\x478\x3\x2\x2\x2\x478\x487"+
		"\x3\x2\x2\x2\x479\x47A\au\x2\x2\x47A\x47B\a\x153\x2\x2\x47B\x487\x5\xC8"+
		"\x65\x2\x47C\x47D\a\x8D\x2\x2\x47D\x47E\x5\xE\b\x2\x47E\x47F\x5,\x17\x2"+
		"\x47F\x481\a\x19\x2\x2\x480\x482\a\x8D\x2\x2\x481\x480\x3\x2\x2\x2\x481"+
		"\x482\x3\x2\x2\x2\x482\x487\x3\x2\x2\x2\x483\x484\a\x8D\x2\x2\x484\x485"+
		"\a\x153\x2\x2\x485\x487\x5\xC8\x65\x2\x486\x472\x3\x2\x2\x2\x486\x479"+
		"\x3\x2\x2\x2\x486\x47C\x3\x2\x2\x2\x486\x483\x3\x2\x2\x2\x487\x488\x3"+
		"\x2\x2\x2\x488\x489\x5\xE\b\x2\x489_\x3\x2\x2\x2\x48A\x48C\x5\x8EH\x2"+
		"\x48B\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D"+
		"\x48E\x5\x62\x32\x2\x48E\x493\x5\x64\x33\x2\x48F\x490\a\x123\x2\x2\x490"+
		"\x492\x5\x64\x33\x2\x491\x48F\x3\x2\x2\x2\x492\x495\x3\x2\x2\x2\x493\x491"+
		"\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494\x496\x3\x2\x2\x2\x495\x493\x3"+
		"\x2\x2\x2\x496\x497\x5\xE\b\x2\x497\x61\x3\x2\x2\x2\x498\x49A\t\x13\x2"+
		"\x2\x499\x498\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2"+
		"\x49B\x49C\x3\x2\x2\x2\x49C\x63\x3\x2\x2\x2\x49D\x49F\a\x12\x2\x2\x49E"+
		"\x49D\x3\x2\x2\x2\x49E\x49F\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A5"+
		"\x5\x128\x95\x2\x4A1\x4A2\a\x120\x2\x2\x4A2\x4A3\x5\x66\x34\x2\x4A3\x4A4"+
		"\a\x121\x2\x2\x4A4\x4A6\x3\x2\x2\x2\x4A5\x4A1\x3\x2\x2\x2\x4A5\x4A6\x3"+
		"\x2\x2\x2\x4A6\x4AA\x3\x2\x2\x2\x4A7\x4A8\x5\xC6\x64\x2\x4A8\x4A9\x5\xC8"+
		"\x65\x2\x4A9\x4AB\x3\x2\x2\x2\x4AA\x4A7\x3\x2\x2\x2\x4AA\x4AB\x3\x2\x2"+
		"\x2\x4AB\x4AE\x3\x2\x2\x2\x4AC\x4AD\t\v\x2\x2\x4AD\x4AF\x5\xF8}\x2\x4AE"+
		"\x4AC\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AF\x65\x3\x2\x2\x2\x4B0\x4B4"+
		"\x5\xC8\x65\x2\x4B1\x4B2\a\x121\x2\x2\x4B2\x4B3\a\x120\x2\x2\x4B3\x4B5"+
		"\x5\xC8\x65\x2\x4B4\x4B1\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B4\x3"+
		"\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4C1\x3\x2\x2\x2\x4B8\x4BB\x5\xC8"+
		"\x65\x2\x4B9\x4BA\a\x123\x2\x2\x4BA\x4BC\x5\xC8\x65\x2\x4BB\x4B9\x3\x2"+
		"\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BB\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2"+
		"\x2\x4BE\x4C1\x3\x2\x2\x2\x4BF\x4C1\x5\xC8\x65\x2\x4C0\x4B0\x3\x2\x2\x2"+
		"\x4C0\x4B8\x3\x2\x2\x2\x4C0\x4BF\x3\x2\x2\x2\x4C1g\x3\x2\x2\x2\x4C2\x4C4"+
		"\x5\x8EH\x2\x4C3\x4C2\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C6\x3\x2"+
		"\x2\x2\x4C5\x4C7\x5\x8CG\x2\x4C6\x4C5\x3\x2\x2\x2\x4C6\x4C7\x3\x2\x2\x2"+
		"\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4CF\aj\x2\x2\x4C9\x4CA\a>\x2\x2\x4CA\x4D0"+
		"\x5j\x36\x2\x4CB\x4CD\x5\xE8u\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2"+
		"\x2\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4D0\x5\x128\x95\x2\x4CF\x4C9\x3\x2"+
		"\x2\x2\x4CF\x4CC\x3\x2\x2\x2\x4D0\x4D2\x3\x2\x2\x2\x4D1\x4D3\x5j\x36\x2"+
		"\x4D2\x4D1\x3\x2\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4D6\x3\x2\x2\x2\x4D4"+
		"\x4D5\a\x6\x2\x2\x4D5\x4D7\x5\xF8}\x2\x4D6\x4D4\x3\x2\x2\x2\x4D6\x4D7"+
		"\x3\x2\x2\x2\x4D7\x4F8\x3\x2\x2\x2\x4D8\x4DC\aR\x2\x2\x4D9\x4DB\x5l\x37"+
		"\x2\x4DA\x4D9\x3\x2\x2\x2\x4DB\x4DE\x3\x2\x2\x2\x4DC\x4DA\x3\x2\x2\x2"+
		"\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4E2\x3\x2\x2\x2\x4DE\x4DC\x3\x2\x2\x2\x4DF"+
		"\x4E0\x5\xC6\x64\x2\x4E0\x4E1\x5\xC8\x65\x2\x4E1\x4E3\x3\x2\x2\x2\x4E2"+
		"\x4DF\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4F9"+
		"\a\x15F\x2\x2\x4E5\x4E7\x5n\x38\x2\x4E6\x4E5\x3\x2\x2\x2\x4E7\x4E8\x3"+
		"\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EA\x3\x2"+
		"\x2\x2\x4EA\x4EB\a\x15F\x2\x2\x4EB\x4F9\x3\x2\x2\x2\x4EC\x4EE\x5\xE\b"+
		"\x2\x4ED\x4EF\x5t;\x2\x4EE\x4ED\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0"+
		"\x4EE\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F4"+
		"\a\x19\x2\x2\x4F3\x4F5\aj\x2\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2"+
		"\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F7\a\x15F\x2\x2\x4F7\x4F9\x3\x2\x2"+
		"\x2\x4F8\x4D8\x3\x2\x2\x2\x4F8\x4E6\x3\x2\x2\x2\x4F8\x4EC\x3\x2\x2\x2"+
		"\x4F9i\x3\x2\x2\x2\x4FA\x503\a\x120\x2\x2\x4FB\x500\x5(\x15\x2\x4FC\x4FD"+
		"\a\x123\x2\x2\x4FD\x4FF\x5(\x15\x2\x4FE\x4FC\x3\x2\x2\x2\x4FF\x502\x3"+
		"\x2\x2\x2\x500\x4FE\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x504\x3\x2"+
		"\x2\x2\x502\x500\x3\x2\x2\x2\x503\x4FB\x3\x2\x2\x2\x503\x504\x3\x2\x2"+
		"\x2\x504\x505\x3\x2\x2\x2\x505\x513\a\x121\x2\x2\x506\x50F\a\x11C\x2\x2"+
		"\x507\x50C\x5(\x15\x2\x508\x509\a\x123\x2\x2\x509\x50B\x5(\x15\x2\x50A"+
		"\x508\x3\x2\x2\x2\x50B\x50E\x3\x2\x2\x2\x50C\x50A\x3\x2\x2\x2\x50C\x50D"+
		"\x3\x2\x2\x2\x50D\x510\x3\x2\x2\x2\x50E\x50C\x3\x2\x2\x2\x50F\x507\x3"+
		"\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x513\a\x11D"+
		"\x2\x2\x512\x4FA\x3\x2\x2\x2\x512\x506\x3\x2\x2\x2\x513k\x3\x2\x2\x2\x514"+
		"\x516\x5\x8EH\x2\x515\x514\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x518"+
		"\x3\x2\x2\x2\x517\x519\x5p\x39\x2\x518\x517\x3\x2\x2\x2\x518\x519\x3\x2"+
		"\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51B\t\x14\x2\x2\x51Bm\x3\x2\x2\x2\x51C"+
		"\x51E\x5\x8EH\x2\x51D\x51C\x3\x2\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x520"+
		"\x3\x2\x2\x2\x51F\x521\x5p\x39\x2\x520\x51F\x3\x2\x2\x2\x520\x521\x3\x2"+
		"\x2\x2\x521\x52D\x3\x2\x2\x2\x522\x523\x6\x38\x6\x2\x523\x525\t\x15\x2"+
		"\x2\x524\x526\x5\xC8\x65\x2\x525\x524\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2"+
		"\x526\x52E\x3\x2\x2\x2\x527\x528\x6\x38\a\x2\x528\x52A\t\x16\x2\x2\x529"+
		"\x52B\x5r:\x2\x52A\x529\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x52E\x3"+
		"\x2\x2\x2\x52C\x52E\t\x14\x2\x2\x52D\x522\x3\x2\x2\x2\x52D\x527\x3\x2"+
		"\x2\x2\x52D\x52C\x3\x2\x2\x2\x52Eo\x3\x2\x2\x2\x52F\x531\t\x17\x2\x2\x530"+
		"\x52F\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532\x530\x3\x2\x2\x2\x532\x533"+
		"\x3\x2\x2\x2\x533q\x3\x2\x2\x2\x534\x539\x5\xC8\x65\x2\x535\x536\a\x123"+
		"\x2\x2\x536\x538\x5\xC8\x65\x2\x537\x535\x3\x2\x2\x2\x538\x53B\x3\x2\x2"+
		"\x2\x539\x537\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53As\x3\x2\x2\x2\x53B"+
		"\x539\x3\x2\x2\x2\x53C\x53E\x5\x8EH\x2\x53D\x53C\x3\x2\x2\x2\x53D\x53E"+
		"\x3\x2\x2\x2\x53E\x540\x3\x2\x2\x2\x53F\x541\x5p\x39\x2\x540\x53F\x3\x2"+
		"\x2\x2\x540\x541\x3\x2\x2\x2\x541\x556\x3\x2\x2\x2\x542\x543\a]\x2\x2"+
		"\x543\x544\x5\xE\b\x2\x544\x545\x5,\x17\x2\x545\x547\a\x19\x2\x2\x546"+
		"\x548\a]\x2\x2\x547\x546\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x557\x3"+
		"\x2\x2\x2\x549\x54A\a]\x2\x2\x54A\x54B\a\x153\x2\x2\x54B\x557\x5\xC8\x65"+
		"\x2\x54C\x54D\t\x16\x2\x2\x54D\x54E\x5\xE\b\x2\x54E\x54F\x5,\x17\x2\x54F"+
		"\x551\a\x19\x2\x2\x550\x552\t\x16\x2\x2\x551\x550\x3\x2\x2\x2\x551\x552"+
		"\x3\x2\x2\x2\x552\x557\x3\x2\x2\x2\x553\x554\t\x16\x2\x2\x554\x555\a\x153"+
		"\x2\x2\x555\x557\x5\xC8\x65\x2\x556\x542\x3\x2\x2\x2\x556\x549\x3\x2\x2"+
		"\x2\x556\x54C\x3\x2\x2\x2\x556\x553\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2"+
		"\x558\x559\x5\xE\b\x2\x559u\x3\x2\x2\x2\x55A\x56B\x5\x34\x1B\x2\x55B\x56B"+
		"\x5~@\x2\x55C\x56B\x5x=\x2\x55D\x56B\x5\x80\x41\x2\x55E\x56B\x5`\x31\x2"+
		"\x55F\x56B\x5h\x35\x2\x560\x56B\x5\x88\x45\x2\x561\x56B\x5R*\x2\x562\x56B"+
		"\x5\x46$\x2\x563\x56B\x5T+\x2\x564\x56B\x5V,\x2\x565\x56B\x5Z.\x2\x566"+
		"\x56B\x5\x44#\x2\x567\x56B\x5$\x13\x2\x568\x56B\x5\x10\t\x2\x569\x56B"+
		"\x5\xE\b\x2\x56A\x55A\x3\x2\x2\x2\x56A\x55B\x3\x2\x2\x2\x56A\x55C\x3\x2"+
		"\x2\x2\x56A\x55D\x3\x2\x2\x2\x56A\x55E\x3\x2\x2\x2\x56A\x55F\x3\x2\x2"+
		"\x2\x56A\x560\x3\x2\x2\x2\x56A\x561\x3\x2\x2\x2\x56A\x562\x3\x2\x2\x2"+
		"\x56A\x563\x3\x2\x2\x2\x56A\x564\x3\x2\x2\x2\x56A\x565\x3\x2\x2\x2\x56A"+
		"\x566\x3\x2\x2\x2\x56A\x567\x3\x2\x2\x2\x56A\x568\x3\x2\x2\x2\x56A\x569"+
		"\x3\x2\x2\x2\x56Bw\x3\x2\x2\x2\x56C\x56E\x5\x8EH\x2\x56D\x56C\x3\x2\x2"+
		"\x2\x56D\x56E\x3\x2\x2\x2\x56E\x570\x3\x2\x2\x2\x56F\x571\x5|?\x2\x570"+
		"\x56F\x3\x2\x2\x2\x570\x571\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x574"+
		"\aT\x2\x2\x573\x575\x5&\x14\x2\x574\x573\x3\x2\x2\x2\x574\x575\x3\x2\x2"+
		"\x2\x575\x578\x3\x2\x2\x2\x576\x577\a\x6\x2\x2\x577\x579\a\xAD\x2\x2\x578"+
		"\x576\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\x57B\x3\x2\x2\x2\x57A\x57C"+
		"\x5\x1A\xE\x2\x57B\x57A\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57F\x3"+
		"\x2\x2\x2\x57D\x57E\a\xE\x2\x2\x57E\x580\x5\x128\x95\x2\x57F\x57D\x3\x2"+
		"\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x583\x3\x2\x2\x2\x581\x582\a\x153\x2"+
		"\x2\x582\x584\x5\xC8\x65\x2\x583\x581\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2"+
		"\x584\x585\x3\x2\x2\x2\x585\x587\x5\xE\b\x2\x586\x588\x5z>\x2\x587\x586"+
		"\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58D\x5"+
		",\x17\x2\x58A\x58B\a\x19\x2\x2\x58B\x58C\aT\x2\x2\x58C\x58E\a\x15F\x2"+
		"\x2\x58D\x58A\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58Ey\x3\x2\x2\x2\x58F"+
		"\x596\t\x18\x2\x2\x590\x591\a\x11C\x2\x2\x591\x597\a\x11D\x2\x2\x592\x593"+
		"\a\x11C\x2\x2\x593\x594\x5\xE2r\x2\x594\x595\a\x11D\x2\x2\x595\x597\x3"+
		"\x2\x2\x2\x596\x590\x3\x2\x2\x2\x596\x592\x3\x2\x2\x2\x597\x598\x3\x2"+
		"\x2\x2\x598\x599\x5\xE\b\x2\x599{\x3\x2\x2\x2\x59A\x59C\t\x19\x2\x2\x59B"+
		"\x59A\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59B\x3\x2\x2\x2\x59D\x59E"+
		"\x3\x2\x2\x2\x59E}\x3\x2\x2\x2\x59F\x5A0\a\x10\x2\x2\x5A0\x5A2\t\n\x2"+
		"\x2\x5A1\x5A3\n\x2\x2\x2\x5A2\x5A1\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4"+
		"\x5A2\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6\x5A7"+
		"\x5\xE\b\x2\x5A7\x7F\x3\x2\x2\x2\x5A8\x5AA\x5\x8EH\x2\x5A9\x5A8\x3\x2"+
		"\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5AC\x3\x2\x2\x2\x5AB\x5AD\x5\x82\x42"+
		"\x2\x5AC\x5AB\x3\x2\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2"+
		"\x5AE\x5B1\aX\x2\x2\x5AF\x5B0\a\x11C\x2\x2\x5B0\x5B2\a\x11D\x2\x2\x5B1"+
		"\x5AF\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B5\x3\x2\x2\x2\x5B3\x5B4"+
		"\a\xE\x2\x2\x5B4\x5B6\x5\x128\x95\x2\x5B5\x5B3\x3\x2\x2\x2\x5B5\x5B6\x3"+
		"\x2\x2\x2\x5B6\x5B9\x3\x2\x2\x2\x5B7\x5B8\a\x153\x2\x2\x5B8\x5BA\x5\xC8"+
		"\x65\x2\x5B9\x5B7\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2"+
		"\x2\x5BB\x5BC\x5\xE\b\x2\x5BC\x5C0\x5,\x17\x2\x5BD\x5BE\a\x19\x2\x2\x5BE"+
		"\x5BF\aX\x2\x2\x5BF\x5C1\a\x15F\x2\x2\x5C0\x5BD\x3\x2\x2\x2\x5C0\x5C1"+
		"\x3\x2\x2\x2\x5C1\x81\x3\x2\x2\x2\x5C2\x5C4\a\x7F\x2\x2\x5C3\x5C2\x3\x2"+
		"\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C3\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2"+
		"\x2\x5C6\x83\x3\x2\x2\x2\x5C7\x5C8\t\x1A\x2\x2\x5C8\x85\x3\x2\x2\x2\x5C9"+
		"\x5CA\t\x1B\x2\x2\x5CA\x87\x3\x2\x2\x2\x5CB\x5CD\x5\x8EH\x2\x5CC\x5CB"+
		"\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CF\x3\x2\x2\x2\x5CE\x5D0\x5"+
		"\x8A\x46\x2\x5CF\x5CE\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D1\x3\x2"+
		"\x2\x2\x5D1\x5D4\ag\x2\x2\x5D2\x5D5\x5\x84\x43\x2\x5D3\x5D5\x5\x86\x44"+
		"\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D3\x3\x2\x2\x2\x5D5\x5D7\x3\x2\x2\x2"+
		"\x5D6\x5D8\a\xEC\x2\x2\x5D7\x5D6\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8"+
		"\x5D9\x3\x2\x2\x2\x5D9\x5DC\x5&\x14\x2\x5DA\x5DB\a\x6\x2\x2\x5DB\x5DD"+
		"\x5\xF8}\x2\x5DC\x5DA\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5E0\x3\x2"+
		"\x2\x2\x5DE\x5DF\a\x153\x2\x2\x5DF\x5E1\x5\xC8\x65\x2\x5E0\x5DE\x3\x2"+
		"\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E3\x5\xE\b\x2"+
		"\x5E3\x5E7\x5,\x17\x2\x5E4\x5E5\a\x19\x2\x2\x5E5\x5E6\ag\x2\x2\x5E6\x5E8"+
		"\a\x15F\x2\x2\x5E7\x5E4\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x89\x3"+
		"\x2\x2\x2\x5E9\x5EB\t\x1C\x2\x2\x5EA\x5E9\x3\x2\x2\x2\x5EB\x5EC\x3\x2"+
		"\x2\x2\x5EC\x5EA\x3\x2\x2\x2\x5EC\x5ED\x3\x2\x2\x2\x5ED\x8B\x3\x2\x2\x2"+
		"\x5EE\x5F0\t\x1D\x2\x2\x5EF\x5EE\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1"+
		"\x5EF\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\x8D\x3\x2\x2\x2\x5F3\x5F5"+
		"\x5\x90I\x2\x5F4\x5F3\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F4\x3\x2"+
		"\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x8F\x3\x2\x2\x2\x5F8\x5FA\a\x120\x2"+
		"\x2\x5F9\x5FB\x5\x92J\x2\x5FA\x5F9\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB"+
		"\x5FC\x3\x2\x2\x2\x5FC\x601\x5\x94K\x2\x5FD\x5FE\a\x123\x2\x2\x5FE\x600"+
		"\x5\x94K\x2\x5FF\x5FD\x3\x2\x2\x2\x600\x603\x3\x2\x2\x2\x601\x5FF\x3\x2"+
		"\x2\x2\x601\x602\x3\x2\x2\x2\x602\x604\x3\x2\x2\x2\x603\x601\x3\x2\x2"+
		"\x2\x604\x605\a\x121\x2\x2\x605\x608\x3\x2\x2\x2\x606\x608\a\x13F\x2\x2"+
		"\x607\x5F8\x3\x2\x2\x2\x607\x606\x3\x2\x2\x2\x608\x91\x3\x2\x2\x2\x609"+
		"\x60A\t\x1E\x2\x2\x60A\x60B\a\x122\x2\x2\x60B\x93\x3\x2\x2\x2\x60C\x619"+
		"\x5\xEAv\x2\x60D\x616\a\x11C\x2\x2\x60E\x613\x5\x96L\x2\x60F\x610\a\x123"+
		"\x2\x2\x610\x612\x5\x96L\x2\x611\x60F\x3\x2\x2\x2\x612\x615\x3\x2\x2\x2"+
		"\x613\x611\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x617\x3\x2\x2\x2\x615"+
		"\x613\x3\x2\x2\x2\x616\x60E\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x618"+
		"\x3\x2\x2\x2\x618\x61A\a\x11D\x2\x2\x619\x60D\x3\x2\x2\x2\x619\x61A\x3"+
		"\x2\x2\x2\x61A\x95\x3\x2\x2\x2\x61B\x61C\x5\xF2z\x2\x61C\x61D\x5\xC6\x64"+
		"\x2\x61D\x61E\x5\xC8\x65\x2\x61E\x621\x3\x2\x2\x2\x61F\x621\x5\xC8\x65"+
		"\x2\x620\x61B\x3\x2\x2\x2\x620\x61F\x3\x2\x2\x2\x621\x97\x3\x2\x2\x2\x622"+
		"\x623\a\x120\x2\x2\x623\x624\x5\x9AN\x2\x624\x629\x5\x94K\x2\x625\x626"+
		"\a\x123\x2\x2\x626\x628\x5\x94K\x2\x627\x625\x3\x2\x2\x2\x628\x62B\x3"+
		"\x2\x2\x2\x629\x627\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\x62C\x3\x2"+
		"\x2\x2\x62B\x629\x3\x2\x2\x2\x62C\x62D\a\x121\x2\x2\x62D\x62E\a\x15F\x2"+
		"\x2\x62E\x99\x3\x2\x2\x2\x62F\x630\a\x154\x2\x2\x630\x631\a\x122\x2\x2"+
		"\x631\x9B\x3\x2\x2\x2\x632\x633\a\x31\x2\x2\x633\x638\x5\xF2z\x2\x634"+
		"\x635\a\x123\x2\x2\x635\x637\x5\xF2z\x2\x636\x634\x3\x2\x2\x2\x637\x63A"+
		"\x3\x2\x2\x2\x638\x636\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63B\x3"+
		"\x2\x2\x2\x63A\x638\x3\x2\x2\x2\x63B\x63C\a\x15F\x2\x2\x63C\x649\x3\x2"+
		"\x2\x2\x63D\x63E\a;\x2\x2\x63E\x643\x5\xB8]\x2\x63F\x640\a\x123\x2\x2"+
		"\x640\x642\x5\xB8]\x2\x641\x63F\x3\x2\x2\x2\x642\x645\x3\x2\x2\x2\x643"+
		"\x641\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x646\x3\x2\x2\x2\x645\x643"+
		"\x3\x2\x2\x2\x646\x647\a\x15F\x2\x2\x647\x649\x3\x2\x2\x2\x648\x632\x3"+
		"\x2\x2\x2\x648\x63D\x3\x2\x2\x2\x649\x9D\x3\x2\x2\x2\x64A\x7D3\x5\xAE"+
		"X\x2\x64B\x7D3\x5\xC2\x62\x2\x64C\x64D\x6P\b\x2\x64D\x7D3\x5\xB6\\\x2"+
		"\x64E\x7D3\x5\xB4[\x2\x64F\x650\x6P\t\x2\x650\x7D3\x5\xBA^\x2\x651\x653"+
		"\a\x15\x2\x2\x652\x651\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2\x653\x654\x3"+
		"\x2\x2\x2\x654\x655\aK\x2\x2\x655\x656\x5\xC8\x65\x2\x656\x657\x5\xE\b"+
		"\x2\x657\x660\x5,\x17\x2\x658\x65A\a\x19\x2\x2\x659\x65B\t\x1F\x2\x2\x65A"+
		"\x659\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65E\x3\x2\x2\x2\x65C\x65E"+
		"\a\x1B\x2\x2\x65D\x658\x3\x2\x2\x2\x65D\x65C\x3\x2\x2\x2\x65E\x65F\x3"+
		"\x2\x2\x2\x65F\x661\x5\xE\b\x2\x660\x65D\x3\x2\x2\x2\x660\x661\x3\x2\x2"+
		"\x2\x661\x7D3\x3\x2\x2\x2\x662\x665\a\x87\x2\x2\x663\x664\a\x11C\x2\x2"+
		"\x664\x666\a\x11D\x2\x2\x665\x663\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666"+
		"\x667\x3\x2\x2\x2\x667\x7D3\x5\xE\b\x2\x668\x67D\a!\x2\x2\x669\x67E\x5"+
		"\xC8\x65\x2\x66A\x66C\a.\x2\x2\x66B\x66A\x3\x2\x2\x2\x66B\x66C\x3\x2\x2"+
		"\x2\x66C\x66D\x3\x2\x2\x2\x66D\x670\a`\x2\x2\x66E\x670\a\x92\x2\x2\x66F"+
		"\x66B\x3\x2\x2\x2\x66F\x66E\x3\x2\x2\x2\x670\x671\x3\x2\x2\x2\x671\x672"+
		"\x5\x128\x95\x2\x672\x673\x5\xC6\x64\x2\x673\x674\x5\xC8\x65\x2\x674\x67E"+
		"\x3\x2\x2\x2\x675\x676\a.\x2\x2\x676\x677\x5\x128\x95\x2\x677\x678\x5"+
		"\xC6\x64\x2\x678\x67B\x5\xC8\x65\x2\x679\x67A\a\x6\x2\x2\x67A\x67C\x5"+
		"\xF8}\x2\x67B\x679\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67E\x3\x2\x2"+
		"\x2\x67D\x669\x3\x2\x2\x2\x67D\x66F\x3\x2\x2\x2\x67D\x675\x3\x2\x2\x2"+
		"\x67E\x67F\x3\x2\x2\x2\x67F\x680\t \x2\x2\x680\x683\x5\xC8\x65\x2\x681"+
		"\x682\a\x42\x2\x2\x682\x684\x5\xC8\x65\x2\x683\x681\x3\x2\x2\x2\x683\x684"+
		"\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2\x685\x686\x5\xE\b\x2\x686\x68D\x5,"+
		"\x17\x2\x687\x68B\a\x34\x2\x2\x688\x689\a\x19\x2\x2\x689\x68B\a!\x2\x2"+
		"\x68A\x687\x3\x2\x2\x2\x68A\x688\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2\x68B"+
		"\x68C\x3\x2\x2\x2\x68C\x68E\x5\xE\b\x2\x68D\x68A\x3\x2\x2\x2\x68D\x68E"+
		"\x3\x2\x2\x2\x68E\x7D3\x3\x2\x2\x2\x68F\x690\a%\x2\x2\x690\x699\x5\xA0"+
		"Q\x2\x691\x693\a\x19\x2\x2\x692\x694\a%\x2\x2\x693\x692\x3\x2\x2\x2\x693"+
		"\x694\x3\x2\x2\x2\x694\x697\x3\x2\x2\x2\x695\x697\a\x1C\x2\x2\x696\x691"+
		"\x3\x2\x2\x2\x696\x695\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\x69A\x5"+
		"\xE\b\x2\x699\x696\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x7D3\x3\x2\x2"+
		"\x2\x69B\x69C\a\x15\x2\x2\x69C\x69D\a\f\x2\x2\x69D\x69F\x5\xE\b\x2\x69E"+
		"\x6A0\x5\xA2R\x2\x69F\x69E\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A9"+
		"\x3\x2\x2\x2\x6A1\x6A3\a\x19\x2\x2\x6A2\x6A4\a\f\x2\x2\x6A3\x6A2\x3\x2"+
		"\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A7\x3\x2\x2\x2\x6A5\x6A7\a\x1A\x2"+
		"\x2\x6A6\x6A1\x3\x2\x2\x2\x6A6\x6A5\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2"+
		"\x6A8\x6AA\x5\xE\b\x2\x6A9\x6A6\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA"+
		"\x7D3\x3\x2\x2\x2\x6AB\x6AC\a\x1D\x2\x2\x6AC\x7D3\x5\xE\b\x2\x6AD\x6AE"+
		"\a/\x2\x2\x6AE\x7D3\x5\xE\b\x2\x6AF\x6B1\a\n\x2\x2\x6B0\x6B2\x5\xC8\x65"+
		"\x2\x6B1\x6B0\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2"+
		"\x6B3\x7D3\x5\xE\b\x2\x6B4\x6B7\a=\x2\x2\x6B5\x6B8\a\xAD\x2\x2\x6B6\x6B8"+
		"\x5\xC8\x65\x2\x6B7\x6B5\x3\x2\x2\x2\x6B7\x6B6\x3\x2\x2\x2\x6B7\x6B8\x3"+
		"\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x7D3\x5\xE\b\x2\x6BA\x6C3\t!\x2\x2"+
		"\x6BB\x6C0\x5\xC8\x65\x2\x6BC\x6BD\a\x123\x2\x2\x6BD\x6BF\x5\xC8\x65\x2"+
		"\x6BE\x6BC\x3\x2\x2\x2\x6BF\x6C2\x3\x2\x2\x2\x6C0\x6BE\x3\x2\x2\x2\x6C0"+
		"\x6C1\x3\x2\x2\x2\x6C1\x6C4\x3\x2\x2\x2\x6C2\x6C0\x3\x2\x2\x2\x6C3\x6BB"+
		"\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C5\x3\x2\x2\x2\x6C5\x7D3\x5"+
		"\xE\b\x2\x6C6\x6C7\a\t\x2\x2\x6C7\x6C8\a?\x2\x2\x6C8\x6C9\x5\xE\b\x2\x6C9"+
		"\x6CC\x5,\x17\x2\x6CA\x6CB\a<\x2\x2\x6CB\x6CD\x5\xA8U\x2\x6CC\x6CA\x3"+
		"\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD\x6D2\x3\x2\x2\x2\x6CE\x6CF\aN\x2"+
		"\x2\x6CF\x6D0\x5\xE\b\x2\x6D0\x6D1\x5,\x17\x2\x6D1\x6D3\x3\x2\x2\x2\x6D2"+
		"\x6CE\x3\x2\x2\x2\x6D2\x6D3\x3\x2\x2\x2\x6D3\x6D9\x3\x2\x2\x2\x6D4\x6D6"+
		"\a\x19\x2\x2\x6D5\x6D7\a?\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D6\x6D7\x3\x2"+
		"\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DA\x5\xE\b\x2\x6D9\x6D4\x3\x2\x2\x2"+
		"\x6D9\x6DA\x3\x2\x2\x2\x6DA\x7D3\x3\x2\x2\x2\x6DB\x6DC\ak\x2\x2\x6DC\x6DD"+
		"\x5\xE\b\x2\x6DD\x6DE\x5,\x17\x2\x6DE\x6DF\aq\x2\x2\x6DF\x6E0\x5\xC8\x65"+
		"\x2\x6E0\x6E1\x5\xE\b\x2\x6E1\x7D3\x3\x2\x2\x2\x6E2\x6E6\a\\\x2\x2\x6E3"+
		"\x6E4\a!\x2\x2\x6E4\x6E6\a\xD2\x2\x2\x6E5\x6E2\x3\x2\x2\x2\x6E5\x6E3\x3"+
		"\x2\x2\x2\x6E6\x6EF\x3\x2\x2\x2\x6E7\x6E8\a`\x2\x2\x6E8\x6F0\x5\xF4{\x2"+
		"\x6E9\x6EA\x5\xF4{\x2\x6EA\x6EB\a\x6\x2\x2\x6EB\x6EC\x5\xF8}\x2\x6EC\x6F0"+
		"\x3\x2\x2\x2\x6ED\x6EE\a\x92\x2\x2\x6EE\x6F0\x5\xF4{\x2\x6EF\x6E7\x3\x2"+
		"\x2\x2\x6EF\x6E9\x3\x2\x2\x2\x6EF\x6ED\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2"+
		"\x2\x6F1\x6F2\a-\x2\x2\x6F2\x6F3\x5\xC8\x65\x2\x6F3\x6F4\x5\xE\b\x2\x6F4"+
		"\x6FB\x5,\x17\x2\x6F5\x6F9\a\x34\x2\x2\x6F6\x6F7\a\x19\x2\x2\x6F7\x6F9"+
		"\a!\x2\x2\x6F8\x6F5\x3\x2\x2\x2\x6F8\x6F6\x3\x2\x2\x2\x6F8\x6F9\x3\x2"+
		"\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA\x6FC\x5\xE\b\x2\x6FB\x6F8\x3\x2\x2\x2"+
		"\x6FB\x6FC\x3\x2\x2\x2\x6FC\x7D3\x3\x2\x2\x2\x6FD\x6FF\aO\x2\x2\x6FE\x700"+
		"\x5\xC8\x65\x2\x6FF\x6FE\x3\x2\x2\x2\x6FF\x700\x3\x2\x2\x2\x700\x701\x3"+
		"\x2\x2\x2\x701\x7D3\x5\xE\b\x2\x702\x703\ap\x2\x2\x703\x704\x5\xE\b\x2"+
		"\x704\x70B\x5,\x17\x2\x705\x707\aM\x2\x2\x706\x708\x5\xA6T\x2\x707\x706"+
		"\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x70A\x3\x2\x2\x2\x709\x705\x3"+
		"\x2\x2\x2\x70A\x70D\x3\x2\x2\x2\x70B\x709\x3\x2\x2\x2\x70B\x70C\x3\x2"+
		"\x2\x2\x70C\x712\x3\x2\x2\x2\x70D\x70B\x3\x2\x2\x2\x70E\x70F\aN\x2\x2"+
		"\x70F\x710\x5\xE\b\x2\x710\x711\x5,\x17\x2\x711\x713\x3\x2\x2\x2\x712"+
		"\x70E\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\x719\x3\x2\x2\x2\x714\x716"+
		"\a\x19\x2\x2\x715\x717\ap\x2\x2\x716\x715\x3\x2\x2\x2\x716\x717\x3\x2"+
		"\x2\x2\x717\x718\x3\x2\x2\x2\x718\x71A\x5\xE\b\x2\x719\x714\x3\x2\x2\x2"+
		"\x719\x71A\x3\x2\x2\x2\x71A\x7D3\x3\x2\x2\x2\x71B\x71C\a\t\x2\x2\x71C"+
		"\x71D\a\x64\x2\x2\x71D\x71E\x5\xC8\x65\x2\x71E\x71F\x5\xE\b\x2\x71F\x725"+
		"\x5,\x17\x2\x720\x722\a\x19\x2\x2\x721\x723\a\x64\x2\x2\x722\x721\x3\x2"+
		"\x2\x2\x722\x723\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x726\x5\xE\b\x2"+
		"\x725\x720\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x7D3\x3\x2\x2\x2\x727"+
		"\x728\a\t\x2\x2\x728\x729\al\x2\x2\x729\x72A\x5\xE\b\x2\x72A\x730\x5,"+
		"\x17\x2\x72B\x72D\a\x19\x2\x2\x72C\x72E\al\x2\x2\x72D\x72C\x3\x2\x2\x2"+
		"\x72D\x72E\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x731\x5\xE\b\x2\x730"+
		"\x72B\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x7D3\x3\x2\x2\x2\x732\x733"+
		"\a\x96\x2\x2\x733\x736\a=\x2\x2\x734\x737\a\xAD\x2\x2\x735\x737\x5\xC8"+
		"\x65\x2\x736\x734\x3\x2\x2\x2\x736\x735\x3\x2\x2\x2\x736\x737\x3\x2\x2"+
		"\x2\x737\x738\x3\x2\x2\x2\x738\x7D3\x5\xE\b\x2\x739\x73A\a\x96\x2\x2\x73A"+
		"\x73B\t\"\x2\x2\x73B\x7D3\x5\xE\b\x2\x73C\x73E\t#\x2\x2\x73D\x73C\x3\x2"+
		"\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\x740\a\x8F\x2"+
		"\x2\x740\x741\x5\xC8\x65\x2\x741\x743\x5\xE\b\x2\x742\x744\x5\xA4S\x2"+
		"\x743\x742\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x743\x3\x2\x2\x2\x745"+
		"\x746\x3\x2\x2\x2\x746\x74C\x3\x2\x2\x2\x747\x749\a\x19\x2\x2\x748\x74A"+
		"\a\x8F\x2\x2\x749\x748\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74B\x3"+
		"\x2\x2\x2\x74B\x74D\x5\xE\b\x2\x74C\x747\x3\x2\x2\x2\x74C\x74D\x3\x2\x2"+
		"\x2\x74D\x7D3\x3\x2\x2\x2\x74E\x74F\a\t\x2\x2\x74F\x752\aJ\x2\x2\x750"+
		"\x753\x5\xC8\x65\x2\x751\x753\x5\xAAV\x2\x752\x750\x3\x2\x2\x2\x752\x751"+
		"\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754\x755\x5\xE\b\x2\x755\x75B\x5,"+
		"\x17\x2\x756\x758\a\x19\x2\x2\x757\x759\aJ\x2\x2\x758\x757\x3\x2\x2\x2"+
		"\x758\x759\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75C\x5\xE\b\x2\x75B"+
		"\x756\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x7D3\x3\x2\x2\x2\x75D\x75E"+
		"\a\t\x2\x2\x75E\x75F\a\x91\x2\x2\x75F\x760\x5\xE\b\x2\x760\x766\x5,\x17"+
		"\x2\x761\x763\a\x19\x2\x2\x762\x764\a\x91\x2\x2\x763\x762\x3\x2\x2\x2"+
		"\x763\x764\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765\x767\x5\xE\b\x2\x766"+
		"\x761\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x7D3\x3\x2\x2\x2\x768\x769"+
		"\a\t\x2\x2\x769\x76A\a|\x2\x2\x76A\x76B\x5\xE\b\x2\x76B\x771\x5,\x17\x2"+
		"\x76C\x76E\a\x19\x2\x2\x76D\x76F\a|\x2\x2\x76E\x76D\x3\x2\x2\x2\x76E\x76F"+
		"\x3\x2\x2\x2\x76F\x770\x3\x2\x2\x2\x770\x772\x5\xE\b\x2\x771\x76C\x3\x2"+
		"\x2\x2\x771\x772\x3\x2\x2\x2\x772\x7D3\x3\x2\x2\x2\x773\x774\a\t\x2\x2"+
		"\x774\x775\a\x90\x2\x2\x775\x776\x5\xE\b\x2\x776\x77C\x5,\x17\x2\x777"+
		"\x779\a\x19\x2\x2\x778\x77A\a\x90\x2\x2\x779\x778\x3\x2\x2\x2\x779\x77A"+
		"\x3\x2\x2\x2\x77A\x77B\x3\x2\x2\x2\x77B\x77D\x5\xE\b\x2\x77C\x777\x3\x2"+
		"\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x7D3\x3\x2\x2\x2\x77E\x77F\a\t\x2\x2"+
		"\x77F\x780\a\x80\x2\x2\x780\x781\x5\xAAV\x2\x781\x782\x5\xE\b\x2\x782"+
		"\x788\x5,\x17\x2\x783\x785\a\x19\x2\x2\x784\x786\a\x80\x2\x2\x785\x784"+
		"\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x789\x5"+
		"\xE\b\x2\x788\x783\x3\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x7D3\x3\x2\x2"+
		"\x2\x78A\x78B\a\x97\x2\x2\x78B\x78C\x5\xC8\x65\x2\x78C\x78D\x5\xE\b\x2"+
		"\x78D\x793\x5,\x17\x2\x78E\x790\a\x19\x2\x2\x78F\x791\a\x97\x2\x2\x790"+
		"\x78F\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x792\x3\x2\x2\x2\x792\x794"+
		"\x5\xE\b\x2\x793\x78E\x3\x2\x2\x2\x793\x794\x3\x2\x2\x2\x794\x7D3\x3\x2"+
		"\x2\x2\x795\x7A9\a\xD5\x2\x2\x796\x797\a\x46\x2\x2\x797\x799\x5\xF4{\x2"+
		"\x798\x79A\a\xD7\x2\x2\x799\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A"+
		"\x79C\x3\x2\x2\x2\x79B\x79D\a\xDB\x2\x2\x79C\x79B\x3\x2\x2\x2\x79C\x79D"+
		"\x3\x2\x2\x2\x79D\x79F\x3\x2\x2\x2\x79E\x7A0\a\xDA\x2\x2\x79F\x79E\x3"+
		"\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A3\x3\x2\x2\x2\x7A1\x7A2\a\xD8"+
		"\x2\x2\x7A2\x7A4\x5\xC8\x65\x2\x7A3\x7A1\x3\x2\x2\x2\x7A3\x7A4\x3\x2\x2"+
		"\x2\x7A4\x7A7\x3\x2\x2\x2\x7A5\x7A6\a\xD9\x2\x2\x7A6\x7A8\x5\xC8\x65\x2"+
		"\x7A7\x7A5\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7AA\x3\x2\x2\x2\x7A9"+
		"\x796\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC"+
		"\a\x15F\x2\x2\x7AC\x7AD\a\x13E\x2\x2\x7AD\x7AE\a\xD6\x2\x2\x7AE\x7D3\x5"+
		"\xE\b\x2\x7AF\x7B0\a\xEE\x2\x2\x7B0\x7B1\x5\xC8\x65\x2\x7B1\x7B2\x5\xE"+
		"\b\x2\x7B2\x7D3\x3\x2\x2\x2\x7B3\x7B4\t$\x2\x2\x7B4\x7B5\a\x13E\x2\x2"+
		"\x7B5\x7D3\a\x15F\x2\x2\x7B6\x7B7\a\x15\x2\x2\x7B7\x7BA\x5\x128\x95\x2"+
		"\x7B8\x7B9\a\x97\x2\x2\x7B9\x7BB\x5\xE2r\x2\x7BA\x7B8\x3\x2\x2\x2\x7BA"+
		"\x7BB\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BD\x5\xE\b\x2\x7BD\x7D3"+
		"\x3\x2\x2\x2\x7BE\x7BF\x6P\n\x2\x7BF\x7C0\x5\xC8\x65\x2\x7C0\x7C1\x5\xE"+
		"\b\x2\x7C1\x7D3\x3\x2\x2\x2\x7C2\x7C3\x6P\v\x2\x7C3\x7C4\x5\xC8\x65\x2"+
		"\x7C4\x7C5\t%\x2\x2\x7C5\x7C6\x5\xE\b\x2\x7C6\x7C7\bP\x1\x2\x7C7\x7D3"+
		"\x3\x2\x2\x2\x7C8\x7C9\x6P\f\x2\x7C9\x7CC\x5\xC8\x65\x2\x7CA\x7CB\a\x123"+
		"\x2\x2\x7CB\x7CD\x5\xC8\x65\x2\x7CC\x7CA\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2"+
		"\x2\x7CE\x7CC\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2"+
		"\x7D0\x7D1\x5\xE\b\x2\x7D1\x7D3\x3\x2\x2\x2\x7D2\x64A\x3\x2\x2\x2\x7D2"+
		"\x64B\x3\x2\x2\x2\x7D2\x64C\x3\x2\x2\x2\x7D2\x64E\x3\x2\x2\x2\x7D2\x64F"+
		"\x3\x2\x2\x2\x7D2\x652\x3\x2\x2\x2\x7D2\x662\x3\x2\x2\x2\x7D2\x668\x3"+
		"\x2\x2\x2\x7D2\x68F\x3\x2\x2\x2\x7D2\x69B\x3\x2\x2\x2\x7D2\x6AB\x3\x2"+
		"\x2\x2\x7D2\x6AD\x3\x2\x2\x2\x7D2\x6AF\x3\x2\x2\x2\x7D2\x6B4\x3\x2\x2"+
		"\x2\x7D2\x6BA\x3\x2\x2\x2\x7D2\x6C6\x3\x2\x2\x2\x7D2\x6DB\x3\x2\x2\x2"+
		"\x7D2\x6E5\x3\x2\x2\x2\x7D2\x6FD\x3\x2\x2\x2\x7D2\x702\x3\x2\x2\x2\x7D2"+
		"\x71B\x3\x2\x2\x2\x7D2\x727\x3\x2\x2\x2\x7D2\x732\x3\x2\x2\x2\x7D2\x739"+
		"\x3\x2\x2\x2\x7D2\x73D\x3\x2\x2\x2\x7D2\x74E\x3\x2\x2\x2\x7D2\x75D\x3"+
		"\x2\x2\x2\x7D2\x768\x3\x2\x2\x2\x7D2\x773\x3\x2\x2\x2\x7D2\x77E\x3\x2"+
		"\x2\x2\x7D2\x78A\x3\x2\x2\x2\x7D2\x795\x3\x2\x2\x2\x7D2\x7AF\x3\x2\x2"+
		"\x2\x7D2\x7B3\x3\x2\x2\x2\x7D2\x7B6\x3\x2\x2\x2\x7D2\x7BE\x3\x2\x2\x2"+
		"\x7D2\x7C2\x3\x2\x2\x2\x7D2\x7C8\x3\x2\x2\x2\x7D3\x9F\x3\x2\x2\x2\x7D4"+
		"\x7D6\x5\xC8\x65\x2\x7D5\x7D7\a\xD3\x2\x2\x7D6\x7D5\x3\x2\x2\x2\x7D6\x7D7"+
		"\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7D9\x5\xE\b\x2\x7D9\x7E0\x5,"+
		"\x17\x2\x7DA\x7DB\a\x18\x2\x2\x7DB\x7E1\x5\xA0Q\x2\x7DC\x7DD\a\x17\x2"+
		"\x2\x7DD\x7DE\x5\xE\b\x2\x7DE\x7DF\x5,\x17\x2\x7DF\x7E1\x3\x2\x2\x2\x7E0"+
		"\x7DA\x3\x2\x2\x2\x7E0\x7DC\x3\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\xA1"+
		"\x3\x2\x2\x2\x7E2\x7E3\a\f\x2\x2\x7E3\x7E4\x5\xC8\x65\x2\x7E4\x7E5\x5"+
		"\xE\b\x2\x7E5\x7E7\x5,\x17\x2\x7E6\x7E8\x5\xA2R\x2\x7E7\x7E6\x3\x2\x2"+
		"\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x7EE\x3\x2\x2\x2\x7E9\x7EA\a\x35\x2\x2"+
		"\x7EA\x7EB\x5\xE\b\x2\x7EB\x7EC\x5,\x17\x2\x7EC\x7EE\x3\x2\x2\x2\x7ED"+
		"\x7E2\x3\x2\x2\x2\x7ED\x7E9\x3\x2\x2\x2\x7EE\xA3\x3\x2\x2\x2\x7EF\x7F0"+
		"\a\f\x2\x2\x7F0\x7F3\x5\xC8\x65\x2\x7F1\x7F2\a\x94\x2\x2\x7F2\x7F4\x5"+
		"\xC8\x65\x2\x7F3\x7F1\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7FF\x3\x2"+
		"\x2\x2\x7F5\x7F6\a\f\x2\x2\x7F6\x7F7\x5\xF4{\x2\x7F7\x7F8\a\x6\x2\x2\x7F8"+
		"\x7FB\x5\xF8}\x2\x7F9\x7FA\a\x94\x2\x2\x7FA\x7FC\x5\xC8\x65\x2\x7FB\x7F9"+
		"\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FF\x3\x2\x2\x2\x7FD\x7FF\a\x35"+
		"\x2\x2\x7FE\x7EF\x3\x2\x2\x2\x7FE\x7F5\x3\x2\x2\x2\x7FE\x7FD\x3\x2\x2"+
		"\x2\x7FF\x800\x3\x2\x2\x2\x800\x801\x5\xE\b\x2\x801\x802\x5,\x17\x2\x802"+
		"\xA5\x3\x2\x2\x2\x803\x805\a\x46\x2\x2\x804\x803\x3\x2\x2\x2\x804\x805"+
		"\x3\x2\x2\x2\x805\x807\x3\x2\x2\x2\x806\x808\x5\xF4{\x2\x807\x806\x3\x2"+
		"\x2\x2\x807\x808\x3\x2\x2\x2\x808\x80B\x3\x2\x2\x2\x809\x80A\a\x6\x2\x2"+
		"\x80A\x80C\x5\xF8}\x2\x80B\x809\x3\x2\x2\x2\x80B\x80C\x3\x2\x2\x2\x80C"+
		"\x80F\x3\x2\x2\x2\x80D\x80E\a\x94\x2\x2\x80E\x810\x5\xC8\x65\x2\x80F\x80D"+
		"\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x5"+
		"\xE\b\x2\x812\x813\x5,\x17\x2\x813\xA7\x3\x2\x2\x2\x814\x815\aJ\x2\x2"+
		"\x815\x817\x5\xF4{\x2\x816\x814\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817"+
		"\x818\x3\x2\x2\x2\x818\x819\x5\xE\b\x2\x819\x81A\x5,\x17\x2\x81A\xA9\x3"+
		"\x2\x2\x2\x81B\x81D\a.\x2\x2\x81C\x81B\x3\x2\x2\x2\x81C\x81D\x3\x2\x2"+
		"\x2\x81D\x81E\x3\x2\x2\x2\x81E\x821\a`\x2\x2\x81F\x821\a\x92\x2\x2\x820"+
		"\x81C\x3\x2\x2\x2\x820\x81F\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x827"+
		"\x5\xACW\x2\x823\x824\a\x123\x2\x2\x824\x826\x5\xACW\x2\x825\x823\x3\x2"+
		"\x2\x2\x826\x829\x3\x2\x2\x2\x827\x825\x3\x2\x2\x2\x827\x828\x3\x2\x2"+
		"\x2\x828\x838\x3\x2\x2\x2\x829\x827\x3\x2\x2\x2\x82A\x82B\a.\x2\x2\x82B"+
		"\x830\x5\xACW\x2\x82C\x82D\a\x123\x2\x2\x82D\x82F\x5\xACW\x2\x82E\x82C"+
		"\x3\x2\x2\x2\x82F\x832\x3\x2\x2\x2\x830\x82E\x3\x2\x2\x2\x830\x831\x3"+
		"\x2\x2\x2\x831\x835\x3\x2\x2\x2\x832\x830\x3\x2\x2\x2\x833\x834\a\x6\x2"+
		"\x2\x834\x836\x5\xF8}\x2\x835\x833\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836"+
		"\x838\x3\x2\x2\x2\x837\x820\x3\x2\x2\x2\x837\x82A\x3\x2\x2\x2\x838\xAB"+
		"\x3\x2\x2\x2\x839\x83A\x5\xF4{\x2\x83A\x83B\x5\xC6\x64\x2\x83B\x83C\x5"+
		"\xC8\x65\x2\x83C\xAD\x3\x2\x2\x2\x83D\x83F\a.\x2\x2\x83E\x840\a\x41\x2"+
		"\x2\x83F\x83E\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2"+
		"\x841\x846\x5\xB0Y\x2\x842\x843\a\x123\x2\x2\x843\x845\x5\xB0Y\x2\x844"+
		"\x842\x3\x2\x2\x2\x845\x848\x3\x2\x2\x2\x846\x844\x3\x2\x2\x2\x846\x847"+
		"\x3\x2\x2\x2\x847\x849\x3\x2\x2\x2\x848\x846\x3\x2\x2\x2\x849\x84A\x5"+
		"\xE\b\x2\x84A\x8B1\x3\x2\x2\x2\x84B\x84C\a\x41\x2\x2\x84C\x84D\a.\x2\x2"+
		"\x84D\x852\x5\xB0Y\x2\x84E\x84F\a\x123\x2\x2\x84F\x851\x5\xB0Y\x2\x850"+
		"\x84E\x3\x2\x2\x2\x851\x854\x3\x2\x2\x2\x852\x850\x3\x2\x2\x2\x852\x853"+
		"\x3\x2\x2\x2\x853\x855\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2\x855\x856\x5"+
		"\xE\b\x2\x856\x8B1\x3\x2\x2\x2\x857\x858\x6X\r\x2\x858\x859\a\x41\x2\x2"+
		"\x859\x85E\x5\xB0Y\x2\x85A\x85B\a\x123\x2\x2\x85B\x85D\x5\xB0Y\x2\x85C"+
		"\x85A\x3\x2\x2\x2\x85D\x860\x3\x2\x2\x2\x85E\x85C\x3\x2\x2\x2\x85E\x85F"+
		"\x3\x2\x2\x2\x85F\x861\x3\x2\x2\x2\x860\x85E\x3\x2\x2\x2\x861\x862\x5"+
		"\xE\b\x2\x862\x8B1\x3\x2\x2\x2\x863\x865\a\x41\x2\x2\x864\x863\x3\x2\x2"+
		"\x2\x864\x865\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x867\a\x92\x2\x2"+
		"\x867\x86C\x5\xB2Z\x2\x868\x869\a\x123\x2\x2\x869\x86B\x5\xB2Z\x2\x86A"+
		"\x868\x3\x2\x2\x2\x86B\x86E\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86C\x86D"+
		"\x3\x2\x2\x2\x86D\x86F\x3\x2\x2\x2\x86E\x86C\x3\x2\x2\x2\x86F\x870\x5"+
		"\xE\b\x2\x870\x8B1\x3\x2\x2\x2\x871\x873\a\x41\x2\x2\x872\x874\a.\x2\x2"+
		"\x873\x872\x3\x2\x2\x2\x873\x874\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875"+
		"\x876\a`\x2\x2\x876\x87B\x5\xB2Z\x2\x877\x878\a\x123\x2\x2\x878\x87A\x5"+
		"\xB2Z\x2\x879\x877\x3\x2\x2\x2\x87A\x87D\x3\x2\x2\x2\x87B\x879\x3\x2\x2"+
		"\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87E\x3\x2\x2\x2\x87D\x87B\x3\x2\x2\x2"+
		"\x87E\x87F\x5\xE\b\x2\x87F\x8B1\x3\x2\x2\x2\x880\x882\a.\x2\x2\x881\x883"+
		"\a\x41\x2\x2\x882\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x884\x3"+
		"\x2\x2\x2\x884\x885\a`\x2\x2\x885\x88A\x5\xB2Z\x2\x886\x887\a\x123\x2"+
		"\x2\x887\x889\x5\xB2Z\x2\x888\x886\x3\x2\x2\x2\x889\x88C\x3\x2\x2\x2\x88A"+
		"\x888\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\x3\x2\x2\x2\x88C\x88A"+
		"\x3\x2\x2\x2\x88D\x88E\x5\xE\b\x2\x88E\x8B1\x3\x2\x2\x2\x88F\x891\aJ\x2"+
		"\x2\x890\x892\a\x41\x2\x2\x891\x890\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2"+
		"\x892\x893\x3\x2\x2\x2\x893\x894\a\x92\x2\x2\x894\x899\x5\xB2Z\x2\x895"+
		"\x896\a\x123\x2\x2\x896\x898\x5\xB2Z\x2\x897\x895\x3\x2\x2\x2\x898\x89B"+
		"\x3\x2\x2\x2\x899\x897\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89C\x3"+
		"\x2\x2\x2\x89B\x899\x3\x2\x2\x2\x89C\x89D\x5\xE\b\x2\x89D\x8B1\x3\x2\x2"+
		"\x2\x89E\x8A0\aJ\x2\x2\x89F\x8A1\a\x41\x2\x2\x8A0\x89F\x3\x2\x2\x2\x8A0"+
		"\x8A1\x3\x2\x2\x2\x8A1\x8A3\x3\x2\x2\x2\x8A2\x8A4\a.\x2\x2\x8A3\x8A2\x3"+
		"\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8A6\a`\x2"+
		"\x2\x8A6\x8AB\x5\xB2Z\x2\x8A7\x8A8\a\x123\x2\x2\x8A8\x8AA\x5\xB2Z\x2\x8A9"+
		"\x8A7\x3\x2\x2\x2\x8AA\x8AD\x3\x2\x2\x2\x8AB\x8A9\x3\x2\x2\x2\x8AB\x8AC"+
		"\x3\x2\x2\x2\x8AC\x8AE\x3\x2\x2\x2\x8AD\x8AB\x3\x2\x2\x2\x8AE\x8AF\x5"+
		"\xE\b\x2\x8AF\x8B1\x3\x2\x2\x2\x8B0\x83D\x3\x2\x2\x2\x8B0\x84B\x3\x2\x2"+
		"\x2\x8B0\x857\x3\x2\x2\x2\x8B0\x864\x3\x2\x2\x2\x8B0\x871\x3\x2\x2\x2"+
		"\x8B0\x880\x3\x2\x2\x2\x8B0\x88F\x3\x2\x2\x2\x8B0\x89E\x3\x2\x2\x2\x8B1"+
		"\xAF\x3\x2\x2\x2\x8B2\x8B4\aU\x2\x2\x8B3\x8B2\x3\x2\x2\x2\x8B3\x8B4\x3"+
		"\x2\x2\x2\x8B4\x8B6\x3\x2\x2\x2\x8B5\x8B7\a\x12\x2\x2\x8B6\x8B5\x3\x2"+
		"\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8\x8BD\x5\xF4{\x2"+
		"\x8B9\x8BA\a\x120\x2\x2\x8BA\x8BB\x5\x66\x34\x2\x8BB\x8BC\a\x121\x2\x2"+
		"\x8BC\x8BE\x3\x2\x2\x2\x8BD\x8B9\x3\x2\x2\x2\x8BD\x8BE\x3\x2\x2\x2\x8BE"+
		"\x8C2\x3\x2\x2\x2\x8BF\x8C0\x5\xC6\x64\x2\x8C0\x8C1\x5\xC8\x65\x2\x8C1"+
		"\x8C3\x3\x2\x2\x2\x8C2\x8BF\x3\x2\x2\x2\x8C2\x8C3\x3\x2\x2\x2\x8C3\x8CA"+
		"\x3\x2\x2\x2\x8C4\x8C5\t\v\x2\x2\x8C5\x8C8\x5\xF8}\x2\x8C6\x8C7\a\x88"+
		"\x2\x2\x8C7\x8C9\x5\xF2z\x2\x8C8\x8C6\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2\x2"+
		"\x8C9\x8CB\x3\x2\x2\x2\x8CA\x8C4\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB"+
		"\xB1\x3\x2\x2\x2\x8CC\x8CE\aU\x2\x2\x8CD\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3"+
		"\x2\x2\x2\x8CE\x8CF\x3\x2\x2\x2\x8CF\x8D0\x5\xF4{\x2\x8D0\x8D1\x5\xC6"+
		"\x64\x2\x8D1\x8D2\x5\xC8\x65\x2\x8D2\xB3\x3\x2\x2\x2\x8D3\x8D4\a \x2\x2"+
		"\x8D4\x8D9\x5\xF2z\x2\x8D5\x8D6\a\x123\x2\x2\x8D6\x8D8\x5\xF2z\x2\x8D7"+
		"\x8D5\x3\x2\x2\x2\x8D8\x8DB\x3\x2\x2\x2\x8D9\x8D7\x3\x2\x2\x2\x8D9\x8DA"+
		"\x3\x2\x2\x2\x8DA\x8DE\x3\x2\x2\x2\x8DB\x8D9\x3\x2\x2\x2\x8DC\x8DD\a-"+
		"\x2\x2\x8DD\x8DF\x5\xF2z\x2\x8DE\x8DC\x3\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2"+
		"\x8DF\x8E0\x3\x2\x2\x2\x8E0\x8E1\x5\xE\b\x2\x8E1\xB5\x3\x2\x2\x2\x8E2"+
		"\x8E3\t&\x2\x2\x8E3\x8E8\x5\xF6|\x2\x8E4\x8E5\a\x123\x2\x2\x8E5\x8E7\x5"+
		"\xF6|\x2\x8E6\x8E4\x3\x2\x2\x2\x8E7\x8EA\x3\x2\x2\x2\x8E8\x8E6\x3\x2\x2"+
		"\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EB\x3\x2\x2\x2\x8EA\x8E8\x3\x2\x2\x2"+
		"\x8EB\x8EC\x5\xE\b\x2\x8EC\x8F9\x3\x2\x2\x2\x8ED\x8EE\t\'\x2\x2\x8EE\x8F3"+
		"\x5\xB8]\x2\x8EF\x8F0\a\x123\x2\x2\x8F0\x8F2\x5\xB8]\x2\x8F1\x8EF\x3\x2"+
		"\x2\x2\x8F2\x8F5\x3\x2\x2\x2\x8F3\x8F1\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2"+
		"\x2\x8F4\x8F6\x3\x2\x2\x2\x8F5\x8F3\x3\x2\x2\x2\x8F6\x8F7\x5\xE\b\x2\x8F7"+
		"\x8F9\x3\x2\x2\x2\x8F8\x8E2\x3\x2\x2\x2\x8F8\x8ED\x3\x2\x2\x2\x8F9\xB7"+
		"\x3\x2\x2\x2\x8FA\x8FC\a\x125\x2\x2\x8FB\x8FA\x3\x2\x2\x2\x8FB\x8FC\x3"+
		"\x2\x2\x2\x8FC\x8FD\x3\x2\x2\x2\x8FD\x902\x5\xF6|\x2\x8FE\x8FF\a\x120"+
		"\x2\x2\x8FF\x900\x5\x66\x34\x2\x900\x901\a\x121\x2\x2\x901\x903\x3\x2"+
		"\x2\x2\x902\x8FE\x3\x2\x2\x2\x902\x903\x3\x2\x2\x2\x903\x907\x3\x2\x2"+
		"\x2\x904\x905\x5\xC6\x64\x2\x905\x906\x5\xC8\x65\x2\x906\x908\x3\x2\x2"+
		"\x2\x907\x904\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\xB9\x3\x2\x2\x2\x909"+
		"\x90A\t(\x2\x2\x90A\x90F\x5\xBC_\x2\x90B\x90C\a\x123\x2\x2\x90C\x90E\x5"+
		"\xBC_\x2\x90D\x90B\x3\x2\x2\x2\x90E\x911\x3\x2\x2\x2\x90F\x90D\x3\x2\x2"+
		"\x2\x90F\x910\x3\x2\x2\x2\x910\x912\x3\x2\x2\x2\x911\x90F\x3\x2\x2\x2"+
		"\x912\x913\x5\xE\b\x2\x913\x956\x3\x2\x2\x2\x914\x915\a\x31\x2\x2\x915"+
		"\x91A\x5\xF6|\x2\x916\x917\a\x123\x2\x2\x917\x919\x5\xF6|\x2\x918\x916"+
		"\x3\x2\x2\x2\x919\x91C\x3\x2\x2\x2\x91A\x918\x3\x2\x2\x2\x91A\x91B\x3"+
		"\x2\x2\x2\x91B\x91D\x3\x2\x2\x2\x91C\x91A\x3\x2\x2\x2\x91D\x91E\x5\xE"+
		"\b\x2\x91E\x956\x3\x2\x2\x2\x91F\x920\t)\x2\x2\x920\x922\x5\xF6|\x2\x921"+
		"\x923\x5\xBE`\x2\x922\x921\x3\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923\x92B"+
		"\x3\x2\x2\x2\x924\x925\a\x123\x2\x2\x925\x927\x5\xF6|\x2\x926\x928\x5"+
		"\xBE`\x2\x927\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\x92A\x3\x2\x2"+
		"\x2\x929\x924\x3\x2\x2\x2\x92A\x92D\x3\x2\x2\x2\x92B\x929\x3\x2\x2\x2"+
		"\x92B\x92C\x3\x2\x2\x2\x92C\x92E\x3\x2\x2\x2\x92D\x92B\x3\x2\x2\x2\x92E"+
		"\x92F\x5\xE\b\x2\x92F\x956\x3\x2\x2\x2\x930\x931\t\'\x2\x2\x931\x936\x5"+
		"\xC0\x61\x2\x932\x933\a\x123\x2\x2\x933\x935\x5\xC0\x61\x2\x934\x932\x3"+
		"\x2\x2\x2\x935\x938\x3\x2\x2\x2\x936\x934\x3\x2\x2\x2\x936\x937\x3\x2"+
		"\x2\x2\x937\x939\x3\x2\x2\x2\x938\x936\x3\x2\x2\x2\x939\x93A\x5\xE\b\x2"+
		"\x93A\x956\x3\x2\x2\x2\x93B\x93C\a.\x2\x2\x93C\x93D\a\x9A\x2\x2\x93D\x942"+
		"\x5\xBC_\x2\x93E\x93F\a\x123\x2\x2\x93F\x941\x5\xBC_\x2\x940\x93E\x3\x2"+
		"\x2\x2\x941\x944\x3\x2\x2\x2\x942\x940\x3\x2\x2\x2\x942\x943\x3\x2\x2"+
		"\x2\x943\x945\x3\x2\x2\x2\x944\x942\x3\x2\x2\x2\x945\x946\x5\xE\b\x2\x946"+
		"\x956\x3\x2\x2\x2\x947\x949\a;\x2\x2\x948\x94A\a\x9A\x2\x2\x949\x948\x3"+
		"\x2\x2\x2\x949\x94A\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x950\x5\xBC"+
		"_\x2\x94C\x94D\a\x123\x2\x2\x94D\x94F\x5\xBC_\x2\x94E\x94C\x3\x2\x2\x2"+
		"\x94F\x952\x3\x2\x2\x2\x950\x94E\x3\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951"+
		"\x953\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x953\x954\x5\xE\b\x2\x954\x956"+
		"\x3\x2\x2\x2\x955\x909\x3\x2\x2\x2\x955\x914\x3\x2\x2\x2\x955\x91F\x3"+
		"\x2\x2\x2\x955\x930\x3\x2\x2\x2\x955\x93B\x3\x2\x2\x2\x955\x947\x3\x2"+
		"\x2\x2\x956\xBB\x3\x2\x2\x2\x957\x959\a\x125\x2\x2\x958\x957\x3\x2\x2"+
		"\x2\x958\x959\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x971\x5\xF6|\x2\x95B"+
		"\x95C\a\x120\x2\x2\x95C\x961\x5\xC8\x65\x2\x95D\x95E\a\x123\x2\x2\x95E"+
		"\x960\x5\xC8\x65\x2\x95F\x95D\x3\x2\x2\x2\x960\x963\x3\x2\x2\x2\x961\x95F"+
		"\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x964\x3\x2\x2\x2\x963\x961\x3"+
		"\x2\x2\x2\x964\x965\a\x121\x2\x2\x965\x972\x3\x2\x2\x2\x966\x967\a\x11C"+
		"\x2\x2\x967\x96C\x5\xC8\x65\x2\x968\x969\a\x123\x2\x2\x969\x96B\x5\xC8"+
		"\x65\x2\x96A\x968\x3\x2\x2\x2\x96B\x96E\x3\x2\x2\x2\x96C\x96A\x3\x2\x2"+
		"\x2\x96C\x96D\x3\x2\x2\x2\x96D\x96F\x3\x2\x2\x2\x96E\x96C\x3\x2\x2\x2"+
		"\x96F\x970\a\x11D\x2\x2\x970\x972\x3\x2\x2\x2\x971\x95B\x3\x2\x2\x2\x971"+
		"\x966\x3\x2\x2\x2\x972\x974\x3\x2\x2\x2\x973\x975\x5\xBE`\x2\x974\x973"+
		"\x3\x2\x2\x2\x974\x975\x3\x2\x2\x2\x975\xBD\x3\x2\x2\x2\x976\x977\a\x6"+
		"\x2\x2\x977\x97A\x5\xF8}\x2\x978\x979\a\x88\x2\x2\x979\x97B\x5\xF2z\x2"+
		"\x97A\x978\x3\x2\x2\x2\x97A\x97B\x3\x2\x2\x2\x97B\xBF\x3\x2\x2\x2\x97C"+
		"\x97E\a\x125\x2\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E\x3\x2\x2\x2\x97E\x97F"+
		"\x3\x2\x2\x2\x97F\x981\x5\xF6|\x2\x980\x982\x5\xBE`\x2\x981\x980\x3\x2"+
		"\x2\x2\x981\x982\x3\x2\x2\x2\x982\xC1\x3\x2\x2\x2\x983\x985\x5\xC4\x63"+
		"\x2\x984\x983\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2\x985\x986\x3\x2\x2\x2"+
		"\x986\x987\a.\x2\x2\x987\x988\x5\x14\v\x2\x988\x989\x5\x16\f\x2\x989\x98A"+
		"\x5\xE\b\x2\x98A\x98B\x5,\x17\x2\x98B\x98C\a\x19\x2\x2\x98C\x98D\x5\x14"+
		"\v\x2\x98D\x98E\a\x15F\x2\x2\x98E\xC3\x3\x2\x2\x2\x98F\x991\t*\x2\x2\x990"+
		"\x98F\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x990\x3\x2\x2\x2\x992\x993"+
		"\x3\x2\x2\x2\x993\xC5\x3\x2\x2\x2\x994\x995\t+\x2\x2\x995\xC7\x3\x2\x2"+
		"\x2\x996\x997\b\x65\x1\x2\x997\x998\t,\x2\x2\x998\x9B0\x5\xEEx\x2\x999"+
		"\x99A\x5\x12C\x97\x2\x99A\x99B\a\x11C\x2\x2\x99B\x99C\a\x11D\x2\x2\x99C"+
		"\x9B0\x3\x2\x2\x2\x99D\x99E\x5\x12C\x97\x2\x99E\x99F\a\x11C\x2\x2\x99F"+
		"\x9A0\x5\xE2r\x2\x9A0\x9A1\a\x11D\x2\x2\x9A1\x9B0\x3\x2\x2\x2\x9A2\x9A3"+
		"\x6\x65\xE\x2\x9A3\x9A4\a\x11C\x2\x2\x9A4\x9A5\x5\xF8}\x2\x9A5\x9A6\a"+
		"\x11D\x2\x2\x9A6\x9A7\x5\xC8\x65\x18\x9A7\x9B0\x3\x2\x2\x2\x9A8\x9A9\a"+
		"z\x2\x2\x9A9\x9B0\x5\xC8\x65\x16\x9AA\x9AB\t-\x2\x2\x9AB\x9B0\x5\xC8\x65"+
		"\x15\x9AC\x9AD\t.\x2\x2\x9AD\x9B0\x5\xC8\x65\t\x9AE\x9B0\x5\xCA\x66\x2"+
		"\x9AF\x996\x3\x2\x2\x2\x9AF\x999\x3\x2\x2\x2\x9AF\x99D\x3\x2\x2\x2\x9AF"+
		"\x9A2\x3\x2\x2\x2\x9AF\x9A8\x3\x2\x2\x2\x9AF\x9AA\x3\x2\x2\x2\x9AF\x9AC"+
		"\x3\x2\x2\x2\x9AF\x9AE\x3\x2\x2\x2\x9B0\xA08\x3\x2\x2\x2\x9B1\x9B2\f\x12"+
		"\x2\x2\x9B2\x9B3\a\xF9\x2\x2\x9B3\xA07\x5\xC8\x65\x13\x9B4\x9B5\f\x11"+
		"\x2\x2\x9B5\x9B6\t/\x2\x2\x9B6\xA07\x5\xC8\x65\x12\x9B7\x9B8\f\x10\x2"+
		"\x2\x9B8\x9B9\t\x30\x2\x2\x9B9\xA07\x5\xC8\x65\x11\x9BA\x9BB\f\xF\x2\x2"+
		"\x9BB\x9BC\a\xFA\x2\x2\x9BC\xA07\x5\xC8\x65\x10\x9BD\x9BE\f\xE\x2\x2\x9BE"+
		"\x9BF\a\xEC\x2\x2\x9BF\x9C0\a\xEC\x2\x2\x9C0\xA07\x5\xC8\x65\xF\x9C1\x9C2"+
		"\f\r\x2\x2\x9C2\x9C3\t\x31\x2\x2\x9C3\xA07\x5\xC8\x65\xE\x9C4\x9C5\f\f"+
		"\x2\x2\x9C5\x9C6\a\x125\x2\x2\x9C6\xA07\x5\xC8\x65\r\x9C7\x9C8\f\v\x2"+
		"\x2\x9C8\x9C9\a\xFC\x2\x2\x9C9\xA07\x5\xC8\x65\f\x9CA\x9CB\f\n\x2\x2\x9CB"+
		"\x9CC\a\x124\x2\x2\x9CC\xA07\x5\xC8\x65\v\x9CD\x9CE\f\b\x2\x2\x9CE\x9CF"+
		"\t\x32\x2\x2\x9CF\xA07\x5\xC8\x65\t\x9D0\x9D1\f\a\x2\x2\x9D1\x9D2\t\x33"+
		"\x2\x2\x9D2\xA07\x5\xC8\x65\b\x9D3\x9D4\f\x6\x2\x2\x9D4\x9D5\t\x34\x2"+
		"\x2\x9D5\xA07\x5\xC8\x65\a\x9D6\x9D7\f\x5\x2\x2\x9D7\x9D8\t\x35\x2\x2"+
		"\x9D8\xA07\x5\xC8\x65\x6\x9D9\x9DA\f\x4\x2\x2\x9DA\x9DB\t\x36\x2\x2\x9DB"+
		"\xA07\x5\xC8\x65\x4\x9DC\x9DD\f\"\x2\x2\x9DD\x9DE\t\x37\x2\x2\x9DE\xA07"+
		"\x5\xEEx\x2\x9DF\x9E0\f \x2\x2\x9E0\x9E1\t\x37\x2\x2\x9E1\x9E2\a\x125"+
		"\x2\x2\x9E2\x9E3\a\x11C\x2\x2\x9E3\x9E4\x5\xC8\x65\x2\x9E4\x9E5\a\x11D"+
		"\x2\x2\x9E5\xA07\x3\x2\x2\x2\x9E6\x9E7\f\x1F\x2\x2\x9E7\x9E8\t\x37\x2"+
		"\x2\x9E8\x9E9\a\x125\x2\x2\x9E9\xA07\x5\xF2z\x2\x9EA\x9EB\f\x1E\x2\x2"+
		"\x9EB\x9EC\a\x11C\x2\x2\x9EC\xA07\a\x11D\x2\x2\x9ED\x9EE\f\x1D\x2\x2\x9EE"+
		"\x9EF\a\x11C\x2\x2\x9EF\x9F0\x5\xE2r\x2\x9F0\x9F1\a\x11D\x2\x2\x9F1\xA07"+
		"\x3\x2\x2\x2\x9F2\x9F3\f\x1A\x2\x2\x9F3\x9F4\a\x120\x2\x2\x9F4\x9F5\x5"+
		"\xDEp\x2\x9F5\x9F6\a\x121\x2\x2\x9F6\xA07\x3\x2\x2\x2\x9F7\x9F8\f\x19"+
		"\x2\x2\x9F8\x9F9\a\xFF\x2\x2\x9F9\xA07\x5\xCCg\x2\x9FA\x9FB\f\x17\x2\x2"+
		"\x9FB\xA07\t\x38\x2\x2\x9FC\x9FD\f\x14\x2\x2\x9FD\x9FE\a,\x2\x2\x9FE\xA01"+
		"\x5\xF8}\x2\x9FF\xA00\a\x92\x2\x2\xA00\xA02\x5\xF4{\x2\xA01\x9FF\x3\x2"+
		"\x2\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA07\x3\x2\x2\x2\xA03\xA04\f\x13\x2"+
		"\x2\xA04\xA05\ay\x2\x2\xA05\xA07\x5\xF8}\x2\xA06\x9B1\x3\x2\x2\x2\xA06"+
		"\x9B4\x3\x2\x2\x2\xA06\x9B7\x3\x2\x2\x2\xA06\x9BA\x3\x2\x2\x2\xA06\x9BD"+
		"\x3\x2\x2\x2\xA06\x9C1\x3\x2\x2\x2\xA06\x9C4\x3\x2\x2\x2\xA06\x9C7\x3"+
		"\x2\x2\x2\xA06\x9CA\x3\x2\x2\x2\xA06\x9CD\x3\x2\x2\x2\xA06\x9D0\x3\x2"+
		"\x2\x2\xA06\x9D3\x3\x2\x2\x2\xA06\x9D6\x3\x2\x2\x2\xA06\x9D9\x3\x2\x2"+
		"\x2\xA06\x9DC\x3\x2\x2\x2\xA06\x9DF\x3\x2\x2\x2\xA06\x9E6\x3\x2\x2\x2"+
		"\xA06\x9EA\x3\x2\x2\x2\xA06\x9ED\x3\x2\x2\x2\xA06\x9F2\x3\x2\x2\x2\xA06"+
		"\x9F7\x3\x2\x2\x2\xA06\x9FA\x3\x2\x2\x2\xA06\x9FC\x3\x2\x2\x2\xA06\xA03"+
		"\x3\x2\x2\x2\xA07\xA0A\x3\x2\x2\x2\xA08\xA06\x3\x2\x2\x2\xA08\xA09\x3"+
		"\x2\x2\x2\xA09\xC9\x3\x2\x2\x2\xA0A\xA08\x3\x2\x2\x2\xA0B\xA90\a>\x2\x2"+
		"\xA0C\xA90\a\x44\x2\x2\xA0D\xA90\x5\x132\x9A\x2\xA0E\xA90\x5\x100\x81"+
		"\x2\xA0F\xA90\x5\x104\x83\x2\xA10\xA90\x5\x108\x85\x2\xA11\xA90\x5\x112"+
		"\x8A\x2\xA12\xA90\x5\x118\x8D\x2\xA13\xA14\x5\xF8}\x2\xA14\xA15\a\x11E"+
		"\x2\x2\xA15\xA16\x5\xC8\x65\x2\xA16\xA17\a\x123\x2\x2\xA17\xA18\a\x126"+
		"\x2\x2\xA18\xA19\x5\xEAv\x2\xA19\xA1A\a\x11C\x2\x2\xA1A\xA1B\a\x11D\x2"+
		"\x2\xA1B\xA1C\a\x11F\x2\x2\xA1C\xA90\x3\x2\x2\x2\xA1D\xA1E\x5\xF8}\x2"+
		"\xA1E\xA1F\a\x11E\x2\x2\xA1F\xA21\a\x11F\x2\x2\xA20\xA22\x5\xD0i\x2\xA21"+
		"\xA20\x3\x2\x2\x2\xA21\xA22\x3\x2\x2\x2\xA22\xA90\x3\x2\x2\x2\xA23\xA24"+
		"\x5\xF8}\x2\xA24\xA25\a\x11E\x2\x2\xA25\xA26\x5\xE2r\x2\xA26\xA28\a\x11F"+
		"\x2\x2\xA27\xA29\x5\xD0i\x2\xA28\xA27\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2"+
		"\xA29\xA90\x3\x2\x2\x2\xA2A\xA2B\t\x39\x2\x2\xA2B\xA2C\a\x11C\x2\x2\xA2C"+
		"\xA2D\x5\xC8\x65\x2\xA2D\xA2E\a\x11D\x2\x2\xA2E\xA90\x3\x2\x2\x2\xA2F"+
		"\xA30\aG\x2\x2\xA30\xA31\a\x11C\x2\x2\xA31\xA32\x5\xF8}\x2\xA32\xA33\a"+
		"\x11D\x2\x2\xA33\xA90\x3\x2\x2\x2\xA34\xA35\a@\x2\x2\xA35\xA36\a\x11C"+
		"\x2\x2\xA36\xA37\x5\xF8}\x2\xA37\xA38\a\x11D\x2\x2\xA38\xA90\x3\x2\x2"+
		"\x2\xA39\xA3A\aV\x2\x2\xA3A\xA3B\a\x11C\x2\x2\xA3B\xA3C\x5\xF8}\x2\xA3C"+
		"\xA3D\a\x11D\x2\x2\xA3D\xA90\x3\x2\x2\x2\xA3E\xA90\x5\xEEx\x2\xA3F\xA40"+
		"\x5\x130\x99\x2\xA40\xA41\a\x11C\x2\x2\xA41\xA42\x5\xC8\x65\x2\xA42\xA43"+
		"\a\x11D\x2\x2\xA43\xA90\x3\x2\x2\x2\xA44\xA45\x5\x12E\x98\x2\xA45\xA46"+
		"\a\x11C\x2\x2\xA46\xA47\x5\xC8\x65\x2\xA47\xA48\a\x11D\x2\x2\xA48\xA90"+
		"\x3\x2\x2\x2\xA49\xA4A\x5\x130\x99\x2\xA4A\xA4B\a\x11C\x2\x2\xA4B\xA4C"+
		"\a\r\x2\x2\xA4C\xA4D\a\x123\x2\x2\xA4D\xA4E\x5\xC8\x65\x2\xA4E\xA4F\a"+
		"\x11D\x2\x2\xA4F\xA90\x3\x2\x2\x2\xA50\xA51\x5\x12E\x98\x2\xA51\xA52\a"+
		"\x11C\x2\x2\xA52\xA53\a\r\x2\x2\xA53\xA54\a\x123\x2\x2\xA54\xA55\x5\xC8"+
		"\x65\x2\xA55\xA56\a\x11D\x2\x2\xA56\xA90\x3\x2\x2\x2\xA57\xA58\aS\x2\x2"+
		"\xA58\xA59\a\x11C\x2\x2\xA59\xA5A\x5\x130\x99\x2\xA5A\xA5B\a\x123\x2\x2"+
		"\xA5B\xA5C\x5\xC8\x65\x2\xA5C\xA5D\a\x11D\x2\x2\xA5D\xA90\x3\x2\x2\x2"+
		"\xA5E\xA5F\aS\x2\x2\xA5F\xA60\a\x11C\x2\x2\xA60\xA61\x5\x12E\x98\x2\xA61"+
		"\xA62\a\x123\x2\x2\xA62\xA63\x5\xC8\x65\x2\xA63\xA64\a\x11D\x2\x2\xA64"+
		"\xA90\x3\x2\x2\x2\xA65\xA66\a\xA5\x2\x2\xA66\xA67\a\x11C\x2\x2\xA67\xA68"+
		"\x5\xF8}\x2\xA68\xA69\a\x123\x2\x2\xA69\xA6A\x5\xC8\x65\x2\xA6A\xA6B\a"+
		"\x11D\x2\x2\xA6B\xA90\x3\x2\x2\x2\xA6C\xA90\x5\xFE\x80\x2\xA6D\xA90\x5"+
		"\xFC\x7F\x2\xA6E\xA90\x5\xE6t\x2\xA6F\xA70\t:\x2\x2\xA70\xA71\a\x11C\x2"+
		"\x2\xA71\xA76\x5\xC8\x65\x2\xA72\xA73\a\x123\x2\x2\xA73\xA75\x5\xC8\x65"+
		"\x2\xA74\xA72\x3\x2\x2\x2\xA75\xA78\x3\x2\x2\x2\xA76\xA74\x3\x2\x2\x2"+
		"\xA76\xA77\x3\x2\x2\x2\xA77\xA79\x3\x2\x2\x2\xA78\xA76\x3\x2\x2\x2\xA79"+
		"\xA7A\a\x11D\x2\x2\xA7A\xA90\x3\x2\x2\x2\xA7B\xA90\x5\xCEh\x2\xA7C\xA7D"+
		"\a\x125\x2\x2\xA7D\xA7E\a\x11C\x2\x2\xA7E\xA7F\x5\xC8\x65\x2\xA7F\xA80"+
		"\a\x11D\x2\x2\xA80\xA90\x3\x2\x2\x2\xA81\xA82\a\x125\x2\x2\xA82\xA90\x5"+
		"\xF2z\x2\xA83\xA84\a\x11C\x2\x2\xA84\xA89\x5\xC8\x65\x2\xA85\xA86\a\x123"+
		"\x2\x2\xA86\xA88\x5\xC8\x65\x2\xA87\xA85\x3\x2\x2\x2\xA88\xA8B\x3\x2\x2"+
		"\x2\xA89\xA87\x3\x2\x2\x2\xA89\xA8A\x3\x2\x2\x2\xA8A\xA8C\x3\x2\x2\x2"+
		"\xA8B\xA89\x3\x2\x2\x2\xA8C\xA8D\a\x11D\x2\x2\xA8D\xA90\x3\x2\x2\x2\xA8E"+
		"\xA90\av\x2\x2\xA8F\xA0B\x3\x2\x2\x2\xA8F\xA0C\x3\x2\x2\x2\xA8F\xA0D\x3"+
		"\x2\x2\x2\xA8F\xA0E\x3\x2\x2\x2\xA8F\xA0F\x3\x2\x2\x2\xA8F\xA10\x3\x2"+
		"\x2\x2\xA8F\xA11\x3\x2\x2\x2\xA8F\xA12\x3\x2\x2\x2\xA8F\xA13\x3\x2\x2"+
		"\x2\xA8F\xA1D\x3\x2\x2\x2\xA8F\xA23\x3\x2\x2\x2\xA8F\xA2A\x3\x2\x2\x2"+
		"\xA8F\xA2F\x3\x2\x2\x2\xA8F\xA34\x3\x2\x2\x2\xA8F\xA39\x3\x2\x2\x2\xA8F"+
		"\xA3E\x3\x2\x2\x2\xA8F\xA3F\x3\x2\x2\x2\xA8F\xA44\x3\x2\x2\x2\xA8F\xA49"+
		"\x3\x2\x2\x2\xA8F\xA50\x3\x2\x2\x2\xA8F\xA57\x3\x2\x2\x2\xA8F\xA5E\x3"+
		"\x2\x2\x2\xA8F\xA65\x3\x2\x2\x2\xA8F\xA6C\x3\x2\x2\x2\xA8F\xA6D\x3\x2"+
		"\x2\x2\xA8F\xA6E\x3\x2\x2\x2\xA8F\xA6F\x3\x2\x2\x2\xA8F\xA7B\x3\x2\x2"+
		"\x2\xA8F\xA7C\x3\x2\x2\x2\xA8F\xA81\x3\x2\x2\x2\xA8F\xA83\x3\x2\x2\x2"+
		"\xA8F\xA8E\x3\x2\x2\x2\xA90\xCB\x3\x2\x2\x2\xA91\xA92\bg\x1\x2\xA92\xA93"+
		"\t\x37\x2\x2\xA93\xA99\x5\xEEx\x2\xA94\xA95\a\x120\x2\x2\xA95\xA96\x5"+
		"\xDEp\x2\xA96\xA97\a\x121\x2\x2\xA97\xA99\x3\x2\x2\x2\xA98\xA91\x3\x2"+
		"\x2\x2\xA98\xA94\x3\x2\x2\x2\xA99\xAAF\x3\x2\x2\x2\xA9A\xA9B\f\x5\x2\x2"+
		"\xA9B\xA9C\a\xFF\x2\x2\xA9C\xAAE\x5\xCCg\x5\xA9D\xA9E\f\t\x2\x2\xA9E\xA9F"+
		"\t\x37\x2\x2\xA9F\xAAE\x5\xEEx\x2\xAA0\xAA1\f\b\x2\x2\xAA1\xAA2\a\x11C"+
		"\x2\x2\xAA2\xAAE\a\x11D\x2\x2\xAA3\xAA4\f\a\x2\x2\xAA4\xAA5\a\x11C\x2"+
		"\x2\xAA5\xAA6\x5\xE2r\x2\xAA6\xAA7\a\x11D\x2\x2\xAA7\xAAE\x3\x2\x2\x2"+
		"\xAA8\xAA9\f\x6\x2\x2\xAA9\xAAA\a\x120\x2\x2\xAAA\xAAB\x5\xDEp\x2\xAAB"+
		"\xAAC\a\x121\x2\x2\xAAC\xAAE\x3\x2\x2\x2\xAAD\xA9A\x3\x2\x2\x2\xAAD\xA9D"+
		"\x3\x2\x2\x2\xAAD\xAA0\x3\x2\x2\x2\xAAD\xAA3\x3\x2\x2\x2\xAAD\xAA8\x3"+
		"\x2\x2\x2\xAAE\xAB1\x3\x2\x2\x2\xAAF\xAAD\x3\x2\x2\x2\xAAF\xAB0\x3\x2"+
		"\x2\x2\xAB0\xCD\x3\x2\x2\x2\xAB1\xAAF\x3\x2\x2\x2\xAB2\xAB3\a\x31\x2\x2"+
		"\xAB3\xAB4\a\x127\x2\x2\xAB4\xAEE\x5\x128\x95\x2\xAB5\xAB6\a \x2\x2\xAB6"+
		"\xABA\a\x127\x2\x2\xAB7\xAB8\x5\x128\x95\x2\xAB8\xAB9\a\x127\x2\x2\xAB9"+
		"\xABB\x3\x2\x2\x2\xABA\xAB7\x3\x2\x2\x2\xABA\xABB\x3\x2\x2\x2\xABB\xABC"+
		"\x3\x2\x2\x2\xABC\xAEE\x5\x128\x95\x2\xABD\xABE\x6h,\x2\xABE\xABF\x5\x128"+
		"\x95\x2\xABF\xAC0\a\x127\x2\x2\xAC0\xAC1\x5\x128\x95\x2\xAC1\xAEE\x3\x2"+
		"\x2\x2\xAC2\xAC3\x6h-\x2\xAC3\xAC4\a\x11C\x2\x2\xAC4\xAC5\x5\x128\x95"+
		"\x2\xAC5\xAC6\a\x11D\x2\x2\xAC6\xAC7\a\x127\x2\x2\xAC7\xAC8\x5\x128\x95"+
		"\x2\xAC8\xAEE\x3\x2\x2\x2\xAC9\xACA\x5\x128\x95\x2\xACA\xACB\a\x127\x2"+
		"\x2\xACB\xACC\a\x125\x2\x2\xACC\xACD\x5\xC8\x65\x2\xACD\xAEE\x3\x2\x2"+
		"\x2\xACE\xACF\a \x2\x2\xACF\xAD3\a\x127\x2\x2\xAD0\xAD1\x5\x128\x95\x2"+
		"\xAD1\xAD2\a\x127\x2\x2\xAD2\xAD4\x3\x2\x2\x2\xAD3\xAD0\x3\x2\x2\x2\xAD3"+
		"\xAD4\x3\x2\x2\x2\xAD4\xAD5\x3\x2\x2\x2\xAD5\xAD6\a\x125\x2\x2\xAD6\xAEE"+
		"\x5\xC8\x65\x2\xAD7\xAD8\a\x11C\x2\x2\xAD8\xAD9\x5\x128\x95\x2\xAD9\xADA"+
		"\a\x11D\x2\x2\xADA\xADB\a\x127\x2\x2\xADB\xADC\a\x125\x2\x2\xADC\xADD"+
		"\x5\xC8\x65\x2\xADD\xAEE\x3\x2\x2\x2\xADE\xAE4\x5\x128\x95\x2\xADF\xAE0"+
		"\a\x11C\x2\x2\xAE0\xAE1\x5\xC8\x65\x2\xAE1\xAE2\a\x11D\x2\x2\xAE2\xAE4"+
		"\x3\x2\x2\x2\xAE3\xADE\x3\x2\x2\x2\xAE3\xADF\x3\x2\x2\x2\xAE4\xAE5\x3"+
		"\x2\x2\x2\xAE5\xAEB\a\x127\x2\x2\xAE6\xAE7\a\x11C\x2\x2\xAE7\xAE8\x5\xC8"+
		"\x65\x2\xAE8\xAE9\a\x11D\x2\x2\xAE9\xAEC\x3\x2\x2\x2\xAEA\xAEC\x5\xC8"+
		"\x65\x2\xAEB\xAE6\x3\x2\x2\x2\xAEB\xAEA\x3\x2\x2\x2\xAEC\xAEE\x3\x2\x2"+
		"\x2\xAED\xAB2\x3\x2\x2\x2\xAED\xAB5\x3\x2\x2\x2\xAED\xABD\x3\x2\x2\x2"+
		"\xAED\xAC2\x3\x2\x2\x2\xAED\xAC9\x3\x2\x2\x2\xAED\xACE\x3\x2\x2\x2\xAED"+
		"\xAD7\x3\x2\x2\x2\xAED\xAE3\x3\x2\x2\x2\xAEE\xCF\x3\x2\x2\x2\xAEF\xAF2"+
		"\x5\xD2j\x2\xAF0\xAF2\x5\xDCo\x2\xAF1\xAEF\x3\x2\x2\x2\xAF1\xAF0\x3\x2"+
		"\x2\x2\xAF2\xD1\x3\x2\x2\x2\xAF3\xAFC\a\x11E\x2\x2\xAF4\xAF9\x5\xD4k\x2"+
		"\xAF5\xAF6\a\x123\x2\x2\xAF6\xAF8\x5\xD4k\x2\xAF7\xAF5\x3\x2\x2\x2\xAF8"+
		"\xAFB\x3\x2\x2\x2\xAF9\xAF7\x3\x2\x2\x2\xAF9\xAFA\x3\x2\x2\x2\xAFA\xAFD"+
		"\x3\x2\x2\x2\xAFB\xAF9\x3\x2\x2\x2\xAFC\xAF4\x3\x2\x2\x2\xAFC\xAFD\x3"+
		"\x2\x2\x2\xAFD\xAFE\x3\x2\x2\x2\xAFE\xAFF\a\x11F\x2\x2\xAFF\xD3\x3\x2"+
		"\x2\x2\xB00\xB01\x5\xF2z\x2\xB01\xB02\x5\xC6\x64\x2\xB02\xB03\x5\xD6l"+
		"\x2\xB03\xD5\x3\x2\x2\x2\xB04\xB07\x5\xD0i\x2\xB05\xB07\x5\xC8\x65\x2"+
		"\xB06\xB04\x3\x2\x2\x2\xB06\xB05\x3\x2\x2\x2\xB07\xD7\x3\x2\x2\x2\xB08"+
		"\xB09\a\x11E\x2\x2\xB09\xB0E\x5\xDAn\x2\xB0A\xB0B\a\x123\x2\x2\xB0B\xB0D"+
		"\x5\xDAn\x2\xB0C\xB0A\x3\x2\x2\x2\xB0D\xB10\x3\x2\x2\x2\xB0E\xB0C\x3\x2"+
		"\x2\x2\xB0E\xB0F\x3\x2\x2\x2\xB0F\xB11\x3\x2\x2\x2\xB10\xB0E\x3\x2\x2"+
		"\x2\xB11\xB12\a\x11F\x2\x2\xB12\xD9\x3\x2\x2\x2\xB13\xB16\x5\xD8m\x2\xB14"+
		"\xB16\x5\xC8\x65\x2\xB15\xB13\x3\x2\x2\x2\xB15\xB14\x3\x2\x2\x2\xB16\xDB"+
		"\x3\x2\x2\x2\xB17\xB18\a\x11E\x2\x2\xB18\xB1D\x5\xDAn\x2\xB19\xB1A\a\x123"+
		"\x2\x2\xB1A\xB1C\x5\xDAn\x2\xB1B\xB19\x3\x2\x2\x2\xB1C\xB1F\x3\x2\x2\x2"+
		"\xB1D\xB1B\x3\x2\x2\x2\xB1D\xB1E\x3\x2\x2\x2\xB1E\xB20\x3\x2\x2\x2\xB1F"+
		"\xB1D\x3\x2\x2\x2\xB20\xB21\a\x11F\x2\x2\xB21\xDD\x3\x2\x2\x2\xB22\xB27"+
		"\x5\xE0q\x2\xB23\xB24\a\x123\x2\x2\xB24\xB26\x5\xE0q\x2\xB25\xB23\x3\x2"+
		"\x2\x2\xB26\xB29\x3\x2\x2\x2\xB27\xB25\x3\x2\x2\x2\xB27\xB28\x3\x2\x2"+
		"\x2\xB28\xDF\x3\x2\x2\x2\xB29\xB27\x3\x2\x2\x2\xB2A\xB2C\x5\xC8\x65\x2"+
		"\xB2B\xB2A\x3\x2\x2\x2\xB2B\xB2C\x3\x2\x2\x2\xB2C\xE1\x3\x2\x2\x2\xB2D"+
		"\xB32\x5\xE4s\x2\xB2E\xB2F\a\x123\x2\x2\xB2F\xB31\x5\xE4s\x2\xB30\xB2E"+
		"\x3\x2\x2\x2\xB31\xB34\x3\x2\x2\x2\xB32\xB30\x3\x2\x2\x2\xB32\xB33\x3"+
		"\x2\x2\x2\xB33\xE3\x3\x2\x2\x2\xB34\xB32\x3\x2\x2\x2\xB35\xB36\x6s.\x2"+
		"\xB36\xB37\x5\xF2z\x2\xB37\xB39\x5\xC6\x64\x2\xB38\xB3A\t;\x2\x2\xB39"+
		"\xB38\x3\x2\x2\x2\xB39\xB3A\x3\x2\x2\x2\xB3A\xB3C\x3\x2\x2\x2\xB3B\xB3D"+
		"\x5\xC8\x65\x2\xB3C\xB3B\x3\x2\x2\x2\xB3C\xB3D\x3\x2\x2\x2\xB3D\xB4F\x3"+
		"\x2\x2\x2\xB3E\xB3F\ah\x2\x2\xB3F\xB40\a\x92\x2\x2\xB40\xB4F\x5\xF4{\x2"+
		"\xB41\xB42\ah\x2\x2\xB42\xB43\x5\xF4{\x2\xB43\xB44\a\x6\x2\x2\xB44\xB45"+
		"\x5\xF8}\x2\xB45\xB4F\x3\x2\x2\x2\xB46\xB47\ah\x2\x2\xB47\xB4F\a\xDF\x2"+
		"\x2\xB48\xB4A\t;\x2\x2\xB49\xB48\x3\x2\x2\x2\xB49\xB4A\x3\x2\x2\x2\xB4A"+
		"\xB4C\x3\x2\x2\x2\xB4B\xB4D\x5\xC8\x65\x2\xB4C\xB4B\x3\x2\x2\x2\xB4C\xB4D"+
		"\x3\x2\x2\x2\xB4D\xB4F\x3\x2\x2\x2\xB4E\xB35\x3\x2\x2\x2\xB4E\xB3E\x3"+
		"\x2\x2\x2\xB4E\xB41\x3\x2\x2\x2\xB4E\xB46\x3\x2\x2\x2\xB4E\xB49\x3\x2"+
		"\x2\x2\xB4F\xE5\x3\x2\x2\x2\xB50\xB51\t<\x2\x2\xB51\xB52\a\x11C\x2\x2"+
		"\xB52\xB53\x5\xC8\x65\x2\xB53\xB55\a\x123\x2\x2\xB54\xB56\x5\xC8\x65\x2"+
		"\xB55\xB54\x3\x2\x2\x2\xB55\xB56\x3\x2\x2\x2\xB56\xB57\x3\x2\x2\x2\xB57"+
		"\xB59\a\x123\x2\x2\xB58\xB5A\x5\xC8\x65\x2\xB59\xB58\x3\x2\x2\x2\xB59"+
		"\xB5A\x3\x2\x2\x2\xB5A\xB5B\x3\x2\x2\x2\xB5B\xB5C\a\x11D\x2\x2\xB5C\xE7"+
		"\x3\x2\x2\x2\xB5D\xB5E\bu\x1\x2\xB5E\xB5F\x5\xECw\x2\xB5F\xB60\a\x128"+
		"\x2\x2\xB60\xB67\x3\x2\x2\x2\xB61\xB62\f\x4\x2\x2\xB62\xB63\x5\xEEx\x2"+
		"\xB63\xB64\a\x128\x2\x2\xB64\xB66\x3\x2\x2\x2\xB65\xB61\x3\x2\x2\x2\xB66"+
		"\xB69\x3\x2\x2\x2\xB67\xB65\x3\x2\x2\x2\xB67\xB68\x3\x2\x2\x2\xB68\xE9"+
		"\x3\x2\x2\x2\xB69\xB67\x3\x2\x2\x2\xB6A\xB6B\bv\x1\x2\xB6B\xB6C\x5\xEC"+
		"w\x2\xB6C\xB72\x3\x2\x2\x2\xB6D\xB6E\f\x4\x2\x2\xB6E\xB6F\a\x128\x2\x2"+
		"\xB6F\xB71\x5\xEEx\x2\xB70\xB6D\x3\x2\x2\x2\xB71\xB74\x3\x2\x2\x2\xB72"+
		"\xB70\x3\x2\x2\x2\xB72\xB73\x3\x2\x2\x2\xB73\xEB\x3\x2\x2\x2\xB74\xB72"+
		"\x3\x2\x2\x2\xB75\xB76\a#\x2\x2\xB76\xB77\a\x129\x2\x2\xB77\xB7E\x5\xEE"+
		"x\x2\xB78\xB79\x5\xF2z\x2\xB79\xB7A\a\x129\x2\x2\xB7A\xB7B\x5\xEEx\x2"+
		"\xB7B\xB7E\x3\x2\x2\x2\xB7C\xB7E\x5\xEEx\x2\xB7D\xB75\x3\x2\x2\x2\xB7D"+
		"\xB78\x3\x2\x2\x2\xB7D\xB7C\x3\x2\x2\x2\xB7E\xED\x3\x2\x2\x2\xB7F\xB81"+
		"\x5\x128\x95\x2\xB80\xB82\x5\xF0y\x2\xB81\xB80\x3\x2\x2\x2\xB81\xB82\x3"+
		"\x2\x2\x2\xB82\xEF\x3\x2\x2\x2\xB83\xB84\a\xEA\x2\x2\xB84\xB89\x5\xF8"+
		"}\x2\xB85\xB86\a\x123\x2\x2\xB86\xB88\x5\xF8}\x2\xB87\xB85\x3\x2\x2\x2"+
		"\xB88\xB8B\x3\x2\x2\x2\xB89\xB87\x3\x2\x2\x2\xB89\xB8A\x3\x2\x2\x2\xB8A"+
		"\xB8C\x3\x2\x2\x2\xB8B\xB89\x3\x2\x2\x2\xB8C\xB8D\a\xEC\x2\x2\xB8D\xF1"+
		"\x3\x2\x2\x2\xB8E\xB8F\x5\x128\x95\x2\xB8F\xF3\x3\x2\x2\x2\xB90\xB91\a"+
		"\xD4\x2\x2\xB91\xB93\a\x128\x2\x2\xB92\xB90\x3\x2\x2\x2\xB92\xB93\x3\x2"+
		"\x2\x2\xB93\xB94\x3\x2\x2\x2\xB94\xB95\x5\x128\x95\x2\xB95\xF5\x3\x2\x2"+
		"\x2\xB96\xB97\a\xD4\x2\x2\xB97\xB99\a\x128\x2\x2\xB98\xB96\x3\x2\x2\x2"+
		"\xB98\xB99\x3\x2\x2\x2\xB99\xB9A\x3\x2\x2\x2\xB9A\xB9B\x5\xF2z\x2\xB9B"+
		"\xF7\x3\x2\x2\x2\xB9C\xB9D\a\x9A\x2\x2\xB9D\xB9E\a\x88\x2\x2\xB9E\xBAD"+
		"\x5\xFC\x7F\x2\xB9F\xBA0\x5\xFC\x7F\x2\xBA0\xBA1\a\xA5\x2\x2\xBA1\xBAD"+
		"\x3\x2\x2\x2\xBA2\xBA4\x5\xFC\x7F\x2\xBA3\xBA5\x5\xFA~\x2\xBA4\xBA3\x3"+
		"\x2\x2\x2\xBA5\xBA6\x3\x2\x2\x2\xBA6\xBA4\x3\x2\x2\x2\xBA6\xBA7\x3\x2"+
		"\x2\x2\xBA7\xBAD\x3\x2\x2\x2\xBA8\xBAD\x5\xFC\x7F\x2\xBA9\xBAA\x5\xFC"+
		"\x7F\x2\xBAA\xBAB\a\xFF\x2\x2\xBAB\xBAD\x3\x2\x2\x2\xBAC\xB9C\x3\x2\x2"+
		"\x2\xBAC\xB9F\x3\x2\x2\x2\xBAC\xBA2\x3\x2\x2\x2\xBAC\xBA8\x3\x2\x2\x2"+
		"\xBAC\xBA9\x3\x2\x2\x2\xBAD\xF9\x3\x2\x2\x2\xBAE\xBB2\a\x120\x2\x2\xBAF"+
		"\xBB1\a\x123\x2\x2\xBB0\xBAF\x3\x2\x2\x2\xBB1\xBB4\x3\x2\x2\x2\xBB2\xBB0"+
		"\x3\x2\x2\x2\xBB2\xBB3\x3\x2\x2\x2\xBB3\xBB5\x3\x2\x2\x2\xBB4\xBB2\x3"+
		"\x2\x2\x2\xBB5\xBB8\a\x121\x2\x2\xBB6\xBB8\a\x13F\x2\x2\xBB7\xBAE\x3\x2"+
		"\x2\x2\xBB7\xBB6\x3\x2\x2\x2\xBB8\xFB\x3\x2\x2\x2\xBB9\xBBD\x5\x130\x99"+
		"\x2\xBBA\xBBD\x5\x12E\x98\x2\xBBB\xBBD\x5\xEAv\x2\xBBC\xBB9\x3\x2\x2\x2"+
		"\xBBC\xBBA\x3\x2\x2\x2\xBBC\xBBB\x3\x2\x2\x2\xBBD\xFD\x3\x2\x2\x2\xBBE"+
		"\xBC1\x5\x130\x99\x2\xBBF\xBC1\x5\x12E\x98\x2\xBC0\xBBE\x3\x2\x2\x2\xBC0"+
		"\xBBF\x3\x2\x2\x2\xBC1\xFF\x3\x2\x2\x2\xBC2\xBC3\a\xEA\x2\x2\xBC3\xBC4"+
		"\x5\xF8}\x2\xBC4\xBC5\a\xEC\x2\x2\xBC5\xBC7\x3\x2\x2\x2\xBC6\xBC2\x3\x2"+
		"\x2\x2\xBC6\xBC7\x3\x2\x2\x2\xBC7\xBC8\x3\x2\x2\x2\xBC8\xBC9\a\x11E\x2"+
		"\x2\xBC9\xBDC\a\x11F\x2\x2\xBCA\xBCB\a\xEA\x2\x2\xBCB\xBCC\x5\xF8}\x2"+
		"\xBCC\xBCD\a\xEC\x2\x2\xBCD\xBCF\x3\x2\x2\x2\xBCE\xBCA\x3\x2\x2\x2\xBCE"+
		"\xBCF\x3\x2\x2\x2\xBCF\xBD0\x3\x2\x2\x2\xBD0\xBD1\a\x11E\x2\x2\xBD1\xBD6"+
		"\x5\x102\x82\x2\xBD2\xBD3\a\x123\x2\x2\xBD3\xBD5\x5\x102\x82\x2\xBD4\xBD2"+
		"\x3\x2\x2\x2\xBD5\xBD8\x3\x2\x2\x2\xBD6\xBD4\x3\x2\x2\x2\xBD6\xBD7\x3"+
		"\x2\x2\x2\xBD7\xBD9\x3\x2\x2\x2\xBD8\xBD6\x3\x2\x2\x2\xBD9\xBDA\a\x11F"+
		"\x2\x2\xBDA\xBDC\x3\x2\x2\x2\xBDB\xBC6\x3\x2\x2\x2\xBDB\xBCE\x3\x2\x2"+
		"\x2\xBDC\x101\x3\x2\x2\x2\xBDD\xBDF\x5\xC8\x65\x2\xBDE\xBDD\x3\x2\x2\x2"+
		"\xBDE\xBDF\x3\x2\x2\x2\xBDF\x103\x3\x2\x2\x2\xBE0\xBE1\a\xE\x2\x2\xBE1"+
		"\xBEA\a\x11E\x2\x2\xBE2\xBE7\x5\x106\x84\x2\xBE3\xBE4\a\x123\x2\x2\xBE4"+
		"\xBE6\x5\x106\x84\x2\xBE5\xBE3\x3\x2\x2\x2\xBE6\xBE9\x3\x2\x2\x2\xBE7"+
		"\xBE5\x3\x2\x2\x2\xBE7\xBE8\x3\x2\x2\x2\xBE8\xBEB\x3\x2\x2\x2\xBE9\xBE7"+
		"\x3\x2\x2\x2\xBEA\xBE2\x3\x2\x2\x2\xBEA\xBEB\x3\x2\x2\x2\xBEB\xBEC\x3"+
		"\x2\x2\x2\xBEC\xBED\a\x11F\x2\x2\xBED\x105\x3\x2\x2\x2\xBEE\xBEF\x5\xF2"+
		"z\x2\xBEF\xBF0\x5\xC6\x64\x2\xBF0\xBF1\x5\xC8\x65\x2\xBF1\xBF4\x3\x2\x2"+
		"\x2\xBF2\xBF4\x5\xC8\x65\x2\xBF3\xBEE\x3\x2\x2\x2\xBF3\xBF2\x3\x2\x2\x2"+
		"\xBF4\x107\x3\x2\x2\x2\xBF5\xBFC\a\x11E\x2\x2\xBF6\xBFD\a\x101\x2\x2\xBF7"+
		"\xBF9\a\x124\x2\x2\xBF8\xBFA\x5\x10C\x87\x2\xBF9\xBF8\x3\x2\x2\x2\xBF9"+
		"\xBFA\x3\x2\x2\x2\xBFA\xBFB\x3\x2\x2\x2\xBFB\xBFD\a\x124\x2\x2\xBFC\xBF6"+
		"\x3\x2\x2\x2\xBFC\xBF7\x3\x2\x2\x2\xBFD\xBFE\x3\x2\x2\x2\xBFE\xBFF\x5"+
		"\x10A\x86\x2\xBFF\xC00\a\x11F\x2\x2\xC00\xC13\x3\x2\x2\x2\xC01\xC0C\a"+
		"\x11E\x2\x2\xC02\xC0D\a\x101\x2\x2\xC03\xC05\a\x124\x2\x2\xC04\xC03\x3"+
		"\x2\x2\x2\xC04\xC05\x3\x2\x2\x2\xC05\xC07\x3\x2\x2\x2\xC06\xC08\x5\x10C"+
		"\x87\x2\xC07\xC06\x3\x2\x2\x2\xC07\xC08\x3\x2\x2\x2\xC08\xC0A\x3\x2\x2"+
		"\x2\xC09\xC0B\a\x124\x2\x2\xC0A\xC09\x3\x2\x2\x2\xC0A\xC0B\x3\x2\x2\x2"+
		"\xC0B\xC0D\x3\x2\x2\x2\xC0C\xC02\x3\x2\x2\x2\xC0C\xC04\x3\x2\x2\x2\xC0D"+
		"\xC0E\x3\x2\x2\x2\xC0E\xC0F\a\x153\x2\x2\xC0F\xC10\x5\x10A\x86\x2\xC10"+
		"\xC11\a\x11F\x2\x2\xC11\xC13\x3\x2\x2\x2\xC12\xBF5\x3\x2\x2\x2\xC12\xC01"+
		"\x3\x2\x2\x2\xC13\x109\x3\x2\x2\x2\xC14\xC16\x5\xC8\x65\x2\xC15\xC14\x3"+
		"\x2\x2\x2\xC15\xC16\x3\x2\x2\x2\xC16\xC1C\x3\x2\x2\x2\xC17\xC18\x5\xE"+
		"\b\x2\xC18\xC19\x5,\x17\x2\xC19\xC1C\x3\x2\x2\x2\xC1A\xC1C\x5\x110\x89"+
		"\x2\xC1B\xC15\x3\x2\x2\x2\xC1B\xC17\x3\x2\x2\x2\xC1B\xC1A\x3\x2\x2\x2"+
		"\xC1C\x10B\x3\x2\x2\x2\xC1D\xC20\x5\x10E\x88\x2\xC1E\xC20\x5\x114\x8B"+
		"\x2\xC1F\xC1D\x3\x2\x2\x2\xC1F\xC1E\x3\x2\x2\x2\xC20\x10D\x3\x2\x2\x2"+
		"\xC21\xC26\x5\x128\x95\x2\xC22\xC23\a\x123\x2\x2\xC23\xC25\x5\x128\x95"+
		"\x2\xC24\xC22\x3\x2\x2\x2\xC25\xC28\x3\x2\x2\x2\xC26\xC24\x3\x2\x2\x2"+
		"\xC26\xC27\x3\x2\x2\x2\xC27\x10F\x3\x2\x2\x2\xC28\xC26\x3\x2\x2\x2\xC29"+
		"\xC2B\x5\xC8\x65\x2\xC2A\xC29\x3\x2\x2\x2\xC2A\xC2B\x3\x2\x2\x2\xC2B\xC2C"+
		"\x3\x2\x2\x2\xC2C\xC2E\a\x123\x2\x2\xC2D\xC2A\x3\x2\x2\x2\xC2E\xC2F\x3"+
		"\x2\x2\x2\xC2F\xC2D\x3\x2\x2\x2\xC2F\xC30\x3\x2\x2\x2\xC30\xC31\x3\x2"+
		"\x2\x2\xC31\xC32\x5\xC8\x65\x2\xC32\x111\x3\x2\x2\x2\xC33\xC35\ax\x2\x2"+
		"\xC34\xC33\x3\x2\x2\x2\xC34\xC35\x3\x2\x2\x2\xC35\xC36\x3\x2\x2\x2\xC36"+
		"\xC3C\aW\x2\x2\xC37\xC39\a\x11C\x2\x2\xC38\xC3A\x5\x114\x8B\x2\xC39\xC38"+
		"\x3\x2\x2\x2\xC39\xC3A\x3\x2\x2\x2\xC3A\xC3B\x3\x2\x2\x2\xC3B\xC3D\a\x11D"+
		"\x2\x2\xC3C\xC37\x3\x2\x2\x2\xC3C\xC3D\x3\x2\x2\x2\xC3D\xC3E\x3\x2\x2"+
		"\x2\xC3E\xC3F\a\x11E\x2\x2\xC3F\xC40\x5\x10A\x86\x2\xC40\xC41\a\x11F\x2"+
		"\x2\xC41\x113\x3\x2\x2\x2\xC42\xC47\x5\x116\x8C\x2\xC43\xC44\a\x123\x2"+
		"\x2\xC44\xC46\x5\x116\x8C\x2\xC45\xC43\x3\x2\x2\x2\xC46\xC49\x3\x2\x2"+
		"\x2\xC47\xC45\x3\x2\x2\x2\xC47\xC48\x3\x2\x2\x2\xC48\x115\x3\x2\x2\x2"+
		"\xC49\xC47\x3\x2\x2\x2\xC4A\xC4B\x5\x128\x95\x2\xC4B\xC4C\x5*\x16\x2\xC4C"+
		"\xC4D\x5\xF8}\x2\xC4D\x117\x3\x2\x2\x2\xC4E\xC4F\x5\x11A\x8E\x2\xC4F\xC50"+
		"\x5\x11C\x8F\x2\xC50\x119\x3\x2\x2\x2\xC51\xC52\a\x81\x2\x2\xC52\xC55"+
		"\x5\x128\x95\x2\xC53\xC54\a\x6\x2\x2\xC54\xC56\x5\xFC\x7F\x2\xC55\xC53"+
		"\x3\x2\x2\x2\xC55\xC56\x3\x2\x2\x2\xC56\xC57\x3\x2\x2\x2\xC57\xC58\a-"+
		"\x2\x2\xC58\xC59\x5\xC8\x65\x2\xC59\x11B\x3\x2\x2\x2\xC5A\xC5C\x5\x11E"+
		"\x90\x2\xC5B\xC5A\x3\x2\x2\x2\xC5C\xC5F\x3\x2\x2\x2\xC5D\xC5B\x3\x2\x2"+
		"\x2\xC5D\xC5E\x3\x2\x2\x2\xC5E\xC60\x3\x2\x2\x2\xC5F\xC5D\x3\x2\x2\x2"+
		"\xC60\xC62\x5\x124\x93\x2\xC61\xC63\x5\x126\x94\x2\xC62\xC61\x3\x2\x2"+
		"\x2\xC62\xC63\x3\x2\x2\x2\xC63\x11D\x3\x2\x2\x2\xC64\xC85\x5\x11A\x8E"+
		"\x2\xC65\xC66\a\x86\x2\x2\xC66\xC67\x5\x128\x95\x2\xC67\xC68\x5\xC6\x64"+
		"\x2\xC68\xC69\x5\xC8\x65\x2\xC69\xC85\x3\x2\x2\x2\xC6A\xC6B\a\x95\x2\x2"+
		"\xC6B\xC85\x5\xC8\x65\x2\xC6C\xC6D\a\x85\x2\x2\xC6D\xC70\x5\x128\x95\x2"+
		"\xC6E\xC6F\a\x6\x2\x2\xC6F\xC71\x5\xFC\x7F\x2\xC70\xC6E\x3\x2\x2\x2\xC70"+
		"\xC71\x3\x2\x2\x2\xC71\xC72\x3\x2\x2\x2\xC72\xC73\a-\x2\x2\xC73\xC74\x5"+
		"\xC8\x65\x2\xC74\xC75\a\x89\x2\x2\xC75\xC76\x5\xC8\x65\x2\xC76\xC77\a"+
		"~\x2\x2\xC77\xC79\x5\xC8\x65\x2\xC78\xC7A\x5\x120\x91\x2\xC79\xC78\x3"+
		"\x2\x2\x2\xC79\xC7A\x3\x2\x2\x2\xC7A\xC85\x3\x2\x2\x2\xC7B\xC7C\a\x8A"+
		"\x2\x2\xC7C\xC81\x5\x122\x92\x2\xC7D\xC7E\a\x123\x2\x2\xC7E\xC80\x5\x122"+
		"\x92\x2\xC7F\xC7D\x3\x2\x2\x2\xC80\xC83\x3\x2\x2\x2\xC81\xC7F\x3\x2\x2"+
		"\x2\xC81\xC82\x3\x2\x2\x2\xC82\xC85\x3\x2\x2\x2\xC83\xC81\x3\x2\x2\x2"+
		"\xC84\xC64\x3\x2\x2\x2\xC84\xC65\x3\x2\x2\x2\xC84\xC6A\x3\x2\x2\x2\xC84"+
		"\xC6C\x3\x2\x2\x2\xC84\xC7B\x3\x2\x2\x2\xC85\x11F\x3\x2\x2\x2\xC86\xC87"+
		"\a\x84\x2\x2\xC87\xC88\x5\x128\x95\x2\xC88\x121\x3\x2\x2\x2\xC89\xC8B"+
		"\x5\xC8\x65\x2\xC8A\xC8C\t=\x2\x2\xC8B\xC8A\x3\x2\x2\x2\xC8B\xC8C\x3\x2"+
		"\x2\x2\xC8C\x123\x3\x2\x2\x2\xC8D\xC8E\a\x8E\x2\x2\xC8E\xC95\x5\xC8\x65"+
		"\x2\xC8F\xC90\a\x82\x2\x2\xC90\xC91\x5\xC8\x65\x2\xC91\xC92\a{\x2\x2\xC92"+
		"\xC93\x5\xC8\x65\x2\xC93\xC95\x3\x2\x2\x2\xC94\xC8D\x3\x2\x2\x2\xC94\xC8F"+
		"\x3\x2\x2\x2\xC95\x125\x3\x2\x2\x2\xC96\xC97\a\x84\x2\x2\xC97\xC98\x5"+
		"\x128\x95\x2\xC98\xC99\x5\x11C\x8F\x2\xC99\x127\x3\x2\x2\x2\xC9A\xC9F"+
		"\a\x154\x2\x2\xC9B\xC9F\x5\x136\x9C\x2\xC9C\xC9F\x5\x138\x9D\x2\xC9D\xC9F"+
		"\x5\x156\xAC\x2\xC9E\xC9A\x3\x2\x2\x2\xC9E\xC9B\x3\x2\x2\x2\xC9E\xC9C"+
		"\x3\x2\x2\x2\xC9E\xC9D\x3\x2\x2\x2\xC9F\x129\x3\x2\x2\x2\xCA0\xCA6\a\x154"+
		"\x2\x2\xCA1\xCA6\a\x13A\x2\x2\xCA2\xCA6\x5\x136\x9C\x2\xCA3\xCA6\x5\x138"+
		"\x9D\x2\xCA4\xCA6\x5\x156\xAC\x2\xCA5\xCA0\x3\x2\x2\x2\xCA5\xCA1\x3\x2"+
		"\x2\x2\xCA5\xCA2\x3\x2\x2\x2\xCA5\xCA3\x3\x2\x2\x2\xCA5\xCA4\x3\x2\x2"+
		"\x2\xCA6\x12B\x3\x2\x2\x2\xCA7\xCA8\t>\x2\x2\xCA8\x12D\x3\x2\x2\x2\xCA9"+
		"\xCAA\t?\x2\x2\xCAA\x12F\x3\x2\x2\x2\xCAB\xCAC\t@\x2\x2\xCAC\x131\x3\x2"+
		"\x2\x2\xCAD\xCAE\t\x41\x2\x2\xCAE\x133\x3\x2\x2\x2\xCAF\xCB0\t\x42\x2"+
		"\x2\xCB0\x135\x3\x2\x2\x2\xCB1\xCB2\t\x43\x2\x2\xCB2\x137\x3\x2\x2\x2"+
		"\xCB3\xCB4\t\x44\x2\x2\xCB4\x139\x3\x2\x2\x2\xCB5\xCB7\x5\x8EH\x2\xCB6"+
		"\xCB5\x3\x2\x2\x2\xCB6\xCB7\x3\x2\x2\x2\xCB7\xCB9\x3\x2\x2\x2\xCB8\xCBA"+
		"\x5\x13C\x9F\x2\xCB9\xCB8\x3\x2\x2\x2\xCB9\xCBA\x3\x2\x2\x2\xCBA\xCBB"+
		"\x3\x2\x2\x2\xCBB\xCBD\a\xE\x2\x2\xCBC\xCBE\x5\xE8u\x2\xCBD\xCBC\x3\x2"+
		"\x2\x2\xCBD\xCBE\x3\x2\x2\x2\xCBE\xCBF\x3\x2\x2\x2\xCBF\xCC9\x5\x128\x95"+
		"\x2\xCC0\xCC1\t\x45\x2\x2\xCC1\xCC6\x5\xF8}\x2\xCC2\xCC3\a\x123\x2\x2"+
		"\xCC3\xCC5\x5\xF8}\x2\xCC4\xCC2\x3\x2\x2\x2\xCC5\xCC8\x3\x2\x2\x2\xCC6"+
		"\xCC4\x3\x2\x2\x2\xCC6\xCC7\x3\x2\x2\x2\xCC7\xCCA\x3\x2\x2\x2\xCC8\xCC6"+
		"\x3\x2\x2\x2\xCC9\xCC0\x3\x2\x2\x2\xCC9\xCCA\x3\x2\x2\x2\xCCA\xCD4\x3"+
		"\x2\x2\x2\xCCB\xCCC\a^\x2\x2\xCCC\xCD1\x5\xF8}\x2\xCCD\xCCE\a\x123\x2"+
		"\x2\xCCE\xCD0\x5\xF8}\x2\xCCF\xCCD\x3\x2\x2\x2\xCD0\xCD3\x3\x2\x2\x2\xCD1"+
		"\xCCF\x3\x2\x2\x2\xCD1\xCD2\x3\x2\x2\x2\xCD2\xCD5\x3\x2\x2\x2\xCD3\xCD1"+
		"\x3\x2\x2\x2\xCD4\xCCB\x3\x2\x2\x2\xCD4\xCD5\x3\x2\x2\x2\xCD5\xCD6\x3"+
		"\x2\x2\x2\xCD6\xCDA\x5\xE\b\x2\xCD7\xCD9\x5\x13E\xA0\x2\xCD8\xCD7\x3\x2"+
		"\x2\x2\xCD9\xCDC\x3\x2\x2\x2\xCDA\xCD8\x3\x2\x2\x2\xCDA\xCDB\x3\x2\x2"+
		"\x2\xCDB\xCDD\x3\x2\x2\x2\xCDC\xCDA\x3\x2\x2\x2\xCDD\xCDE\a\xBF\x2\x2"+
		"\xCDE\xCDF\x5\xE\b\x2\xCDF\x13B\x3\x2\x2\x2\xCE0\xCE2\t\x46\x2\x2\xCE1"+
		"\xCE0\x3\x2\x2\x2\xCE2\xCE3\x3\x2\x2\x2\xCE3\xCE1\x3\x2\x2\x2\xCE3\xCE4"+
		"\x3\x2\x2\x2\xCE4\x13D\x3\x2\x2\x2\xCE5\xCEC\x5\x140\xA1\x2\xCE6\xCEC"+
		"\x5\x14A\xA6\x2\xCE7\xCEC\x5\x152\xAA\x2\xCE8\xCEC\x5\x144\xA3\x2\xCE9"+
		"\xCEC\x5\x14E\xA8\x2\xCEA\xCEC\x5\x10\t\x2\xCEB\xCE5\x3\x2\x2\x2\xCEB"+
		"\xCE6\x3\x2\x2\x2\xCEB\xCE7\x3\x2\x2\x2\xCEB\xCE8\x3\x2\x2\x2\xCEB\xCE9"+
		"\x3\x2\x2\x2\xCEB\xCEA\x3\x2\x2\x2\xCEC\x13F\x3\x2\x2\x2\xCED\xCEE\x5"+
		"\x142\xA2\x2\xCEE\xCEF\a\x122\x2\x2\xCEF\xCF0\x5\xE\b\x2\xCF0\x141\x3"+
		"\x2\x2\x2\xCF1\xCF2\tG\x2\x2\xCF2\x143\x3\x2\x2\x2\xCF3\xCF5\x5\x148\xA5"+
		"\x2\xCF4\xCF3\x3\x2\x2\x2\xCF4\xCF5\x3\x2\x2\x2\xCF5\xCF6\x3\x2\x2\x2"+
		"\xCF6\xCF7\a\x32\x2\x2\xCF7\xD00\x5\x128\x95\x2\xCF8\xD01\x5\x146\xA4"+
		"\x2\xCF9\xCFA\a\x123\x2\x2\xCFA\xCFC\x5\x128\x95\x2\xCFB\xCF9\x3\x2\x2"+
		"\x2\xCFC\xCFF\x3\x2\x2\x2\xCFD\xCFB\x3\x2\x2\x2\xCFD\xCFE\x3\x2\x2\x2"+
		"\xCFE\xD01\x3\x2\x2\x2\xCFF\xCFD\x3\x2\x2\x2\xD00\xCF8\x3\x2\x2\x2\xD00"+
		"\xCFD\x3\x2\x2\x2\xD01\xD02\x3\x2\x2\x2\xD02\xD03\x5\xE\b\x2\xD03\x145"+
		"\x3\x2\x2\x2\xD04\xD05\a,\x2\x2\xD05\xD08\x5\x128\x95\x2\xD06\xD07\a-"+
		"\x2\x2\xD07\xD09\x5\x128\x95\x2\xD08\xD06\x3\x2\x2\x2\xD08\xD09\x3\x2"+
		"\x2\x2\xD09\xD0D\x3\x2\x2\x2\xD0A\xD0B\a-\x2\x2\xD0B\xD0D\x5\x128\x95"+
		"\x2\xD0C\xD04\x3\x2\x2\x2\xD0C\xD0A\x3\x2\x2\x2\xD0D\x147\x3\x2\x2\x2"+
		"\xD0E\xD10\tH\x2\x2\xD0F\xD0E\x3\x2\x2\x2\xD10\xD11\x3\x2\x2\x2\xD11\xD0F"+
		"\x3\x2\x2\x2\xD11\xD12\x3\x2\x2\x2\xD12\x149\x3\x2\x2\x2\xD13\xD15\x5"+
		"\x154\xAB\x2\xD14\xD13\x3\x2\x2\x2\xD14\xD15\x3\x2\x2\x2\xD15\xD16\x3"+
		"\x2\x2\x2\xD16\xD17\a\x92\x2\x2\xD17\xD24\x5\x128\x95\x2\xD18\xD25\x5"+
		"\x146\xA4\x2\xD19\xD1A\a\x123\x2\x2\xD1A\xD1C\x5\x128\x95\x2\xD1B\xD19"+
		"\x3\x2\x2\x2\xD1C\xD1F\x3\x2\x2\x2\xD1D\xD1B\x3\x2\x2\x2\xD1D\xD1E\x3"+
		"\x2\x2\x2\xD1E\xD22\x3\x2\x2\x2\xD1F\xD1D\x3\x2\x2\x2\xD20\xD21\a\x6\x2"+
		"\x2\xD21\xD23\x5\xF8}\x2\xD22\xD20\x3\x2\x2\x2\xD22\xD23\x3\x2\x2\x2\xD23"+
		"\xD25\x3\x2\x2\x2\xD24\xD18\x3\x2\x2\x2\xD24\xD1D\x3\x2\x2\x2\xD25\xD27"+
		"\x3\x2\x2\x2\xD26\xD28\a\xC8\x2\x2\xD27\xD26\x3\x2\x2\x2\xD27\xD28\x3"+
		"\x2\x2\x2\xD28\xD2A\x3\x2\x2\x2\xD29\xD2B\a\xC6\x2\x2\xD2A\xD29\x3\x2"+
		"\x2\x2\xD2A\xD2B\x3\x2\x2\x2\xD2B\xD2D\x3\x2\x2\x2\xD2C\xD2E\x5\x14C\xA7"+
		"\x2\xD2D\xD2C\x3\x2\x2\x2\xD2D\xD2E\x3\x2\x2\x2\xD2E\xD30\x3\x2\x2\x2"+
		"\xD2F\xD31\a\xC5\x2\x2\xD30\xD2F\x3\x2\x2\x2\xD30\xD31\x3\x2\x2\x2\xD31"+
		"\xD32\x3\x2\x2\x2\xD32\xD33\x5\xE\b\x2\xD33\x14B\x3\x2\x2\x2\xD34\xD35"+
		"\a\xBD\x2\x2\xD35\xD36\x5\x142\xA2\x2\xD36\x14D\x3\x2\x2\x2\xD37\xD39"+
		"\x5\x8EH\x2\xD38\xD37\x3\x2\x2\x2\xD38\xD39\x3\x2\x2\x2\xD39\xD42\x3\x2"+
		"\x2\x2\xD3A\xD3C\a\x4\x2\x2\xD3B\xD3D\a\b\x2\x2\xD3C\xD3B\x3\x2\x2\x2"+
		"\xD3C\xD3D\x3\x2\x2\x2\xD3D\xD43\x3\x2\x2\x2\xD3E\xD40\a\b\x2\x2\xD3F"+
		"\xD41\a\x4\x2\x2\xD40\xD3F\x3\x2\x2\x2\xD40\xD41\x3\x2\x2\x2\xD41\xD43"+
		"\x3\x2\x2\x2\xD42\xD3A\x3\x2\x2\x2\xD42\xD3E\x3\x2\x2\x2\xD43\xD45\x3"+
		"\x2\x2\x2\xD44\xD46\x5\x154\xAB\x2\xD45\xD44\x3\x2\x2\x2\xD45\xD46\x3"+
		"\x2\x2\x2\xD46\xD47\x3\x2\x2\x2\xD47\xD48\a\x32\x2\x2\xD48\xD4B\x5\x128"+
		"\x95\x2\xD49\xD4A\a\x92\x2\x2\xD4A\xD4C\x5\x128\x95\x2\xD4B\xD49\x3\x2"+
		"\x2\x2\xD4B\xD4C\x3\x2\x2\x2\xD4C\xD4F\x3\x2\x2\x2\xD4D\xD4E\a\x6\x2\x2"+
		"\xD4E\xD50\x5\xF8}\x2\xD4F\xD4D\x3\x2\x2\x2\xD4F\xD50\x3\x2\x2\x2\xD50"+
		"\xD51\x3\x2\x2\x2\xD51\xD52\x5\xE\b\x2\xD52\x14F\x3\x2\x2\x2\xD53\xD55"+
		"\x5\x8EH\x2\xD54\xD53\x3\x2\x2\x2\xD54\xD55\x3\x2\x2\x2\xD55\xD57\x3\x2"+
		"\x2\x2\xD56\xD58\tI\x2\x2\xD57\xD56\x3\x2\x2\x2\xD57\xD58\x3\x2\x2\x2"+
		"\xD58\xD5A\x3\x2\x2\x2\xD59\xD5B\x5\x154\xAB\x2\xD5A\xD59\x3\x2\x2\x2"+
		"\xD5A\xD5B\x3\x2\x2\x2\xD5B\xD5C\x3\x2\x2\x2\xD5C\xD60\a\x32\x2\x2\xD5D"+
		"\xD5E\x5\x128\x95\x2\xD5E\xD5F\a\x122\x2\x2\xD5F\xD61\x3\x2\x2\x2\xD60"+
		"\xD5D\x3\x2\x2\x2\xD60\xD61\x3\x2\x2\x2\xD61\xD62\x3\x2\x2\x2\xD62\xD64"+
		"\x5\x128\x95\x2\xD63\xD65\x5&\x14\x2\xD64\xD63\x3\x2\x2\x2\xD64\xD65\x3"+
		"\x2\x2\x2\xD65\xD68\x3\x2\x2\x2\xD66\xD67\a\x6\x2\x2\xD67\xD69\x5\xF8"+
		"}\x2\xD68\xD66\x3\x2\x2\x2\xD68\xD69\x3\x2\x2\x2\xD69\xD6C\x3\x2\x2\x2"+
		"\xD6A\xD6B\a\x153\x2\x2\xD6B\xD6D\x5\xC8\x65\x2\xD6C\xD6A\x3\x2\x2\x2"+
		"\xD6C\xD6D\x3\x2\x2\x2\xD6D\xD6E\x3\x2\x2\x2\xD6E\xD6F\x5\xE\b\x2\xD6F"+
		"\xD73\x5,\x17\x2\xD70\xD71\a\x19\x2\x2\xD71\xD72\a\x32\x2\x2\xD72\xD74"+
		"\x5\xE\b\x2\xD73\xD70\x3\x2\x2\x2\xD73\xD74\x3\x2\x2\x2\xD74\x151\x3\x2"+
		"\x2\x2\xD75\xD77\x5\x8EH\x2\xD76\xD75\x3\x2\x2\x2\xD76\xD77\x3\x2\x2\x2"+
		"\xD77\xD78\x3\x2\x2\x2\xD78\xD7A\a\xC3\x2\x2\xD79\xD7B\x5\x154\xAB\x2"+
		"\xD7A\xD79\x3\x2\x2\x2\xD7A\xD7B\x3\x2\x2\x2\xD7B\xD7C\x3\x2\x2\x2\xD7C"+
		"\xD7D\a\x32\x2\x2\xD7D\xD7F\x5\x128\x95\x2\xD7E\xD80\x5&\x14\x2\xD7F\xD7E"+
		"\x3\x2\x2\x2\xD7F\xD80\x3\x2\x2\x2\xD80\xD83\x3\x2\x2\x2\xD81\xD82\a\x6"+
		"\x2\x2\xD82\xD84\x5\xF8}\x2\xD83\xD81\x3\x2\x2\x2\xD83\xD84\x3\x2\x2\x2"+
		"\xD84\xD87\x3\x2\x2\x2\xD85\xD86\a\x153\x2\x2\xD86\xD88\x5\xC8\x65\x2"+
		"\xD87\xD85\x3\x2\x2\x2\xD87\xD88\x3\x2\x2\x2\xD88\xD89\x3\x2\x2\x2\xD89"+
		"\xD8A\x5\xE\b\x2\xD8A\xD8E\x5,\x17\x2\xD8B\xD8C\a\x19\x2\x2\xD8C\xD8D"+
		"\a\x32\x2\x2\xD8D\xD8F\x5\xE\b\x2\xD8E\xD8B\x3\x2\x2\x2\xD8E\xD8F\x3\x2"+
		"\x2\x2\xD8F\x153\x3\x2\x2\x2\xD90\xD92\tJ\x2\x2\xD91\xD90\x3\x2\x2\x2"+
		"\xD92\xD93\x3\x2\x2\x2\xD93\xD91\x3\x2\x2\x2\xD93\xD94\x3\x2\x2\x2\xD94"+
		"\x155\x3\x2\x2\x2\xD95\xD96\tK\x2\x2\xD96\x157\x3\x2\x2\x2\xD97\xD99\x5"+
		"\x8EH\x2\xD98\xD97\x3\x2\x2\x2\xD98\xD99\x3\x2\x2\x2\xD99\xD9A\x3\x2\x2"+
		"\x2\xD9A\xD9C\a\x11\x2\x2\xD9B\xD9D\x5H%\x2\xD9C\xD9B\x3\x2\x2\x2\xD9C"+
		"\xD9D\x3\x2\x2\x2\xD9D\xD9E\x3\x2\x2\x2\xD9E\xDA0\a\xE\x2\x2\xD9F\xDA1"+
		"\x5\xE8u\x2\xDA0\xD9F\x3\x2\x2\x2\xDA0\xDA1\x3\x2\x2\x2\xDA1\xDA2\x3\x2"+
		"\x2\x2\xDA2\xDA4\x5\x128\x95\x2\xDA3\xDA5\x5J&\x2\xDA4\xDA3\x3\x2\x2\x2"+
		"\xDA4\xDA5\x3\x2\x2\x2\xDA5\xDA8\x3\x2\x2\x2\xDA6\xDA7\a\x6\x2\x2\xDA7"+
		"\xDA9\x5\xF8}\x2\xDA8\xDA6\x3\x2\x2\x2\xDA8\xDA9\x3\x2\x2\x2\xDA9\xDAC"+
		"\x3\x2\x2\x2\xDAA\xDAB\a\x88\x2\x2\xDAB\xDAD\x5\x128\x95\x2\xDAC\xDAA"+
		"\x3\x2\x2\x2\xDAC\xDAD\x3\x2\x2\x2\xDAD\xDB1\x3\x2\x2\x2\xDAE\xDB0\x5"+
		"N(\x2\xDAF\xDAE\x3\x2\x2\x2\xDB0\xDB3\x3\x2\x2\x2\xDB1\xDAF\x3\x2\x2\x2"+
		"\xDB1\xDB2\x3\x2\x2\x2\xDB2\xDB5\x3\x2\x2\x2\xDB3\xDB1\x3\x2\x2\x2\xDB4"+
		"\xDB6\a\xCC\x2\x2\xDB5\xDB4\x3\x2\x2\x2\xDB5\xDB6\x3\x2\x2\x2\xDB6\xDB7"+
		"\x3\x2\x2\x2\xDB7\xDBB\x5\xE\b\x2\xDB8\xDBA\x5\x15A\xAE\x2\xDB9\xDB8\x3"+
		"\x2\x2\x2\xDBA\xDBD\x3\x2\x2\x2\xDBB\xDB9\x3\x2\x2\x2\xDBB\xDBC\x3\x2"+
		"\x2\x2\xDBC\xDC1\x3\x2\x2\x2\xDBD\xDBB\x3\x2\x2\x2\xDBE\xDC2\a\xCA\x2"+
		"\x2\xDBF\xDC0\a\x19\x2\x2\xDC0\xDC2\a\x11\x2\x2\xDC1\xDBE\x3\x2\x2\x2"+
		"\xDC1\xDBF\x3\x2\x2\x2\xDC2\xDC3\x3\x2\x2\x2\xDC3\xDC4\x5\xE\b\x2\xDC4"+
		"\x159\x3\x2\x2\x2\xDC5\xDCF\x5\x15E\xB0\x2\xDC6\xDCF\x5\x160\xB1\x2\xDC7"+
		"\xDCF\x5\x15C\xAF\x2\xDC8\xDCF\x5\x164\xB3\x2\xDC9\xDCF\x5\x166\xB4\x2"+
		"\xDCA\xDCF\x5\x168\xB5\x2\xDCB\xDCF\x5x=\x2\xDCC\xDCF\x5\x80\x41\x2\xDCD"+
		"\xDCF\x5\x10\t\x2\xDCE\xDC5\x3\x2\x2\x2\xDCE\xDC6\x3\x2\x2\x2\xDCE\xDC7"+
		"\x3\x2\x2\x2\xDCE\xDC8\x3\x2\x2\x2\xDCE\xDC9\x3\x2\x2\x2\xDCE\xDCA\x3"+
		"\x2\x2\x2\xDCE\xDCB\x3\x2\x2\x2\xDCE\xDCC\x3\x2\x2\x2\xDCE\xDCD\x3\x2"+
		"\x2\x2\xDCF\x15B\x3\x2\x2\x2\xDD0\xDD2\x5\x8EH\x2\xDD1\xDD0\x3\x2\x2\x2"+
		"\xDD1\xDD2\x3\x2\x2\x2\xDD2\xDD4\x3\x2\x2\x2\xDD3\xDD5\x5\x8CG\x2\xDD4"+
		"\xDD3\x3\x2\x2\x2\xDD4\xDD5\x3\x2\x2\x2\xDD5\xDD6\x3\x2\x2\x2\xDD6\xDD7"+
		"\x5\x14\v\x2\xDD7\xDDA\x5\x16\f\x2\xDD8\xDD9\a\xCF\x2\x2\xDD9\xDDB\x5"+
		"\xC8\x65\x2\xDDA\xDD8\x3\x2\x2\x2\xDDA\xDDB\x3\x2\x2\x2\xDDB\xDE1\x3\x2"+
		"\x2\x2\xDDC\xDDD\a\xCE\x2\x2\xDDD\xDDE\a\x11C\x2\x2\xDDE\xDDF\x5\x128"+
		"\x95\x2\xDDF\xDE0\a\x11D\x2\x2\xDE0\xDE2\x3\x2\x2\x2\xDE1\xDDC\x3\x2\x2"+
		"\x2\xDE1\xDE2\x3\x2\x2\x2\xDE2\xDE3\x3\x2\x2\x2\xDE3\xDE4\x5\xE\b\x2\xDE4"+
		"\xDE9\x5,\x17\x2\xDE5\xDE6\a\x19\x2\x2\xDE6\xDE7\x5\x14\v\x2\xDE7\xDE8"+
		"\a\x15F\x2\x2\xDE8\xDEA\x3\x2\x2\x2\xDE9\xDE5\x3\x2\x2\x2\xDE9\xDEA\x3"+
		"\x2\x2\x2\xDEA\x15D\x3\x2\x2\x2\xDEB\xDED\x5\x8EH\x2\xDEC\xDEB\x3\x2\x2"+
		"\x2\xDEC\xDED\x3\x2\x2\x2\xDED\xDEF\x3\x2\x2\x2\xDEE\xDF0\x5\x62\x32\x2"+
		"\xDEF\xDEE\x3\x2\x2\x2\xDEF\xDF0\x3\x2\x2\x2\xDF0\xDF2\x3\x2\x2\x2\xDF1"+
		"\xDF3\a \x2\x2\xDF2\xDF1\x3\x2\x2\x2\xDF2\xDF3\x3\x2\x2\x2\xDF3\xDF4\x3"+
		"\x2\x2\x2\xDF4\xDF9\x5\x128\x95\x2\xDF5\xDF6\a\x123\x2\x2\xDF6\xDF8\x5"+
		"\x128\x95\x2\xDF7\xDF5\x3\x2\x2\x2\xDF8\xDFB\x3\x2\x2\x2\xDF9\xDF7\x3"+
		"\x2\x2\x2\xDF9\xDFA\x3\x2\x2\x2\xDFA\xDFE\x3\x2\x2\x2\xDFB\xDF9\x3\x2"+
		"\x2\x2\xDFC\xDFD\a\x6\x2\x2\xDFD\xDFF\x5\xF8}\x2\xDFE\xDFC\x3\x2\x2\x2"+
		"\xDFE\xDFF\x3\x2\x2\x2\xDFF\xE00\x3\x2\x2\x2\xE00\xE01\x5\xE\b\x2\xE01"+
		"\x15F\x3\x2\x2\x2\xE02\xE04\x5\x62\x32\x2\xE03\xE02\x3\x2\x2\x2\xE03\xE04"+
		"\x3\x2\x2\x2\xE04\xE06\x3\x2\x2\x2\xE05\xE07\a \x2\x2\xE06\xE05\x3\x2"+
		"\x2\x2\xE06\xE07\x3\x2\x2\x2\xE07\xE08\x3\x2\x2\x2\xE08\xE09\x5\x162\xB2"+
		"\x2\xE09\xE0A\x5\xE\b\x2\xE0A\x161\x3\x2\x2\x2\xE0B\xE0C\x5\xEAv\x2\xE0C"+
		"\xE0D\x5\xC6\x64\x2\xE0D\xE0E\x5\xC8\x65\x2\xE0E\x163\x3\x2\x2\x2\xE0F"+
		"\xE10\a^\x2\x2\xE10\xE12\x5\xF8}\x2\xE11\xE13\a\xCD\x2\x2\xE12\xE11\x3"+
		"\x2\x2\x2\xE12\xE13\x3\x2\x2\x2\xE13\xE16\x3\x2\x2\x2\xE14\xE15\a-\x2"+
		"\x2\xE15\xE17\x5\xC8\x65\x2\xE16\xE14\x3\x2\x2\x2\xE16\xE17\x3\x2\x2\x2"+
		"\xE17\xE18\x3\x2\x2\x2\xE18\xE19\x5\xE\b\x2\xE19\x165\x3\x2\x2\x2\xE1A"+
		"\xE1C\x5\x8EH\x2\xE1B\xE1A\x3\x2\x2\x2\xE1B\xE1C\x3\x2\x2\x2\xE1C\xE1D"+
		"\x3\x2\x2\x2\xE1D\xE1E\au\x2\x2\xE1E\xE20\a\xA3\x2\x2\xE1F\xE21\x5\x62"+
		"\x32\x2\xE20\xE1F\x3\x2\x2\x2\xE20\xE21\x3\x2\x2\x2\xE21\xE22\x3\x2\x2"+
		"\x2\xE22\xE23\x5\x128\x95\x2\xE23\xE24\a\x6\x2\x2\xE24\xE26\x5\xF8}\x2"+
		"\xE25\xE27\a\xD1\x2\x2\xE26\xE25\x3\x2\x2\x2\xE26\xE27\x3\x2\x2\x2\xE27"+
		"\xE31\x3\x2\x2\x2\xE28\xE29\a\x97\x2\x2\xE29\xE2E\x5\x162\xB2\x2\xE2A"+
		"\xE2B\a\x123\x2\x2\xE2B\xE2D\x5\x162\xB2\x2\xE2C\xE2A\x3\x2\x2\x2\xE2D"+
		"\xE30\x3\x2\x2\x2\xE2E\xE2C\x3\x2\x2\x2\xE2E\xE2F\x3\x2\x2\x2\xE2F\xE32"+
		"\x3\x2\x2\x2\xE30\xE2E\x3\x2\x2\x2\xE31\xE28\x3\x2\x2\x2\xE31\xE32\x3"+
		"\x2\x2\x2\xE32\xE33\x3\x2\x2\x2\xE33\xE34\x5\xE\b\x2\xE34\x167\x3\x2\x2"+
		"\x2\xE35\xE36\a\xD0\x2\x2\xE36\xE37\x5\x128\x95\x2\xE37\xE38\a\x120\x2"+
		"\x2\xE38\xE3B\x5\xC8\x65\x2\xE39\xE3A\a\x123\x2\x2\xE3A\xE3C\x5\xC8\x65"+
		"\x2\xE3B\xE39\x3\x2\x2\x2\xE3B\xE3C\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2"+
		"\xE3D\xE3E\a\x121\x2\x2\xE3E\xE3F\x5\xE\b\x2\xE3F\xE54\x3\x2\x2\x2\xE40"+
		"\xE41\a\xD0\x2\x2\xE41\xE42\x5\x128\x95\x2\xE42\xE43\a\x11C\x2\x2\xE43"+
		"\xE46\x5\xC8\x65\x2\xE44\xE45\a\x123\x2\x2\xE45\xE47\x5\xC8\x65\x2\xE46"+
		"\xE44\x3\x2\x2\x2\xE46\xE47\x3\x2\x2\x2\xE47\xE48\x3\x2\x2\x2\xE48\xE49"+
		"\a\x11D\x2\x2\xE49\xE4A\x5\xE\b\x2\xE4A\xE54\x3\x2\x2\x2\xE4B\xE4C\x5"+
		"\x128\x95\x2\xE4C\xE4D\a\x120\x2\x2\xE4D\xE4E\x5\xC8\x65\x2\xE4E\xE4F"+
		"\a\x121\x2\x2\xE4F\xE50\x5\xC6\x64\x2\xE50\xE51\x5\xC8\x65\x2\xE51\xE52"+
		"\x5\xE\b\x2\xE52\xE54\x3\x2\x2\x2\xE53\xE35\x3\x2\x2\x2\xE53\xE40\x3\x2"+
		"\x2\x2\xE53\xE4B\x3\x2\x2\x2\xE54\x169\x3\x2\x2\x2\x216\x170\x172\x178"+
		"\x180\x184\x18C\x194\x19B\x1BB\x1C0\x1C6\x1CC\x1CF\x1D4\x1DD\x1E3\x1E6"+
		"\x1EA\x1EF\x1F3\x1F7\x1FB\x1FF\x204\x207\x20F\x212\x218\x21E\x221\x225"+
		"\x227\x22A\x231\x234\x238\x23F\x243\x24A\x24D\x252\x256\x259\x25E\x268"+
		"\x26B\x270\x273\x279\x27E\x281\x285\x28A\x290\x294\x299\x29F\x2A2\x2A6"+
		"\x2AD\x2B3\x2B7\x2BE\x2C3\x2C6\x2C9\x2CD\x2D2\x2DB\x2E0\x2E8\x2ED\x2F1"+
		"\x2F6\x2FC\x301\x30B\x313\x317\x31A\x31E\x325\x32A\x32F\x338\x340\x343"+
		"\x347\x34B\x34F\x355\x35B\x362\x36A\x36D\x371\x375\x379\x381\x384\x389"+
		"\x390\x39A\x3A0\x3A5\x3AB\x3AE\x3BA\x3C2\x3C5\x3C8\x3CC\x3D0\x3D8\x3DB"+
		"\x3E0\x3E7\x3EF\x3F2\x3F6\x3FA\x3FD\x401\x406\x40C\x40F\x413\x418\x41E"+
		"\x422\x427\x42A\x430\x435\x438\x43C\x441\x447\x44F\x453\x457\x45A\x45D"+
		"\x462\x467\x46A\x46D\x470\x477\x481\x486\x48B\x493\x49B\x49E\x4A5\x4AA"+
		"\x4AE\x4B6\x4BD\x4C0\x4C3\x4C6\x4CC\x4CF\x4D2\x4D6\x4DC\x4E2\x4E8\x4F0"+
		"\x4F4\x4F8\x500\x503\x50C\x50F\x512\x515\x518\x51D\x520\x525\x52A\x52D"+
		"\x532\x539\x53D\x540\x547\x551\x556\x56A\x56D\x570\x574\x578\x57B\x57F"+
		"\x583\x587\x58D\x596\x59D\x5A4\x5A9\x5AC\x5B1\x5B5\x5B9\x5C0\x5C5\x5CC"+
		"\x5CF\x5D4\x5D7\x5DC\x5E0\x5E7\x5EC\x5F1\x5F6\x5FA\x601\x607\x613\x616"+
		"\x619\x620\x629\x638\x643\x648\x652\x65A\x65D\x660\x665\x66B\x66F\x67B"+
		"\x67D\x683\x68A\x68D\x693\x696\x699\x69F\x6A3\x6A6\x6A9\x6B1\x6B7\x6C0"+
		"\x6C3\x6CC\x6D2\x6D6\x6D9\x6E5\x6EF\x6F8\x6FB\x6FF\x707\x70B\x712\x716"+
		"\x719\x722\x725\x72D\x730\x736\x73D\x745\x749\x74C\x752\x758\x75B\x763"+
		"\x766\x76E\x771\x779\x77C\x785\x788\x790\x793\x799\x79C\x79F\x7A3\x7A7"+
		"\x7A9\x7BA\x7CE\x7D2\x7D6\x7E0\x7E7\x7ED\x7F3\x7FB\x7FE\x804\x807\x80B"+
		"\x80F\x816\x81C\x820\x827\x830\x835\x837\x83F\x846\x852\x85E\x864\x86C"+
		"\x873\x87B\x882\x88A\x891\x899\x8A0\x8A3\x8AB\x8B0\x8B3\x8B6\x8BD\x8C2"+
		"\x8C8\x8CA\x8CD\x8D9\x8DE\x8E8\x8F3\x8F8\x8FB\x902\x907\x90F\x91A\x922"+
		"\x927\x92B\x936\x942\x949\x950\x955\x958\x961\x96C\x971\x974\x97A\x97D"+
		"\x981\x984\x992\x9AF\xA01\xA06\xA08\xA21\xA28\xA76\xA89\xA8F\xA98\xAAD"+
		"\xAAF\xABA\xAD3\xAE3\xAEB\xAED\xAF1\xAF9\xAFC\xB06\xB0E\xB15\xB1D\xB27"+
		"\xB2B\xB32\xB39\xB3C\xB49\xB4C\xB4E\xB55\xB59\xB67\xB72\xB7D\xB81\xB89"+
		"\xB92\xB98\xBA6\xBAC\xBB2\xBB7\xBBC\xBC0\xBC6\xBCE\xBD6\xBDB\xBDE\xBE7"+
		"\xBEA\xBF3\xBF9\xBFC\xC04\xC07\xC0A\xC0C\xC12\xC15\xC1B\xC1F\xC26\xC2A"+
		"\xC2F\xC34\xC39\xC3C\xC47\xC55\xC5D\xC62\xC70\xC79\xC81\xC84\xC8B\xC94"+
		"\xC9E\xCA5\xCB6\xCB9\xCBD\xCC6\xCC9\xCD1\xCD4\xCDA\xCE3\xCEB\xCF4\xCFD"+
		"\xD00\xD08\xD0C\xD11\xD14\xD1D\xD22\xD24\xD27\xD2A\xD2D\xD30\xD38\xD3C"+
		"\xD40\xD42\xD45\xD4B\xD4F\xD54\xD57\xD5A\xD60\xD64\xD68\xD6C\xD73\xD76"+
		"\xD7A\xD7F\xD83\xD87\xD8E\xD93\xD98\xD9C\xDA0\xDA4\xDA8\xDAC\xDB1\xDB5"+
		"\xDBB\xDC1\xDCE\xDD1\xDD4\xDDA\xDE1\xDE9\xDEC\xDEF\xDF2\xDF9\xDFE\xE03"+
		"\xE06\xE12\xE16\xE1B\xE20\xE26\xE2E\xE31\xE3B\xE46\xE53";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
