<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>X# Scripting</title>
  <body>
    <header>
      <para styleclass="Heading1">X# Scripting</para>
    </header>
    <para styleclass="Normal">Below is the text from the presentation from the session that Nikos did in Cologne during the XBase.Future 2017 conference.</para>
    <para styleclass="Normal">The examples from this session are stored during the installation of X# in the folder c:\Users\Public\Documents\XSharp\Scripting</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Why endorse scripting?</para>
    <para styleclass="Heading1 Black"><text styleclass="Normal">● Dynamic behavior at runtime </text></para>
    <para styleclass="Normal">– Extensibility and flexibility </para>
    <para styleclass="Normal">– User-defined behavior </para>
    <para styleclass="Normal">● Platform independence </para>
    <para styleclass="Normal">– System operations defined in a script </para>
    <para styleclass="Normal">● Behavior as data </para>
    <para styleclass="Normal">– Stored in files, database, cloud </para>
    <para styleclass="Normal">– Updated at runtime </para>
    <para styleclass="Normal">● Rapid prototyping</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Scripting is...</para>
    <para styleclass="Normal">● Expression evaluation </para>
    <para styleclass="Normal">– Built-in interpreter </para>
    <para styleclass="Normal">– Self-contained functionality </para>
    <para styleclass="Normal">– Simple expressions or full statements </para>
    <para styleclass="Normal">● Source file(s) without a project </para>
    <para styleclass="Normal">– Single file (multiple sources may be loaded by a single script) </para>
    <para styleclass="Normal">– No need for a full IDE or SDK </para>
    <para styleclass="Normal">– Dynamic compilation without an IDE </para>
    <para styleclass="Normal">– Definition of complex structures, classes</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">X# as a scripting language</para>
    <para styleclass="Normal">● Roslyn script engine </para>
    <para styleclass="Normal">– C# scripting </para>
    <para styleclass="Normal">● Standalone expressions </para>
    <para styleclass="Normal">– No START function </para>
    <para styleclass="Normal">– Global statements, expressions </para>
    <para styleclass="Normal">– Similar to the macro compiler (but not the same!) </para>
    <para styleclass="Normal">– Host object maintains state</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">X# as a scripting language</para>
    <para styleclass="Normal">● Complex declarations allowed </para>
    <para styleclass="Normal">– Types, functions can be declared </para>
    <para styleclass="Normal">– No namespaces! </para>
    <para styleclass="Normal">● External references </para>
    <para styleclass="Normal">– Loading assemblies </para>
    <para styleclass="Normal">– No implicit access to host assembly </para>
    <para styleclass="Normal">– No isolation (e.g. separate AppDomain)</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">The X-Sharp interpreter (xsi.exe)</para>
    <para styleclass="Normal">● Read-Eval-Print Loop (REPL) </para>
    <para styleclass="Normal">● Console application </para>
    <para styleclass="Normal">● Return values are printed to the console </para>
    <para styleclass="Normal">– With pretty formatting! </para>
    <para styleclass="Normal">● Maintain context </para>
    <para styleclass="Normal">● Declare LOCAL variables</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">The X-Sharp interpreter (xsi.exe)</para>
    <para styleclass="Normal">● Can load assemblies, script files </para>
    <para styleclass="Normal">– .PRGX extension </para>
    <para styleclass="Normal">– #R directive </para>
    <para styleclass="Normal">– #LOAD directive </para>
    <para styleclass="Normal">● Can runs scripts from command line </para>
    <para styleclass="Normal">– Xsi.exe &lt;script.prgx&gt; </para>
    <para styleclass="Normal">● Passes command-line arguments to scripts </para>
    <para styleclass="Normal">– Xsi.exe &lt;script.prgx&gt; &lt;arg&gt; ...</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Alternative ways to run scripts</para>
    <para styleclass="Normal">● Setting xsi.exe as default app for .prgx </para>
    <para styleclass="Normal">– Also creates file association, but without args </para>
    <para styleclass="Normal">– Edit file association in registry </para>
    <para styleclass="Normal">● Manually setting file association </para>
    <para styleclass="Normal">– assoc, ftype </para>
    <para styleclass="Normal">● Invoking without the .prgx extension </para>
    <para styleclass="Normal">– PATHEXT </para>
    <para styleclass="Normal">● Run without console? </para>
    <para styleclass="Normal">– Not possible with xsi.exe since it is a console application</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Scripting internals: the submission</para>
    <para styleclass="Normal">● Every script is compiled into a “submission” </para>
    <para styleclass="Normal">– Roslyn terminology </para>
    <para styleclass="Normal">● Every line given to the xsi prompt creates a new submission </para>
    <para styleclass="Normal">– Inherits previous submission </para>
    <para styleclass="Normal">– Previously declared variables remain visible </para>
    <para styleclass="Normal">● Cannot be inspected directly </para>
    <para styleclass="Normal">– “SELF” and “SUPER” are not accessible</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Scripting internals: the global object</para>
    <para styleclass="Normal">● Statements execute in the context of the global object </para>
    <para styleclass="Normal">● Generated by xsi.exe </para>
    <para styleclass="Normal">– InteractiveScriptGlobals class </para>
    <para styleclass="Normal">● Provides access to command-line arguments </para>
    <para styleclass="Normal">● Print function with pretty-formatting options</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Scripting internals: script declarations</para>
    <para styleclass="Normal">● Are LOCALs declared in a script really local? </para>
    <para styleclass="Normal">– Not when they are declared outside of a method </para>
    <para styleclass="Normal">– They become fields of the submission class </para>
    <para styleclass="Normal">● What about FUNCTIONs and PROCEDUREs? </para>
    <para styleclass="Normal">– They become methods of the submission class </para>
    <para styleclass="Normal">● Declared types? (CLASSes, STRUCTUREs, ENUMs) </para>
    <para styleclass="Normal">– They become nested types in the submission class </para>
    <para styleclass="Normal">– Not possible to have extension methods!</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Application scripting: the first steps</para>
    <para styleclass="Normal">● Add scripting capabilities to your application! </para>
    <para styleclass="Normal">● Reference the script hosting and code analysis assemblies </para>
    <para styleclass="Normal">– XSharp.CodeAnalysis.dll </para>
    <para styleclass="Normal">– XSharp.Scripting.dll </para>
    <para styleclass="Normal">● Important namespaces </para>
    <para styleclass="Normal">– LanguageService.CodeAnalysis.Scripting </para>
    <para styleclass="Normal">– LanguageService.CodeAnalysis.Xsharp.Scripting </para>
    <para styleclass="Normal">● Run a script </para>
    <para styleclass="Normal">– XSharpScript.RunAsync(&quot;? &apos;HELLO&apos;&quot;) </para>
    <para styleclass="Normal">– CompilationErrorException is thrown if the source has errors</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Problem: how to pass arguments to a script?</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Passing arguments: the globals object</para>
    <para styleclass="Normal">● The script can access public members of the globals object – The type of the globals object can be custom ● An instance of the globals object can be passed to RunAsync() – Public fields of the globals object can be used to pass arguments to the script – The script will access them as variables</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Problem: how to provide an API to the script?</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Script API: the globals object</para>
    <para styleclass="Normal">● Public members of the globals object are accessible by the script </para>
    <para styleclass="Normal">– Remember: the script is compiled and executed in a different assembly in-memory! </para>
    <para styleclass="Normal">● Not an elegant method to give access to types </para>
    <para styleclass="Normal">– But excellent for a function-based API </para>
    <para styleclass="Normal">– Self-contained, not prone to errors </para>
    <para styleclass="Normal" style="margin-left:13px;">● The script does not have direct access to all application types </para>
    <para styleclass="Normal" style="margin-left:13px;">● Not a security measure! </para>
    <para styleclass="Normal" style="margin-left:13px;">– The script is run in the same AppDomain (in a dynamic assembly)</para>
    <para styleclass="Heading1 Black" style="margin-left:13px;"></para>
    <para styleclass="Heading1 Black">Script API: using a common assembly</para>
    <para styleclass="Normal">● Scripts can reference assemblies </para>
    <para styleclass="Normal">– Through the #R directive </para>
    <para styleclass="Normal">– Through the options passed to the RunAsync() call </para>
    <para styleclass="Normal">● Move functions and types that should be accessible by the script to a separate assembly </para>
    <para styleclass="Normal">– The assembly can then be referenced by the script </para>
    <para styleclass="Normal">● Can be used in conjunction with the globals object</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Problem: how to get results back from a script?</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Script result: return value</para>
    <para styleclass="Normal">● Scripts can return a value with a RETURN statement </para>
    <para styleclass="Normal">– ...or from a standalone expression! </para>
    <para styleclass="Normal">– EvalAsync() returns that value </para>
    <para styleclass="Normal">– RunAsync() returns a ScriptState object, from which the return value can also be fetched</para>
    <para styleclass="Heading1 Black"></para>
    <para styleclass="Heading1 Black">Script result: examine script state</para>
    <para styleclass="Normal">● Variables declared by the script can be examined </para>
    <para styleclass="Normal">– The ScriptState object returned by RunAsync() includes methods to examine the variables </para>
    <para styleclass="Normal">● ScriptState.GetVariable(string name)</para>
    <para styleclass="Heading1 Black"></para>
    <para styleclass="Heading1 Black">Advanced topics: handling errors</para>
    <para styleclass="Normal">● Compilation errors </para>
    <para styleclass="Normal">– CompilationErrorException thrown </para>
    <para styleclass="Normal">– Roslyn API provides access to compilation messages </para>
    <para styleclass="Normal">– Create script object with XsharpScript.Create() </para>
    <para styleclass="Normal">– Compile with script:Compile() </para>
    <para styleclass="Normal" style="margin-left:13px;">● Returns list of diagnostic messages </para>
    <para styleclass="Normal">● Runtime errors </para>
    <para styleclass="Normal">– Exception is thrown </para>
    <para styleclass="Normal" style="margin-left:13px;">● AggregateException because script is ran as a Task </para>
    <para styleclass="Normal" style="margin-left:13px;">● e:InnerException property contains the real exception</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Advanced topics: strong-typed return value</para>
    <para styleclass="Normal">● By default a script returns OBJECT </para>
    <para styleclass="Normal">● Custom return type can be specified </para>
    <para styleclass="Normal">– Create&lt;T&gt;() </para>
    <para styleclass="Normal">– RunAsync&lt;T&gt;() </para>
    <para styleclass="Normal">– EvaluateAsync&lt;T&gt;()</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Advanced topics: performance tuning</para>
    <para styleclass="Normal">● Pre-compile scripts </para>
    <para styleclass="Normal">– Script:Compile() </para>
    <para styleclass="Normal">– Compiled scripts can be ran multiple times </para>
    <para styleclass="Normal">● Similar to macros </para>
    <para styleclass="Normal">● Delegate can be created with script:CreateDelegate() </para>
    <para styleclass="Normal">● Native image with ngen.exe </para>
    <para styleclass="Normal">– Speed-up initial compilation </para>
    <para styleclass="Normal">– 64-bit version of ngen must be used for 64-bit CLR!!! </para>
    <para styleclass="Normal">– Useful for command-line scripts (xsi.exe)</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Advanced topics: functional scripts</para>
    <para styleclass="Normal">● A script cannot be used exactly like a function </para>
    <para styleclass="Normal">– Does not accept arguments </para>
    <para styleclass="Normal" style="margin-left:13px;">● Instead, it needs a global object instance </para>
    <para styleclass="Normal">– Is run via a script hosting object </para>
    <para styleclass="Normal" style="margin-left:13px;">● Additional overhead </para>
    <para styleclass="Normal">● But scripts can evaluate to functions! </para>
    <para styleclass="Normal">– Lamda functions or delegates as return type</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Advanced topics: accessing application</para>
    <para styleclass="Normal">● Provide a reference to current assembly inmemory </para>
    <para styleclass="Normal">– Assembly.GetExecutingAssembly() </para>
    <para styleclass="Normal">– Does not work with CoreCLR </para>
    <para styleclass="Normal">● Entities declared in current assembly can be used </para>
    <para styleclass="Normal">– Functions &amp; procedures </para>
    <para styleclass="Normal">– Types (classes, structures, etc.) </para>
    <para styleclass="Normal">– Namespaces</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1 Black">Advanced topics: support for dynamics</para>
    <para styleclass="Normal">● Need to reference the proper assembly – Microsoft.Csharp.dll</para>
    <para styleclass="Normal"></para>
  </body>
</topic>
