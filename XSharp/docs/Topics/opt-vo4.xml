<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">/vo4</title>
  <keywords>
    <keyword translate="true">/vo4 compiler option</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">/vo4</text><tab /><tab /><text styleclass="Heading1" translate="true">Implicit signed/unsigned conversions</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Vulcan</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The /vo4 option directs the compiler to implicitly convert signed integer types to/from unsigned types, and larger integer types to smaller types.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Syntax</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">/vo4[+|-]</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Arguments</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="List"><text styleclass="Code Example" translate="true">+ | - </text><tab /><text styleclass="List" translate="true">Specifying +, or just /vo4, directs the compiler to implicitly convert signed integer values to/from unsigned values, and larger integer types to smaller integer types. This provides compatibility with Visual Objects, which permits such conversions without an explicit cast or conversion operator. </text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Remarks</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For safety reasons, this option is off by default. Implicitly converting between signed and unsigned integer types or between larger to smaller integer types can cause numeric overflow errors at runtime or unintended values to be passed depending upon whether overflow checking is enabled or disabled. By default, you must explicitly cast a signed integer to its unsigned counterpart and from larger integer types to smaller integer types and by explicitly doing so, it is assumed that the conversion is known by the programmer to be safe.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When this option is enabled, the compiler will implicitly convert the data types listed in the table below:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="9" colcount="2">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">From</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">To</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SByte </text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BYTE, WORD, Char, DWORD</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SHORT </text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BYTE, SByte, WORD, Char, DWORD</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">INT </text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BYTE, SByte, WORD, SHORT, Char, DWORD</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">INT64</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BYTE, SByte, WORD, SHORT, Char, INT, DWORD, UINT64</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BYTE</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SByte</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">WORD</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SByte, BYTE, SHORT, Char, INT</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">DWORD</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SByte, BYTE, WORD, SHORT, INT</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">UINT64</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">SByte, BYTE, WORD, SHORT, Char, INT, DWORD, INT64</text></para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For each conversion, the compiler will raise an appropriate warning. You may disable the warning with the /wx switch, or insert an explicit cast in the source code to eliminate the warning.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> It is strongly recommended that you do not use this compiler option in new code. All of the conversions listed in the table above have the ability to lose data or return incorrect values, since the range of values in the source data type cannot be represented in the target data type.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For example, an INT containing a negative number cannot be represented in a DWORD. Similarly, an INT greater than 65535 cannot be represeneted in a SHORT. If you must mix signed and unsigned types or pass a larger type to a smaller type, you should always supply an explicit cast rather than using /vo4. This will document the fact that the conversion is known to be safe, and it will not suppress compile time errors if incompatible integer types are unintentionally used. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading3"><text styleclass="Heading3" translate="true">To set this compiler option in the Visual Studio development environment:</text></para>
    <para styleclass="Normal"></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:&apos;Segoe UI&apos;; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Open the project&apos;s Properties page</text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Click the Language tab. </text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">In the Visual Objects Compatibility section, modify the Implicit Signed/Unsigned Integer Conversions property. </text></li>
    </list>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true"> FUNCTION Start() AS VOID</text><br/><text styleclass="Code with box" translate="true"> &#160; LOCAL dw := 4294967296 AS DWORD</text><br/><text styleclass="Code with box" translate="true"> &#160; LOCAL i := -1 AS INT</text><br/><br/><text styleclass="Code with box" translate="true"> &#160; DWORD_Function( i ) // no error if compiled with /vo4</text><br/><text styleclass="Code with box" translate="true"> &#160; INT_Function( dw ) // no error if compiled with /vo4</text><br/><text styleclass="Code with box" translate="true"> &#160; RETURN</text><br/><br/><text styleclass="Code with box" translate="true">FUNCTION DWORD_Function( x AS DWORD ) AS VOID</text><br/><text styleclass="Code with box" translate="true"> &#160; ? x</text><br/><text styleclass="Code with box" translate="true"> &#160; RETURN</text><br/><text styleclass="Code with box" translate="true">FUNCTION INT_Function( x AS INT ) AS VOID</text><br/><text styleclass="Code with box" translate="true"> &#160; ? x</text><br/><text styleclass="Code with box" translate="true"> &#160; RETURN </text><br/></para>
  </body>
</topic>
