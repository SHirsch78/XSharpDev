[Core]
AllowBeginSequence=False
AllowClipperCallingConvention=False
AllowMemvars=False
AllowPsz=False
AllowRDD=False
AllowUnion=False
AllowStruct=False

StringCompare=System.String.Compare
StringEquals=System.String.Equals
; Empty NotEquals translates to ! Equals
StringNotEquals=


[Vulcan]
; Vulcan Settings
AllowBeginSequence=True
AllowClipperCallingConvention=True
AllowMemvars=False
AllowPsz=True
AllowRDD=True
AllowUnion=True
AllowStruct=True

; The following include path is added to the preprocessor automatically. Can be semi colon separated list.
IncludePath=C:\Program Files (x86)\Vulcan.NET 4.0\Include

; The following include is added to the preprocessor automatically. Semi colon separated list.
Include=VulcanStdDefs.vh;Errorcodes.vh;db.vh;DbCmds.vh

; The following references are added automatically. Semi colon separated list
References=VulcanRTFuncs.dll;VulcanRT.dll

; The following namespaces are inserted with USING STATIC Syntax. Semi colon separated list
Functions=VulcanRTFuncs.Functions
; The following namespaces are inserted with USING Syntax. Semi colon separated list
Using=Vulcan;Vulcan.VO

; The following keywords will be replaced by the preprocessor 
; NULL_OBJECT is mapped to NULL, NULL_PTR is mapped to IntPtr.Zero
; 
NULL_ARRAY=NULL
NULL_CODEBLOCK=NULL
NULL_DATE=Vulcan.__VODate{}
NULL_PSZ=Vulcan.__Psz{System.IntPtr.Zero}
NULL_STRING=System.String.Empty
NULL_SYMBOL=Vulcan.__Symbol{}

; Data Types
; Types should implement Explicit and Implicit converters and Operators to allow normal operations
; Types should also have the appropriate constructors:
; Array constructor receives object[] values or usual[] values or int capacity
; Date constructor receives 3 params (Year, Month, Day)
; Float constructor receives 3 params, Value (System.Double), Length (int) and Decimals (int), only used with literal values when /vo14 is enabled
; Psz constructor receives a Unicode String
; Symbol constructor receives a Unicode String
; Usual constructor may receive Object, xBase type or dotnet type
; In Vulcan PSZ, SYMBOL, USUAL, DATE, FLOAT, WINBOOL are value types (structures)

_CODEBLOCK==Vulcan._Codeblock
ARRAY=Vulcan.__Array
CODEBLOCK==Vulcan.Codeblock
DATE=Vulcan.__VODate
FLOAT=Vulcan.__VOFloat
PSZ=Vulcan.__Psz
SYMBOL=Vulcan.__Symbol
USUAL=Vulcan.__Usual
WINBOOL=Vulcan.__WinBool

; Method names of Getter and Setter for Array Elements. 
; Index is 0 based. Should have 2 overloads. One that accepts an int, and one that accepts an array of ints
; Getter : public Usual __GetElement(int index)  && public Usual __GetElement(params int[] index)
; Setter : public Usual __SetElement(Usual u, int index) && public Usual __SetElement(Usual u, params int[] index)
ArrayGetElement=__GetElement
ArraySetElement=__SetElement


; Runtime functions that will be used by the compiler. Use Fully qualified static method names for all methods
;
; Late Binding support. 
; Send receives USUAL[]
; InternalSend receives Object, String and USUAL[] params. Compiler uses this when it can.
; IVarGet/Put receive Object /string. Value is USUAL
Send=VulcanRTFuncs.Functions.Send
InternalSend=VulcanRTFuncs.Functions.__InternalSend
IVarGet=VulcanRTFuncs.Functions.IVarGet
IVarPut=VulcanRTFuncs.Functions.IVarPut

; String functions receive 2 string params and should respect Collation, SetExact etc.
; Compare returns integer, Equals boolean, Subtract a string
StringCompare=VulcanRTFuncs.Functions.__StringCompare
StringEquals=VulcanRTFuncs.Functions.__StringEQuals
StringNotEquals=VulcanRTFuncs.Functions.__StringNotEquals
StringSubtract=Vulcan.Internal.CompilerServices.StringSubtract


; FieldGet and FieldPut are used for expression such as 
; _FIELD->LASTNAME
; CUSTOMER->LASTNAME
; field names and workareas are strings, values are usuals
FieldGet=VulcanRTFuncs.Functions.__FieldGet
FieldGetWorkarea=VulcanRTFuncs.Functions.__FieldGetWa
FieldPut=VulcanRTFuncs.Functions.__FieldSet
FieldPutWorkarea=VulcanRTFuncs.Functions.__FieldSetWa

; RDD Types
RDDNameSpace=Vulcan.RDD
RDDBase=Vulcan.RDD.RDDBase
IDate=Vulcan.Runtime.IDate
IFloat=Vulcan.Runtime.IFloat
DBFloat=Vulcan.Runtime.DBFloat

; push and pop workarea are used for expressions such as (CUSTOMER)->(DoSomething())
; push receives a string. 
PushWorkArea=VulcanRTFuncs.Functions.__pushWorkarea
PopWorkArea=VulcanRTFuncs.Functions.__popWorkarea

; Begin sequence .. End keeps track of nested level
; The runtime function CanBreak() monitors this level. 

BeginSequenceStart=Vulcan.Internal.CompilerServices.EnterBeginSequence
BeginSequenceEnd=Vulcan.Internal.CompilerServices.ExitBeginSequence
BreakException=Vulcan.Internal.VulcanWrappedException

; convert functions receive a string and List<IntPtr>, release just a List<IntPtr>
String2Psz=Vulcan.Internal.CompilerServices.String2Psz
Cast2Psz=Vulcan.Internal.CompilerServices.String2Psz
String2PszRelease=Vulcan.Internal.CompilerServices.String2PszRelease

; Macro support
; MCompile Should have 2 overloads: String and String/Boolean
; Should return a Codeblock
MCompile=Vulcan.RTFuncs.Functions.MCompile
ICodeblock=Vulcan.Runtime.ICodeblock
IMacroCompiler=Vulcan.Runtime.IMacroCompiler
RuntimeCodeBlock=Vulcan.Runtime.RuntimeCodeblock

; Memvar Support. Fully qualified (static) method names
DeclarePublic=
DeclarePrivate=
MemVarGet=
MemVarPut=
MemVarRelease=
MethodEnter=
MethodLeave=


; Special Attributes used by the compiler. Do we need these ?

ActualType=Vulcan.Internal.ActualTypeAttribute
ClassLibrary=Vulcan.Internal.VulcanClassLibraryAttribute
ClipperCallingConvention=Vulcan.Internal.ClipperCallingConventionAttribute
CompilerVersion=Vulcan.Internal.VulcanCompilerVersionAttribute
DefaultParameterValue=Vulcan.Internal.DefaultParameterValueAttribute
ImplicitNameSpace=Vulcan.VulcanImplicitNamespaceAttribute
IsVOInstance=Vulcan.Internal.IsVOInstanceAttribute
VOStruct=Vulcan.Internal.VOStructAttribute
VulcanPTR=Vulcan.Internal.VulcanPTRAttribute
