<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">/vo15</title>
  <keywords>
    <keyword translate="true">/vo15 compiler option</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">/vo15: Allow untyped Locals and return types </text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This compiler option will allow you to control what the compiler will do with local variables, parameters and return types without type specification.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The default is /vo15+ for the VO and Vulcan dialects. For the Core dialect the default is /vo15-</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Syntax</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">/vo15[+|-]</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Arguments</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="List"><text styleclass="Code Example" translate="true">+ | - </text><tab /><text styleclass="List" translate="true">Specifying +, or just /vo14, tells the compiler treat floating point literal numbers (for example: 123.456) as FLOAT data type, instead of as REAL8 (System.Double), which is the default. </text></para>
    <para styleclass="Heading2"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">FUNCTION LongSquare(nLong as LONG)</text><tab /><tab /><text styleclass="Code Example" translate="true">// Note that the return type is missing</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">RETURN nLong * nLong</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In VO/Vulcan mode this will (by default) generate a method with a USUAL return type. In Core mode this will not compile but produce a &quot;Missing Type&quot; error (XS1031)</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When you compile with /vo15- this will also produce an error.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Similar code that will be influenced by this compiler option</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">FUNCTION MultiplyLong(nParam1 as LONG, nParam2) AS LONG // Note that the type for nParam2 is missing</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">RETURN nParam1 * nParam2</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">And</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">FUNCTION Tomorrow() AS Date</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">LOCAL dToday := Today() </text><tab /><tab /><tab /><text styleclass="Code Example" translate="true">// Note that the AS DATE is missing</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">RETURN dToday + 1</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"></para>
  </body>
</topic>
