<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Liset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">XS4014</title>
  <keywords>
    <keyword translate="true">XS4014</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">XS4014</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the &apos;await&apos; operator to the result of the call.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn’t apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn&apos;t what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">An equally important issue is what happens to exceptions that are raised in the called async method. An exception that&apos;s raised in a method that returns a Task or Task&lt;TResult&gt; is stored in the returned task. If you don&apos;t await the task or explicitly check for exceptions, the exception is lost. If you await the task, its exception is rethrown.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">As a best practice, you should always await the call.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You should consider suppressing the warning only if you&apos;re sure that you don&apos;t want to wait for the asynchronous call to complete and that the called method won&apos;t raise any exceptions. In that case, you can suppress the warning by assigning the task result of the call to a variable.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following example shows how to cause the warning, how to suppress it, and how to await the call.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><br/><text styleclass="Code with box" translate="true">async Task CallingMethodAsync()  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    resultsTextBox.Text += &quot;\r\n  Entering calling method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">    // Variable delay is used to slow down the called method so that you can  </text><br/><text styleclass="Code with box" translate="true">    // distinguish between awaiting and not awaiting in the program&apos;s output.  </text><br/><text styleclass="Code with box" translate="true">    // You can adjust the value to produce the output that this topic shows  </text><br/><text styleclass="Code with box" translate="true">    // after the code.  </text><br/><text styleclass="Code with box" translate="true">    var delay = 5000;  </text><br/><br/><text styleclass="Code with box" translate="true">    // Call #1.  </text><br/><text styleclass="Code with box" translate="true">    // Call an async method. Because you don&apos;t await it, its completion   </text><br/><text styleclass="Code with box" translate="true">    // isn&apos;t coordinated with the current method, CallingMethodAsync.  </text><br/><text styleclass="Code with box" translate="true">    // The following line causes warning XS4014.  </text><br/><text styleclass="Code with box" translate="true">    CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">    // Call #2.  </text><br/><text styleclass="Code with box" translate="true">    // To suppress the warning without awaiting, you can assign the   </text><br/><text styleclass="Code with box" translate="true">    // returned task to a variable. The assignment doesn&apos;t change how  </text><br/><text styleclass="Code with box" translate="true">    // the program runs. However, recommended practice is always to  </text><br/><text styleclass="Code with box" translate="true">    // await a call to an async method.  </text><br/><br/><text styleclass="Code with box" translate="true">    // Replace Call #1 with the following line.  </text><br/><text styleclass="Code with box" translate="true">    //Task delayTask = CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">    // Call #3  </text><br/><text styleclass="Code with box" translate="true">    // To contrast with an awaited call, replace the unawaited call   </text><br/><text styleclass="Code with box" translate="true">    // (Call #1 or Call #2) with the following awaited call. Best   </text><br/><text styleclass="Code with box" translate="true">    // practice is to await the call.  </text><br/><br/><text styleclass="Code with box" translate="true">    //await CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">    // If the call to CalledMethodAsync isn&apos;t awaited, CallingMethodAsync  </text><br/><text styleclass="Code with box" translate="true">    // continues to run and, in this example, finishes its work and returns  </text><br/><text styleclass="Code with box" translate="true">    // to its caller.  </text><br/><text styleclass="Code with box" translate="true">    resultsTextBox.Text += &quot;\r\n  Returning from calling method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">}  </text><br/><br/><text styleclass="Code with box" translate="true">async Task CalledMethodAsync(int howLong)  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    resultsTextBox.Text +=   </text><br/><text styleclass="Code with box" translate="true">        &quot;\r\n    Entering called method, starting and awaiting Task.Delay.&quot;;  </text><br/><br/><text styleclass="Code with box" translate="true">    // Slow the process down a little so that you can distinguish between  </text><br/><text styleclass="Code with box" translate="true">    // awaiting and not awaiting in the program&apos;s output. Adjust the value  </text><br/><text styleclass="Code with box" translate="true">    // for howLong if necessary.  </text><br/><text styleclass="Code with box" translate="true">    await Task.Delay(howLong);  </text><br/><text styleclass="Code with box" translate="true">    resultsTextBox.Text +=   </text><br/><text styleclass="Code with box" translate="true">        &quot;\r\n    Task.Delay is finished--returning from called method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">}  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the example, if you choose Call #1 or Call #2, the unawaited async method (</text><text styleclass="Code Example" translate="true">CalledMethodAsync</text><text styleclass="Normal" translate="true">) finishes after both its caller (</text><text styleclass="Code Example" translate="true">CallingMethodAsync</text><text styleclass="Normal" translate="true">) and the caller&apos;s caller (</text><text styleclass="Code Example" translate="true">startButton_Click</text><text styleclass="Normal" translate="true">) are complete. The last line in the following output shows you when the called method finishes. Entry to and exit from the event handler that calls </text><text styleclass="Code Example" translate="true">CallingMethodAsync</text><text styleclass="Normal" translate="true"> in the full example are marked in the output.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">  </text></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">Entering the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">  Entering calling method.  </text><br/><text styleclass="Code with box" translate="true">    Entering called method, starting and awaiting Task.Delay.  </text><br/><text styleclass="Code with box" translate="true">  Returning from calling method.  </text><br/><text styleclass="Code with box" translate="true">Exiting the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">    Task.Delay is finished--returning from called method.  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true"> can also suppress compiler warnings by using #pragma warning directives.</text></para>
    <para styleclass="Heading2"><text styleclass="Heading2" translate="true">Example</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following Windows Presentation Foundation (WPF) application contains the methods from the previous example. The following steps set up the application.</text></para>
    <para styleclass="Normal"></para>
    <list id="1" type="ol" listtype="decimal" formatstring="%0:s." format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:'Segoe UI'; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Create a WPF application, and name it AsyncWarning.</text></li>
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">In the Visual Studio Code Editor, choose the MainWindow.xaml tab.</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">     If the tab isn&apos;t visible, open the shortcut menu for MainWindow.xaml in Solution Explorer, and then choose View Code.</text></para>
    <list id="1" type="ol" listtype="decimal" formatstring="%0:s." format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:'Segoe UI'; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">Replace the code in the XAML view of MainWindow.xaml with the following code.</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><text styleclass="Code with box" translate="true">&lt;Window x:Class=&quot;AsyncWarning.MainWindow&quot;  </text><br/><text styleclass="Code with box" translate="true">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;  </text><br/><text styleclass="Code with box" translate="true">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;  </text><br/><text styleclass="Code with box" translate="true">        Title=&quot;MainWindow&quot; Height=&quot;350&quot; Width=&quot;525&quot;&gt;  </text><br/><text styleclass="Code with box" translate="true">    &lt;Grid&gt;  </text><br/><text styleclass="Code with box" translate="true">        &lt;Button x:Name=&quot;startButton&quot; Content=&quot;Start&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;214,28,0,0&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; HorizontalContentAlignment=&quot;Center&quot; FontWeight=&quot;Bold&quot; FontFamily=&quot;Aharoni&quot; Click=&quot;startButton_Click&quot; /&gt;  </text><br/><text styleclass="Code with box" translate="true">        &lt;TextBox x:Name=&quot;resultsTextBox&quot; Margin=&quot;0,80,0,0&quot; TextWrapping=&quot;Wrap&quot; FontFamily=&quot;Lucida Console&quot;/&gt;  </text><br/><text styleclass="Code with box" translate="true">    &lt;/Grid&gt;  </text><br/><text styleclass="Code with box" translate="true">&lt;/Window&gt;  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A simple window that contains a button and a text box appears in the Design view of MainWindow.xaml.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For more information about the XAML Designer, see Creating a UI by using XAML Designer. For information about how to build your own simple UI, see the &quot;To create a WPF application&quot; and &quot;To design a simple WPF MainWindow&quot; sections of Walkthrough: Accessing the Web by Using Async and Await.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">4.   Replace the code in MainWindow.xaml.prg with the following code.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"><text styleclass="Code with box" translate="true">X#</text><br/><br/><text styleclass="Code with box" translate="true">using System;  </text><br/><text styleclass="Code with box" translate="true">using System.Collections.Generic;  </text><br/><text styleclass="Code with box" translate="true">using System.Linq;  </text><br/><text styleclass="Code with box" translate="true">using System.Text;  </text><br/><text styleclass="Code with box" translate="true">using System.Threading.Tasks;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Controls;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Data;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Documents;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Input;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Media;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Media.Imaging;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Navigation;  </text><br/><text styleclass="Code with box" translate="true">using System.Windows.Shapes;  </text><br/><br/><text styleclass="Code with box" translate="true">namespace AsyncWarning  </text><br/><text styleclass="Code with box" translate="true">{  </text><br/><text styleclass="Code with box" translate="true">    public partial class MainWindow : Window  </text><br/><text styleclass="Code with box" translate="true">    {  </text><br/><text styleclass="Code with box" translate="true">        public MainWindow()  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            InitializeComponent();  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><br/><text styleclass="Code with box" translate="true">        private async void startButton_Click(object sender, RoutedEventArgs e)  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text += &quot;\r\nEntering the Click event handler.&quot;;  </text><br/><text styleclass="Code with box" translate="true">            await CallingMethodAsync();  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text += &quot;\r\nExiting the Click event handler.&quot;;  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><br/><text styleclass="Code with box" translate="true">        async Task CallingMethodAsync()  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text += &quot;\r\n  Entering calling method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">            // Variable delay is used to slow down the called method so that you can  </text><br/><text styleclass="Code with box" translate="true">            // distinguish between awaiting and not awaiting in the program&apos;s output.  </text><br/><text styleclass="Code with box" translate="true">            // You can adjust the value to produce the output that this topic shows  </text><br/><text styleclass="Code with box" translate="true">            // after the code.  </text><br/><text styleclass="Code with box" translate="true">            var delay = 5000;  </text><br/><br/><text styleclass="Code with box" translate="true">            // Call #1.  </text><br/><text styleclass="Code with box" translate="true">            // Call an async method. Because you don&apos;t await it, its completion   </text><br/><text styleclass="Code with box" translate="true">            // isn&apos;t coordinated with the current method, CallingMethodAsync.  </text><br/><text styleclass="Code with box" translate="true">            // The following line causes warning XS4014.  </text><br/><text styleclass="Code with box" translate="true">            CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">            // Call #2.  </text><br/><text styleclass="Code with box" translate="true">            // To suppress the warning without awaiting, you can assign the   </text><br/><text styleclass="Code with box" translate="true">            // returned task to a variable. The assignment doesn&apos;t change how  </text><br/><text styleclass="Code with box" translate="true">            // the program runs. However, recommended practice is always to  </text><br/><text styleclass="Code with box" translate="true">            // await a call to an async method.  </text><br/><br/><text styleclass="Code with box" translate="true">            // Replace Call #1 with the following line.  </text><br/><text styleclass="Code with box" translate="true">            //Task delayTask = CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">            // Call #3  </text><br/><text styleclass="Code with box" translate="true">            // To contrast with an awaited call, replace the unawaited call   </text><br/><text styleclass="Code with box" translate="true">            // (Call #1 or Call #2) with the following awaited call. Best   </text><br/><text styleclass="Code with box" translate="true">            // practice is to await the call.  </text><br/><br/><text styleclass="Code with box" translate="true">            //await CalledMethodAsync(delay);  </text><br/><br/><text styleclass="Code with box" translate="true">            // If the call to CalledMethodAsync isn&apos;t awaited, CallingMethodAsync  </text><br/><text styleclass="Code with box" translate="true">            // continues to run and, in this example, finishes its work and returns  </text><br/><text styleclass="Code with box" translate="true">            // to its caller.  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text += &quot;\r\n  Returning from calling method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><br/><text styleclass="Code with box" translate="true">        async Task CalledMethodAsync(int howLong)  </text><br/><text styleclass="Code with box" translate="true">        {  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text +=   </text><br/><text styleclass="Code with box" translate="true">                &quot;\r\n    Entering called method, starting and awaiting Task.Delay.&quot;;  </text><br/><br/><text styleclass="Code with box" translate="true">            // Slow the process down a little so that you can distinguish between  </text><br/><text styleclass="Code with box" translate="true">            // awaiting and not awaiting in the program&apos;s output. Adjust the value  </text><br/><text styleclass="Code with box" translate="true">            // for howLong if necessary.  </text><br/><text styleclass="Code with box" translate="true">            await Task.Delay(howLong);  </text><br/><text styleclass="Code with box" translate="true">            resultsTextBox.Text +=   </text><br/><text styleclass="Code with box" translate="true">                &quot;\r\n    Task.Delay is finished--returning from called method.&quot;;  </text><br/><text styleclass="Code with box" translate="true">        }  </text><br/><text styleclass="Code with box" translate="true">    }  </text><br/><br/><text styleclass="Code with box" translate="true">    // Output with Call #1 or Call #2. (Wait for the last line to appear.)  </text><br/><br/><text styleclass="Code with box" translate="true">    // Entering the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">    //   Entering calling method.  </text><br/><text styleclass="Code with box" translate="true">    //     Entering called method, starting and awaiting Task.Delay.  </text><br/><text styleclass="Code with box" translate="true">    //   Returning from calling method.  </text><br/><text styleclass="Code with box" translate="true">    // Exiting the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">    //     Task.Delay is finished--returning from called method.  </text><br/><br/><text styleclass="Code with box" translate="true">    // Output with Call #3, which awaits the call to CalledMethodAsync.  </text><br/><br/><text styleclass="Code with box" translate="true">    // Entering the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">    //   Entering calling method.  </text><br/><text styleclass="Code with box" translate="true">    //     Entering called method, starting and awaiting Task.Delay.  </text><br/><text styleclass="Code with box" translate="true">    //     Task.Delay is finished--returning from called method.  </text><br/><text styleclass="Code with box" translate="true">    //   Returning from calling method.  </text><br/><text styleclass="Code with box" translate="true">    // Exiting the Click event handler.  </text><br/><text styleclass="Code with box" translate="true">}  </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">5.  Choose the F5 key to run the program, and then choose the Start button.</text></para>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Normal" style="margin-left:13px;"><text styleclass="Normal" translate="true">     The expected output appears at the end of the code.</text></para>
  </body>
</topic>
